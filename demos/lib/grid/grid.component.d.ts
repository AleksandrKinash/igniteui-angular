import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ComponentFactoryResolver, ElementRef, EventEmitter, IterableDiffers, NgZone, OnDestroy, OnInit, QueryList, TemplateRef, ViewContainerRef } from "@angular/core";
import { Subject } from "rxjs";
import { IgxSelectionAPIService } from "../core/selection";
import { DataType } from "../data-operations/data-util";
import { FilteringLogic, IFilteringExpression } from "../data-operations/filtering-expression.interface";
import { IGroupByExpandState } from "../data-operations/groupby-expand-state.interface";
import { IGroupByRecord } from "../data-operations/groupby-record.interface";
import { ISortingExpression, SortingDirection } from "../data-operations/sorting-expression.interface";
import { IgxForOfDirective } from "../directives/for-of/for_of.directive";
import { IForOfState } from "../directives/for-of/IForOfState";
import { IgxCheckboxComponent } from "./../checkbox/checkbox.component";
import { IgxGridAPIService } from "./api.service";
import { IgxGridCellComponent } from "./cell.component";
import { IgxColumnComponent } from "./column.component";
import { ISummaryExpression } from "./grid-summary";
import { IgxGroupByRowTemplateDirective } from "./grid.common";
import { IgxGridGroupByRowComponent } from "./groupby-row.component";
import { IgxGridRowComponent } from "./row.component";
export interface IGridCellEventArgs {
    cell: IgxGridCellComponent;
    event: Event;
}
export interface IGridEditEventArgs {
    row: IgxGridRowComponent;
    cell: IgxGridCellComponent;
    currentValue: any;
    newValue: any;
}
export interface IPinColumnEventArgs {
    column: IgxColumnComponent;
    insertAtIndex: number;
}
export interface IPageEventArgs {
    previous: number;
    current: number;
}
export interface IRowDataEventArgs {
    data: any;
}
export interface IColumnResizeEventArgs {
    column: IgxColumnComponent;
    prevWidth: string;
    newWidth: string;
}
export interface IRowSelectionEventArgs {
    oldSelection: any[];
    newSelection: any[];
    row?: IgxGridRowComponent;
    event?: Event;
}
export interface ISearchInfo {
    searchText: string;
    caseSensitive: boolean;
    activeMatchIndex: number;
    matchInfoCache: any[];
}
export declare class IgxGridComponent implements OnInit, OnDestroy, AfterContentInit, AfterViewInit {
    private gridAPI;
    private selectionAPI;
    private elementRef;
    private zone;
    document: any;
    cdr: ChangeDetectorRef;
    private resolver;
    private differs;
    private viewRef;
    data: any[];
    autoGenerate: boolean;
    id: string;
    filteringLogic: FilteringLogic;
    filteringExpressions: any[];
    groupByIndentation: number;
    filteredData: any;
    groupingExpressions: any[];
    groupingExpansionState: IGroupByExpandState[];
    groupByDefaultExpanded: boolean;
    paging: boolean;
    page: number;
    perPage: number;
    paginationTemplate: TemplateRef<any>;
    rowSelectable: boolean;
    height: any;
    width: any;
    readonly headerWidth: number;
    evenRowCSS: string;
    oddRowCSS: string;
    rowHeight: number;
    columnWidth: string;
    primaryKey: any;
    emptyGridMessage: string;
    onCellClick: EventEmitter<IGridCellEventArgs>;
    onSelection: EventEmitter<IGridCellEventArgs>;
    onRowSelectionChange: EventEmitter<IRowSelectionEventArgs>;
    onColumnPinning: EventEmitter<IPinColumnEventArgs>;
    onEditDone: EventEmitter<IGridEditEventArgs>;
    onColumnInit: EventEmitter<IgxColumnComponent>;
    onSortingDone: EventEmitter<ISortingExpression>;
    onFilteringDone: EventEmitter<IFilteringExpression>;
    onPagingDone: EventEmitter<IPageEventArgs>;
    onRowAdded: EventEmitter<IRowDataEventArgs>;
    onRowDeleted: EventEmitter<IRowDataEventArgs>;
    onGroupingDone: EventEmitter<any>;
    onDataPreLoad: EventEmitter<any>;
    onColumnResized: EventEmitter<IColumnResizeEventArgs>;
    onContextMenu: EventEmitter<IGridCellEventArgs>;
    onDoubleClick: EventEmitter<IGridCellEventArgs>;
    columnList: QueryList<IgxColumnComponent>;
    protected groupTemplate: IgxGroupByRowTemplateDirective;
    rowList: QueryList<any>;
    dataRowList: QueryList<any>;
    groupedRowList: QueryList<IgxGridGroupByRowComponent>;
    emptyGridTemplate: TemplateRef<any>;
    parentVirtDir: IgxForOfDirective<any>;
    verticalScrollContainer: IgxForOfDirective<any>;
    scr: ElementRef;
    paginator: ElementRef;
    headerContainer: IgxForOfDirective<any>;
    headerCheckboxContainer: ElementRef;
    headerCheckbox: IgxCheckboxComponent;
    groupArea: ElementRef;
    theadRow: ElementRef;
    tbody: ElementRef;
    tfoot: ElementRef;
    tabindex: number;
    hostClass: string;
    hostRole: string;
    readonly pipeTrigger: number;
    sortingExpressions: any[];
    virtualizationState: IForOfState;
    totalItemCount: number;
    readonly calcGroupByWidth: number;
    pagingState: any;
    calcWidth: number;
    calcRowCheckboxWidth: number;
    calcHeight: number;
    tfootHeight: number;
    cellInEditMode: IgxGridCellComponent;
    eventBus: Subject<boolean>;
    allRowsSelected: boolean;
    lastSearchInfo: ISearchInfo;
    protected destroy$: Subject<boolean>;
    protected _perPage: number;
    protected _page: number;
    protected _paging: boolean;
    protected _rowSelection: boolean;
    protected _pipeTrigger: number;
    protected _columns: IgxColumnComponent[];
    protected _pinnedColumns: IgxColumnComponent[];
    protected _unpinnedColumns: IgxColumnComponent[];
    protected _filteringLogic: FilteringLogic;
    protected _filteringExpressions: any[];
    protected _sortingExpressions: any[];
    protected _groupingExpressions: any[];
    protected _groupingExpandState: IGroupByExpandState[];
    protected _groupRowTemplate: TemplateRef<any>;
    protected _groupAreaTemplate: TemplateRef<any>;
    private _filteredData;
    private resizeHandler;
    private columnListDiffer;
    private _height;
    private _width;
    constructor(gridAPI: IgxGridAPIService, selectionAPI: IgxSelectionAPIService, elementRef: ElementRef, zone: NgZone, document: any, cdr: ChangeDetectorRef, resolver: ComponentFactoryResolver, differs: IterableDiffers, viewRef: ViewContainerRef);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    dataLoading(event: any): void;
    readonly nativeElement: any;
    groupRowTemplate: TemplateRef<any>;
    groupAreaTemplate: TemplateRef<any>;
    readonly calcResizerHeight: number;
    readonly calcPinnedContainerMaxWidth: number;
    readonly unpinnedAreaMinWidth: number;
    readonly pinnedWidth: number;
    readonly unpinnedWidth: number;
    readonly summariesMargin: number;
    readonly columns: IgxColumnComponent[];
    readonly pinnedColumns: IgxColumnComponent[];
    readonly unpinnedColumns: IgxColumnComponent[];
    getColumnByName(name: string): IgxColumnComponent;
    getRowByIndex(index: number): IgxGridRowComponent;
    getRowByKey(keyValue: any): IgxGridRowComponent;
    readonly visibleColumns: IgxColumnComponent[];
    getCellByColumn(rowSelector: any, columnField: string): IgxGridCellComponent;
    readonly totalPages: number;
    readonly totalRecords: number;
    readonly isFirstPage: boolean;
    readonly isLastPage: boolean;
    readonly totalWidth: number;
    nextPage(): void;
    previousPage(): void;
    paginate(val: number): void;
    markForCheck(): void;
    addRow(data: any): void;
    deleteRow(rowSelector: any): void;
    updateCell(value: any, rowSelector: any, column: string): void;
    updateRow(value: any, rowSelector: any): void;
    sort(...rest: any[]): void;
    groupBy(...rest: any[]): void;
    isExpandedGroup(group: IGroupByRecord): boolean;
    toggleGroup(groupRow: IGroupByRecord): void;
    isGroupByRecord(record: any): boolean;
    filter(...rest: any[]): void;
    filterGlobal(value: any, condition?: any, ignoreCase?: any): void;
    enableSummaries(...rest: any[]): void;
    disableSummaries(...rest: any[]): void;
    clearFilter(name?: string): void;
    clearSort(name?: string): void;
    clearSummaryCache(): void;
    pinColumn(columnName: string): boolean;
    unpinColumn(columnName: string): boolean;
    reflow(): void;
    findNext(text: string, caseSensitive?: boolean): number;
    findPrev(text: string, caseSensitive?: boolean): number;
    refreshSearch(updateActiveInfo?: boolean): number;
    clearSearch(): void;
    readonly hasGroupableColumns: boolean;
    readonly hasSortableColumns: boolean;
    readonly hasEditableColumns: boolean;
    readonly hasFilterableColumns: boolean;
    readonly hasSummarizedColumns: boolean;
    readonly selectedCells: IgxGridCellComponent[] | any[];
    protected readonly rowBasedHeight: number;
    protected _derivePossibleHeight(): void;
    protected _derivePossibleWidth(): void;
    protected calculateGridHeight(): void;
    protected getPossibleColumnWidth(): string;
    protected calculateGridWidth(): void;
    protected calcMaxSummaryHeight(): number;
    protected calculateGridSizes(): void;
    protected getPinnedWidth(takeHidden?: boolean): number;
    protected getUnpinnedWidth(takeHidden?: boolean): number;
    protected _sort(name: string, direction?: SortingDirection, ignoreCase?: boolean): void;
    protected _sortMultiple(expressions: ISortingExpression[]): void;
    protected _groupBy(name: string, direction?: SortingDirection, ignoreCase?: boolean): void;
    protected _groupByMultiple(expressions: ISortingExpression[]): void;
    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState;
    protected _toggleGroup(groupRow: IGroupByRecord): void;
    protected _applyGrouping(): void;
    protected _filter(name: string, value: any, condition?: any, ignoreCase?: any): void;
    protected _filterMultiple(expressions: IFilteringExpression[]): void;
    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any): void;
    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean): void;
    protected _disableMultipleSummaries(expressions: string[], hasSummary: boolean): void;
    protected resolveDataTypes(rec: any): DataType;
    protected autogenerateColumns(): void;
    protected initColumns(collection: QueryList<IgxColumnComponent>, cb?: any): void;
    protected setEventBusSubscription(): void;
    protected setVerticalScrollSubscription(): void;
    onHeaderCheckboxClick(event: any): void;
    readonly headerCheckboxAriaLabel: string;
    readonly template: TemplateRef<any>;
    checkHeaderChecboxStatus(headerStatus?: boolean): void;
    filteredItemsStatus(componentID: string, filteredData: any[], primaryKey?: any): "indeterminate" | "allSelected" | "noneSelected";
    updateHeaderChecboxStatusOnFilter(data: any): void;
    selectedRows(): any[];
    selectRows(rowIDs: any[], clearCurrentSelection?: boolean): void;
    deselectRows(rowIDs: any[]): void;
    selectAllRows(): void;
    deselectAllRows(): void;
    triggerRowSelectionChange(newSelection: any[], row?: IgxGridRowComponent, event?: Event, headerStatus?: boolean): void;
    navigateDown(rowIndex: number, columnIndex: number): void;
    navigateUp(rowIndex: number, columnIndex: number): void;
    private _focusNextCell(rowIndex, columnIndex, dir?);
    private subscribeNext(virtualContainer, callback);
    trackColumnChanges(index: any, col: any): any;
    private find(text, increment, caseSensitive?, scroll?);
    private readonly filteredSortedData;
    private scrollTo(row, column, page);
    private scrollDirective(directive, goal);
    private rebuildMatchCache();
    private findHiglightedItem();
    private restoreHighlight(highlightedItem);
}
