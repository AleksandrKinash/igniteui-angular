import { Subject } from "rxjs";
import { IFilteringExpression } from "../data-operations/filtering-expression.interface";
import { IGroupByExpandState } from "../data-operations/groupby-expand-state.interface";
import { IGroupByRecord } from "../data-operations/groupby-record.interface";
import { ISortingExpression, SortingDirection } from "../data-operations/sorting-expression.interface";
import { IgxGridCellComponent } from "./cell.component";
import { IgxColumnComponent } from "./column.component";
import { IgxGridComponent } from "./grid.component";
import { IgxGridRowComponent } from "./row.component";
export declare class IgxGridAPIService {
    change: Subject<any>;
    protected state: Map<string, IgxGridComponent>;
    protected summaryCacheMap: Map<string, Map<string, any[]>>;
    register(grid: IgxGridComponent): void;
    get(id: string): IgxGridComponent;
    get_column_by_name(id: string, name: string): IgxColumnComponent;
    set_summary_by_column_name(id: string, name: string): void;
    get_summaries(id: string): Map<string, any[]>;
    remove_summary(id: string, name?: string): void;
    get_row_by_key(id: string, rowSelector: any): IgxGridRowComponent;
    get_row_by_index(id: string, rowIndex: number): IgxGridRowComponent;
    get_cell_by_field(id: string, rowSelector: any, field: string): IgxGridCellComponent;
    notify(id: string): void;
    get_cell_by_index(id: string, rowIndex: number, columnIndex: number): IgxGridCellComponent;
    get_cell_by_visible_index(id: string, rowIndex: number, columnIndex: number): IgxGridCellComponent;
    update(id: string, cell: IgxGridCellComponent): void;
    update_row(value: any, id: string, row: IgxGridRowComponent): void;
    sort(id: string, fieldName: string, dir: SortingDirection, ignoreCase: boolean): void;
    sort_multiple(id: string, expressions: ISortingExpression[]): void;
    groupBy(id: string, fieldName: string, dir: SortingDirection, ignoreCase: boolean): void;
    groupBy_multiple(id: string, expressions: ISortingExpression[]): void;
    groupBy_get_expanded_for_group(id: string, groupRow: IGroupByRecord): IGroupByExpandState;
    groupBy_toggle_group(id: string, groupRow: IGroupByRecord): void;
    filter(id: any, fieldName: any, term: any, condition: any, ignoreCase: any): void;
    filter_multiple(id: string, expressions: IFilteringExpression[]): void;
    filter_global(id: any, term: any, condition: any, ignoreCase: any): void;
    clear_filter(id: any, fieldName: any): void;
    protected calculateSummaries(id: string, column: any, data: any): void;
    clear_sort(id: any, fieldName: any): void;
    protected prepare_filtering_expression(state: any, fieldName: any, searchVal: any, condition: any, ignoreCase: any): void;
    protected prepare_sorting_expression(state: any, fieldName: any, dir: any, ignoreCase: any): void;
    protected arrange_sorting_expressions(id: any): void;
    protected remove_grouping_expression(id: any, fieldName: any): void;
}
