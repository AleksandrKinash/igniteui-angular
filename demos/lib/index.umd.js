(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@angular/core"), require("@angular/common"), require("@angular/animations"), require("@angular/forms"), require("rxjs/operators"), require("@angular/platform-browser"), require("jszip/dist/jszip"));
	else if(typeof define === 'function' && define.amd)
		define(["@angular/core", "@angular/common", "@angular/animations", "@angular/forms", "rxjs/operators", "@angular/platform-browser", "jszip/dist/jszip"], factory);
	else if(typeof exports === 'object')
		exports["igniteui-angular"] = factory(require("@angular/core"), require("@angular/common"), require("@angular/animations"), require("@angular/forms"), require("rxjs/operators"), require("@angular/platform-browser"), require("jszip/dist/jszip"));
	else
		root["igniteui-angular"] = factory(root["ng"]["core"], root["ng"]["common"], root["ng"]["animations"], root["ng"]["forms"], root["Rx"], root["ng"]["platformBrowser"], root[undefined]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_36__, __WEBPACK_EXTERNAL_MODULE_50__, __WEBPACK_EXTERNAL_MODULE_254__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 112);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = __extends;
/* unused harmony export __assign */
/* unused harmony export __rest */
/* unused harmony export __decorate */
/* unused harmony export __param */
/* unused harmony export __metadata */
/* unused harmony export __awaiter */
/* unused harmony export __generator */
/* unused harmony export __exportStar */
/* unused harmony export __values */
/* unused harmony export __read */
/* unused harmony export __spread */
/* unused harmony export __await */
/* unused harmony export __asyncGenerator */
/* unused harmony export __asyncDelegator */
/* unused harmony export __asyncValues */
/* unused harmony export __makeTemplateObject */
/* unused harmony export __importStar */
/* unused harmony export __importDefault */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; }; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator];
    return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator]();
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Observable; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_toSubscriber__ = __webpack_require__(157);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_symbol_observable__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_pipe__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__config__ = __webpack_require__(44);
/** PURE_IMPORTS_START _util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */




/**
 * A representation of any set of values over any amount of time. This is the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = /*@__PURE__*/ (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable(subscribe) {
        /** Internal implementation detail, do not use directly. */
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    /**
     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
     *
     * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
     *
     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It
     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
     * thought.
     *
     * Apart from starting the execution of an Observable, this method allows you to listen for values
     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
     * following ways.
     *
     * The first way is creating an object that implements {@link Observer} interface. It should have methods
     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
     * be left uncaught.
     *
     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
     *
     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
     *
     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
     * It is an Observable itself that decides when these functions will be called. For example {@link of}
     * by default emits all its values synchronously. Always check documentation for how given Observable
     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
     *
     * @example <caption>Subscribe with an Observer</caption>
     * const sumObserver = {
     *   sum: 0,
     *   next(value) {
     *     console.log('Adding: ' + value);
     *     this.sum = this.sum + value;
     *   },
     *   error() { // We actually could just remove this method,
     *   },        // since we do not really care about errors right now.
     *   complete() {
     *     console.log('Sum equals: ' + this.sum);
     *   }
     * };
     *
     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
     * .subscribe(sumObserver);
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Subscribe with functions</caption>
     * let sum = 0;
     *
     * Rx.Observable.of(1, 2, 3)
     * .subscribe(
     *   function(value) {
     *     console.log('Adding: ' + value);
     *     sum = sum + value;
     *   },
     *   undefined,
     *   function() {
     *     console.log('Sum equals: ' + sum);
     *   }
     * );
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Cancel a subscription</caption>
     * const subscription = Rx.Observable.interval(1000).subscribe(
     *   num => console.log(num),
     *   undefined,
     *   () => console.log('completed!') // Will not be called, even
     * );                                // when cancelling subscription
     *
     *
     * setTimeout(() => {
     *   subscription.unsubscribe();
     *   console.log('unsubscribed!');
     * }, 2500);
     *
     * // Logs:
     * // 0 after 1s
     * // 1 after 2s
     * // "unsubscribed!" after 2.5s
     *
     *
     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
     *  Observable.
     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled.
     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     * @method subscribe
     */
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = Object(__WEBPACK_IMPORTED_MODULE_0__util_toSubscriber__["a" /* toSubscriber */])(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
        }
        if (__WEBPACK_IMPORTED_MODULE_3__config__["a" /* config */].useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (__WEBPACK_IMPORTED_MODULE_3__config__["a" /* config */].useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            // Must be declared in a separate statement to avoid a RefernceError when
            // accessing subscription below in the closure due to Temporal Dead Zone.
            var subscription;
            subscription = _this.subscribe(function (value) {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Observable.prototype._subscribe = function (subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable.prototype[__WEBPACK_IMPORTED_MODULE_1__internal_symbol_observable__["a" /* observable */]] = function () {
        return this;
    };
    /* tslint:enable:max-line-length */
    /**
     * Used to stitch together functional operators into a chain.
     * @method pipe
     * @return {Observable} the Observable result of all of the operators having
     * been called in the order they were passed in.
     *
     * @example
     *
     * import { map, filter, scan } from 'rxjs/operators';
     *
     * Rx.Observable.interval(1000)
     *   .pipe(
     *     filter(x => x % 2 === 0),
     *     map(x => x + x),
     *     scan((acc, x) => acc + x)
     *   )
     *   .subscribe(x => console.log(x))
     */
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return Object(__WEBPACK_IMPORTED_MODULE_2__util_pipe__["b" /* pipeFromArray */])(operations)(this);
    };
    /* tslint:enable:max-line-length */
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     * @nocollapse
     */
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());

/**
 * Decides between a passed promise constructor from consuming code,
 * A default configured promise constructor, and the native promise
 * constructor and returns it. If nothing can be found, it will throw
 * an error.
 * @param promiseCtor The optional promise constructor to passed by consuming code
 */
function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = __WEBPACK_IMPORTED_MODULE_3__config__["a" /* config */].Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}
//# sourceMappingURL=Observable.js.map


/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Subscription; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_isArray__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isObject__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isFunction__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_tryCatch__ = __webpack_require__(158);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_errorObject__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_UnsubscriptionError__ = __webpack_require__(85);
/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */






/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = /*@__PURE__*/ (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        /** @internal */
        this._parent = null;
        /** @internal */
        this._parents = null;
        /** @internal */
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (Object(__WEBPACK_IMPORTED_MODULE_2__util_isFunction__["a" /* isFunction */])(_unsubscribe)) {
            var trial = Object(__WEBPACK_IMPORTED_MODULE_3__util_tryCatch__["a" /* tryCatch */])(_unsubscribe).call(this);
            if (trial === __WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */]) {
                hasErrors = true;
                errors = errors || (__WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */].e instanceof __WEBPACK_IMPORTED_MODULE_5__util_UnsubscriptionError__["a" /* UnsubscriptionError */] ?
                    flattenUnsubscriptionErrors(__WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */].e.errors) : [__WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */].e]);
            }
        }
        if (Object(__WEBPACK_IMPORTED_MODULE_0__util_isArray__["a" /* isArray */])(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isObject__["a" /* isObject */])(sub)) {
                    var trial = Object(__WEBPACK_IMPORTED_MODULE_3__util_tryCatch__["a" /* tryCatch */])(sub.unsubscribe).call(sub);
                    if (trial === __WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */]) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = __WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */].e;
                        if (err instanceof __WEBPACK_IMPORTED_MODULE_5__util_UnsubscriptionError__["a" /* UnsubscriptionError */]) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new __WEBPACK_IMPORTED_MODULE_5__util_UnsubscriptionError__["a" /* UnsubscriptionError */](errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    /** @internal */
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    /** @nocollapse */
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());

function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof __WEBPACK_IMPORTED_MODULE_5__util_UnsubscriptionError__["a" /* UnsubscriptionError */]) ? err.errors : err); }, []);
}
//# sourceMappingURL=Subscription.js.map


/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var icon_component_1 = __webpack_require__(117);
var icon_service_1 = __webpack_require__(73);
var IgxIconModule = (function () {
    function IgxIconModule() {
    }
    IgxIconModule_1 = IgxIconModule;
    IgxIconModule.forRoot = function () {
        return {
            ngModule: IgxIconModule_1,
            providers: [icon_service_1.IgxIconService]
        };
    };
    IgxIconModule = IgxIconModule_1 = __decorate([
        core_1.NgModule({
            declarations: [icon_component_1.IgxIconComponent],
            exports: [icon_component_1.IgxIconComponent],
            imports: [common_1.CommonModule],
            providers: [icon_service_1.IgxIconService]
        })
    ], IgxIconModule);
    return IgxIconModule;
    var IgxIconModule_1;
}());
exports.IgxIconModule = IgxIconModule;


/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Subscriber; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isFunction__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Observer__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Subscription__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_symbol_rxSubscriber__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__config__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_hostReportError__ = __webpack_require__(54);
/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */







/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        /** @internal */ _this.syncErrorValue = null;
        /** @internal */ _this.syncErrorThrown = false;
        /** @internal */ _this.syncErrorThrowable = false;
        _this.isStopped = false;
        switch (arguments.length) {
            case 0:
                _this.destination = __WEBPACK_IMPORTED_MODULE_2__Observer__["a" /* empty */];
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = __WEBPACK_IMPORTED_MODULE_2__Observer__["a" /* empty */];
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    // HACK(benlesh): For situations where Node has multiple copies of rxjs in
                    // node_modules, we cannot rely on `instanceof` checks
                    if (isTrustedSubscriber(destinationOrNext)) {
                        var trustedSubscriber = destinationOrNext[__WEBPACK_IMPORTED_MODULE_4__internal_symbol_rxSubscriber__["a" /* rxSubscriber */]]();
                        _this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;
                        _this.destination = trustedSubscriber;
                        trustedSubscriber.add(_this);
                    }
                    else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[__WEBPACK_IMPORTED_MODULE_4__internal_symbol_rxSubscriber__["a" /* rxSubscriber */]] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     * @nocollapse
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(__WEBPACK_IMPORTED_MODULE_3__Subscription__["a" /* Subscription */]));

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isFunction__["a" /* isFunction */])(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== __WEBPACK_IMPORTED_MODULE_2__Observer__["a" /* empty */]) {
                context = Object.create(observerOrNext);
                if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isFunction__["a" /* isFunction */])(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!__WEBPACK_IMPORTED_MODULE_5__config__["a" /* config */].useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = __WEBPACK_IMPORTED_MODULE_5__config__["a" /* config */].useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                Object(__WEBPACK_IMPORTED_MODULE_6__util_hostReportError__["a" /* hostReportError */])(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    Object(__WEBPACK_IMPORTED_MODULE_6__util_hostReportError__["a" /* hostReportError */])(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!__WEBPACK_IMPORTED_MODULE_5__config__["a" /* config */].useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (__WEBPACK_IMPORTED_MODULE_5__config__["a" /* config */].useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                Object(__WEBPACK_IMPORTED_MODULE_6__util_hostReportError__["a" /* hostReportError */])(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        if (!__WEBPACK_IMPORTED_MODULE_5__config__["a" /* config */].useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (__WEBPACK_IMPORTED_MODULE_5__config__["a" /* config */].useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                Object(__WEBPACK_IMPORTED_MODULE_6__util_hostReportError__["a" /* hostReportError */])(err);
                return true;
            }
        }
        return false;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
function isTrustedSubscriber(obj) {
    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[__WEBPACK_IMPORTED_MODULE_4__internal_symbol_rxSubscriber__["a" /* rxSubscriber */]]);
}
//# sourceMappingURL=Subscriber.js.map


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isArray; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
//# sourceMappingURL=isArray.js.map


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var rxjs_1 = __webpack_require__(18);
var utils_1 = __webpack_require__(27);
var sorting_expression_interface_1 = __webpack_require__(26);
var IgxGridAPIService = (function () {
    function IgxGridAPIService() {
        this.change = new rxjs_1.Subject();
        this.state = new Map();
        this.summaryCacheMap = new Map();
    }
    IgxGridAPIService.prototype.register = function (grid) {
        this.state.set(grid.id, grid);
    };
    IgxGridAPIService.prototype.get = function (id) {
        return this.state.get(id);
    };
    IgxGridAPIService.prototype.get_column_by_name = function (id, name) {
        return this.get(id).columnList.find(function (col) { return col.field === name; });
    };
    IgxGridAPIService.prototype.set_summary_by_column_name = function (id, name) {
        if (!this.summaryCacheMap.get(id)) {
            this.summaryCacheMap.set(id, new Map());
        }
        var column = this.get_column_by_name(id, name);
        if (this.get(id).filteredData) {
            if (this.get(id).filteredData.length > 0) {
                this.calculateSummaries(id, column, this.get(id).filteredData.map(function (rec) { return rec[column.field]; }));
            }
            else {
                this.calculateSummaries(id, column, this.get(id).filteredData.map(function (rec) { return rec[column.field]; }));
            }
        }
        else {
            this.calculateSummaries(id, column, this.get(id).data.map(function (rec) { return rec[column.field]; }));
        }
    };
    IgxGridAPIService.prototype.get_summaries = function (id) {
        return this.summaryCacheMap.get(id);
    };
    IgxGridAPIService.prototype.remove_summary = function (id, name) {
        if (this.summaryCacheMap.has(id)) {
            if (!name) {
                this.summaryCacheMap.delete(id);
            }
            else {
                this.summaryCacheMap.get(id).delete(name);
            }
        }
    };
    IgxGridAPIService.prototype.get_row_by_key = function (id, rowSelector) {
        var primaryKey = this.get(id).primaryKey;
        if (primaryKey !== undefined && primaryKey !== null) {
            return this.get(id).dataRowList.find(function (row) { return row.rowData[primaryKey] === rowSelector; });
        }
        return this.get(id).rowList.find(function (row) { return row.index === rowSelector; });
    };
    IgxGridAPIService.prototype.get_row_by_index = function (id, rowIndex) {
        return this.get(id).rowList.find(function (row) { return row.index === rowIndex; });
    };
    IgxGridAPIService.prototype.get_cell_by_field = function (id, rowSelector, field) {
        var row = this.get_row_by_key(id, rowSelector);
        if (row && row.cells) {
            return row.cells.find(function (cell) { return cell.column.field === field; });
        }
    };
    IgxGridAPIService.prototype.notify = function (id) {
        this.get(id).eventBus.next(true);
    };
    IgxGridAPIService.prototype.get_cell_by_index = function (id, rowIndex, columnIndex) {
        var row = this.get_row_by_index(id, rowIndex);
        if (row && row.cells) {
            return row.cells.find(function (cell) { return cell.columnIndex === columnIndex; });
        }
    };
    IgxGridAPIService.prototype.get_cell_by_visible_index = function (id, rowIndex, columnIndex) {
        var row = this.get_row_by_index(id, rowIndex);
        if (row && row.cells) {
            return row.cells.find(function (cell) { return cell.visibleColumnIndex === columnIndex; });
        }
    };
    IgxGridAPIService.prototype.update = function (id, cell) {
        var index = this.get(id).data.indexOf(cell.row.rowData);
        this.get(id).data[index][cell.column.field] = cell.value;
    };
    IgxGridAPIService.prototype.update_row = function (value, id, row) {
        var index = this.get(id).data.indexOf(row.rowData);
        var args = { row: row, cell: null, currentValue: this.get(id).data[index], newValue: value };
        this.get(id).onEditDone.emit(args);
        this.get(id).data[index] = args.newValue;
    };
    IgxGridAPIService.prototype.sort = function (id, fieldName, dir, ignoreCase) {
        if (dir === sorting_expression_interface_1.SortingDirection.None) {
            this.remove_grouping_expression(id, fieldName);
        }
        var sortingState = utils_1.cloneArray(this.get(id).sortingExpressions, true);
        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase);
        this.get(id).sortingExpressions = sortingState;
    };
    IgxGridAPIService.prototype.sort_multiple = function (id, expressions) {
        var sortingState = utils_1.cloneArray(this.get(id).sortingExpressions, true);
        for (var _i = 0, expressions_1 = expressions; _i < expressions_1.length; _i++) {
            var each = expressions_1[_i];
            if (each.dir === sorting_expression_interface_1.SortingDirection.None) {
                this.remove_grouping_expression(id, each.fieldName);
            }
            this.prepare_sorting_expression(sortingState, each.fieldName, each.dir, each.ignoreCase);
        }
        this.get(id).sortingExpressions = sortingState;
    };
    IgxGridAPIService.prototype.groupBy = function (id, fieldName, dir, ignoreCase) {
        var groupingState = this.get(id).groupingExpressions;
        this.prepare_sorting_expression(groupingState, fieldName, dir, ignoreCase);
        this.get(id).groupingExpressions = groupingState;
        this.sort(id, fieldName, dir, ignoreCase);
        this.arrange_sorting_expressions(id);
    };
    IgxGridAPIService.prototype.groupBy_multiple = function (id, expressions) {
        var groupingState = this.get(id).groupingExpressions;
        for (var _i = 0, expressions_2 = expressions; _i < expressions_2.length; _i++) {
            var each = expressions_2[_i];
            this.prepare_sorting_expression(groupingState, each.fieldName, each.dir, each.ignoreCase);
        }
        this.get(id).groupingExpressions = groupingState;
        this.sort_multiple(id, expressions);
        this.arrange_sorting_expressions(id);
    };
    IgxGridAPIService.prototype.groupBy_get_expanded_for_group = function (id, groupRow) {
        var grState = this.get(id).groupingExpansionState;
        return grState.find(function (state) {
            return state.fieldName === groupRow.expression.fieldName && state.value === groupRow.value;
        });
    };
    IgxGridAPIService.prototype.groupBy_toggle_group = function (id, groupRow) {
        var grid = this.get(id);
        var expansionState = grid.groupingExpansionState;
        var state = this.groupBy_get_expanded_for_group(id, groupRow);
        if (state) {
            state.expanded = !state.expanded;
        }
        else {
            expansionState.push({
                expanded: !grid.groupByDefaultExpanded,
                value: groupRow.value,
                fieldName: groupRow.expression.fieldName
            });
        }
        this.get(id).groupingExpansionState = expansionState;
    };
    IgxGridAPIService.prototype.filter = function (id, fieldName, term, condition, ignoreCase) {
        var filteringState = this.get(id).filteringExpressions;
        if (this.get(id).paging) {
            this.get(id).page = 0;
        }
        this.prepare_filtering_expression(filteringState, fieldName, term, condition, ignoreCase);
        this.get(id).filteringExpressions = filteringState;
    };
    IgxGridAPIService.prototype.filter_multiple = function (id, expressions) {
        var filteringState = this.get(id).filteringExpressions;
        if (this.get(id).paging) {
            this.get(id).page = 0;
        }
        for (var _i = 0, expressions_3 = expressions; _i < expressions_3.length; _i++) {
            var each = expressions_3[_i];
            this.prepare_filtering_expression(filteringState, each.fieldName, each.searchVal, each.condition, each.ignoreCase);
        }
        this.get(id).filteringExpressions = filteringState;
    };
    IgxGridAPIService.prototype.filter_global = function (id, term, condition, ignoreCase) {
        var filteringState = this.get(id).filteringExpressions;
        if (this.get(id).paging) {
            this.get(id).page = 0;
        }
        for (var _i = 0, _a = this.get(id).columns; _i < _a.length; _i++) {
            var column = _a[_i];
            this.prepare_filtering_expression(filteringState, column.field, term, condition || column.filteringCondition, ignoreCase || column.filteringIgnoreCase);
        }
        this.get(id).filteringExpressions = filteringState;
    };
    IgxGridAPIService.prototype.clear_filter = function (id, fieldName) {
        var filteringState = this.get(id).filteringExpressions;
        var index = filteringState.findIndex(function (expr) { return expr.fieldName === fieldName; });
        if (index > -1) {
            filteringState.splice(index, 1);
            this.get(id).filteringExpressions = filteringState;
        }
        this.get(id).filteredData = null;
    };
    IgxGridAPIService.prototype.calculateSummaries = function (id, column, data) {
        if (!this.summaryCacheMap.get(id).get(column.field)) {
            this.summaryCacheMap.get(id).set(column.field, column.summaries.operate(data));
        }
    };
    IgxGridAPIService.prototype.clear_sort = function (id, fieldName) {
        var sortingState = this.get(id).sortingExpressions;
        var index = sortingState.findIndex(function (expr) { return expr.fieldName === fieldName; });
        if (index > -1) {
            sortingState.splice(index, 1);
            this.get(id).sortingExpressions = sortingState;
        }
    };
    IgxGridAPIService.prototype.prepare_filtering_expression = function (state, fieldName, searchVal, condition, ignoreCase) {
        var expression = state.find(function (expr) { return expr.fieldName === fieldName; });
        var newExpression = { fieldName: fieldName, searchVal: searchVal, condition: condition, ignoreCase: ignoreCase };
        if (!expression) {
            state.push(newExpression);
        }
        else {
            Object.assign(expression, newExpression);
        }
    };
    IgxGridAPIService.prototype.prepare_sorting_expression = function (state, fieldName, dir, ignoreCase) {
        if (dir === sorting_expression_interface_1.SortingDirection.None) {
            state.splice(state.findIndex(function (expr) { return expr.fieldName === fieldName; }), 1);
            return;
        }
        var expression = state.find(function (expr) { return expr.fieldName === fieldName; });
        if (!expression) {
            state.push({ fieldName: fieldName, dir: dir, ignoreCase: ignoreCase });
        }
        else {
            Object.assign(expression, { fieldName: fieldName, dir: dir, ignoreCase: ignoreCase });
        }
    };
    IgxGridAPIService.prototype.arrange_sorting_expressions = function (id) {
        var groupingState = this.get(id).groupingExpressions;
        this.get(id).sortingExpressions.sort(function (a, b) {
            var groupExprA = groupingState.find(function (expr) { return expr.fieldName === a.fieldName; });
            var groupExprB = groupingState.find(function (expr) { return expr.fieldName === b.fieldName; });
            if (groupExprA && groupExprB) {
                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;
            }
            else if (groupExprA) {
                return -1;
            }
            else if (groupExprB) {
                return 1;
            }
            else {
                return 0;
            }
        });
    };
    IgxGridAPIService.prototype.remove_grouping_expression = function (id, fieldName) {
        var groupingExpressions = this.get(id).groupingExpressions;
        var index = groupingExpressions.findIndex(function (expr) { return expr.fieldName === fieldName; });
        if (index !== -1) {
            groupingExpressions.splice(index, 1);
        }
    };
    IgxGridAPIService = __decorate([
        core_1.Injectable()
    ], IgxGridAPIService);
    return IgxGridAPIService;
}());
exports.IgxGridAPIService = IgxGridAPIService;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var filtering_condition_1 = __webpack_require__(46);
var filtering_state_interface_1 = __webpack_require__(69);
var sorting_state_interface_1 = __webpack_require__(71);
var paging_state_interface_1 = __webpack_require__(72);
var DataType;
(function (DataType) {
    DataType["String"] = "string";
    DataType["Number"] = "number";
    DataType["Boolean"] = "boolean";
    DataType["Date"] = "date";
})(DataType = exports.DataType || (exports.DataType = {}));
var DataUtil = (function () {
    function DataUtil() {
    }
    DataUtil.mergeDefaultProperties = function (target, defaults) {
        if (!defaults) {
            return target;
        }
        if (!target) {
            target = Object.assign({}, defaults);
            return target;
        }
        Object
            .keys(defaults)
            .forEach(function (key) {
            if (target[key] === undefined && defaults[key] !== undefined) {
                target[key] = defaults[key];
            }
        });
        return target;
    };
    DataUtil.getFilteringConditionsForDataType = function (dataType) {
        return filtering_condition_1.FilteringCondition[dataType];
    };
    DataUtil.getListOfFilteringConditionsForDataType = function (dataType) {
        return Object.keys(DataUtil.getFilteringConditionsForDataType(dataType));
    };
    DataUtil.sort = function (data, state) {
        DataUtil.mergeDefaultProperties(state, sorting_state_interface_1.SortingStateDefaults);
        return state.strategy.sort(data, state.expressions);
    };
    DataUtil.group = function (data, state) {
        DataUtil.mergeDefaultProperties(state, sorting_state_interface_1.SortingStateDefaults);
        return state.strategy.groupBy(data, state.expressions);
    };
    DataUtil.restoreGroups = function (data, state) {
        DataUtil.mergeDefaultProperties(state, sorting_state_interface_1.SortingStateDefaults);
        if (state.expressions.length === 0) {
            return data;
        }
        return this.restoreGroupsRecursive(data, 1, state.expressions.length, state.expansion, state.defaultExpanded);
    };
    DataUtil.restoreGroupsRecursive = function (data, level, depth, expansion, defaultExpanded) {
        var i = 0;
        var j;
        var result = [];
        if (level !== depth) {
            data = this.restoreGroupsRecursive(data, level + 1, depth, expansion, defaultExpanded);
        }
        var _loop_1 = function () {
            var g = data[i]["__groupParent"];
            for (j = i + 1; j < data.length; j++) {
                var h = data[j]["__groupParent"];
                if (g !== h && g.level === h.level) {
                    break;
                }
            }
            var expandState = expansion.find(function (state) {
                return state.fieldName === g.expression.fieldName && state.value === g.value;
            });
            var expanded = expandState ? expandState.expanded : defaultExpanded;
            result.push(g);
            if (expanded) {
                result = result.concat(data.slice(i, j));
            }
            i = j;
        };
        while (i < data.length) {
            _loop_1();
        }
        return result;
    };
    DataUtil.page = function (data, state) {
        if (!state) {
            return data;
        }
        var len = data.length;
        var index = state.index;
        var res = [];
        var recordsPerPage = state.recordsPerPage;
        state.metadata = {
            countPages: 0,
            countRecords: data.length,
            error: paging_state_interface_1.PagingError.None
        };
        if (index < 0 || isNaN(index)) {
            state.metadata.error = paging_state_interface_1.PagingError.IncorrectPageIndex;
            return res;
        }
        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {
            state.metadata.error = paging_state_interface_1.PagingError.IncorrectRecordsPerPage;
            return res;
        }
        state.metadata.countPages = Math.ceil(len / recordsPerPage);
        if (!len) {
            return data;
        }
        if (index >= state.metadata.countPages) {
            state.metadata.error = paging_state_interface_1.PagingError.IncorrectPageIndex;
            return res;
        }
        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);
    };
    DataUtil.filter = function (data, state) {
        DataUtil.mergeDefaultProperties(state, filtering_state_interface_1.filteringStateDefaults);
        if (!state.strategy) {
            return data;
        }
        return state.strategy.filter(data, state.expressions, state.logic);
    };
    DataUtil.process = function (data, state) {
        if (!state) {
            return data;
        }
        if (state.filtering) {
            data = DataUtil.filter(data, state.filtering);
        }
        if (state.sorting) {
            data = DataUtil.sort(data, state.sorting);
        }
        if (state.paging) {
            data = DataUtil.page(data, state.paging);
        }
        return data;
    };
    return DataUtil;
}());
exports.DataUtil = DataUtil;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxRippleDirective = (function () {
    function IgxRippleDirective(elementRef, renderer, zone) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.zone = zone;
        this.rippleTarget = "";
        this.rippleDuration = 600;
        this.rippleDisabled = false;
        this.rippleElementClass = "igx-ripple__inner";
        this.rippleHostClass = "igx-ripple";
        this.animationFrames = [
            { opacity: 0.5, transform: "scale(.3)" },
            { opacity: 0, transform: "scale(2)" }
        ];
        this.animationOptions = {
            duration: this.rippleDuration,
            fill: "forwards"
        };
        this._centered = false;
        this.animationQueue = [];
    }
    Object.defineProperty(IgxRippleDirective.prototype, "centered", {
        set: function (value) {
            this._centered = value || this.centered;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRippleDirective.prototype, "nativeElement", {
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    IgxRippleDirective.prototype.onMouseDown = function (event) {
        var _this = this;
        this.zone.runOutsideAngular(function () { return _this._ripple(event); });
    };
    IgxRippleDirective.prototype.setStyles = function (rippleElement, styleParams) {
        this.renderer.addClass(rippleElement, this.rippleElementClass);
        this.renderer.setStyle(rippleElement, "width", styleParams.radius + "px");
        this.renderer.setStyle(rippleElement, "height", styleParams.radius + "px");
        this.renderer.setStyle(rippleElement, "top", styleParams.top + "px");
        this.renderer.setStyle(rippleElement, "left", styleParams.left + "px");
        if (this.rippleColor) {
            this.renderer.setStyle(rippleElement, "background", this.rippleColor);
        }
    };
    IgxRippleDirective.prototype._ripple = function (event) {
        var _this = this;
        if (this.rippleDisabled) {
            return;
        }
        event.stopPropagation();
        var target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);
        var rectBounds = target.getBoundingClientRect();
        var radius = Math.max(rectBounds.width, rectBounds.height);
        var left = event.clientX - rectBounds.left - radius / 2;
        var top = event.clientY - rectBounds.top - radius / 2;
        if (this._centered) {
            left = top = 0;
        }
        var dimensions = {
            radius: radius,
            top: top,
            left: left
        };
        var rippleElement = this.renderer.createElement("span");
        this.setStyles(rippleElement, dimensions);
        this.renderer.addClass(target, this.rippleHostClass);
        this.renderer.appendChild(target, rippleElement);
        var animation = rippleElement.animate(this.animationFrames, this.animationOptions);
        this.animationQueue.push(animation);
        animation.onfinish = function () {
            _this.animationQueue.splice(_this.animationQueue.indexOf(animation), 1);
            target.removeChild(rippleElement);
            if (_this.animationQueue.length < 1) {
                _this.renderer.removeClass(target, _this.rippleHostClass);
            }
        };
    };
    __decorate([
        core_1.Input("igxRippleTarget"),
        __metadata("design:type", Object)
    ], IgxRippleDirective.prototype, "rippleTarget", void 0);
    __decorate([
        core_1.Input("igxRipple"),
        __metadata("design:type", String)
    ], IgxRippleDirective.prototype, "rippleColor", void 0);
    __decorate([
        core_1.Input("igxRippleDuration"),
        __metadata("design:type", Object)
    ], IgxRippleDirective.prototype, "rippleDuration", void 0);
    __decorate([
        core_1.Input("igxRippleCentered"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxRippleDirective.prototype, "centered", null);
    __decorate([
        core_1.Input("igxRippleDisabled"),
        __metadata("design:type", Object)
    ], IgxRippleDirective.prototype, "rippleDisabled", void 0);
    __decorate([
        core_1.HostListener("mousedown", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxRippleDirective.prototype, "onMouseDown", null);
    IgxRippleDirective = __decorate([
        core_1.Directive({
            selector: "[igxRipple]"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef,
            core_1.Renderer2,
            core_1.NgZone])
    ], IgxRippleDirective);
    return IgxRippleDirective;
}());
exports.IgxRippleDirective = IgxRippleDirective;
var IgxRippleModule = (function () {
    function IgxRippleModule() {
    }
    IgxRippleModule = __decorate([
        core_1.NgModule({
            declarations: [IgxRippleDirective],
            exports: [IgxRippleDirective]
        })
    ], IgxRippleModule);
    return IgxRippleModule;
}());
exports.IgxRippleModule = IgxRippleModule;


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EMPTY; });
/* harmony export (immutable) */ __webpack_exports__["b"] = empty;
/* unused harmony export emptyScheduled */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

/**
 * The same Observable instance returned by any call to {@link empty} without a
 * {@link Scheduler}. It is preferrable to use this over `empty()`.
 */
var EMPTY = /*@__PURE__*/ new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) { return subscriber.complete(); });
/**
 * Creates an Observable that emits no items to the Observer and immediately
 * emits a complete notification.
 *
 * <span class="informal">Just emits 'complete', and nothing else.
 * </span>
 *
 * <img src="./img/empty.png" width="100%">
 *
 * This static operator is useful for creating a simple Observable that only
 * emits the complete notification. It can be used for composing with other
 * Observables, such as in a {@link mergeMap}.
 *
 * @example <caption>Emit the number 7, then complete.</caption>
 * var result = Rx.Observable.empty().startWith(7);
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
 * var interval = Rx.Observable.interval(1000);
 * var result = interval.mergeMap(x =>
 *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following to the console:
 * // x is equal to the count on the interval eg(0,1,2,3,...)
 * // x will occur every 1000ms
 * // if x % 2 is equal to 1 print abc
 * // if x % 2 is not equal to 1 nothing will be output
 *
 * @see {@link create}
 * @see {@link never}
 * @see {@link of}
 * @see {@link throw}
 *
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emission of the complete notification.
 * @return {Observable} An "empty" Observable: emits only the complete
 * notification.
 * @static true
 * @name empty
 * @owner Observable
 * @deprecated Deprecated in favor of using EMPTY constant.
 */
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
//# sourceMappingURL=empty.js.map


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var rxjs_1 = __webpack_require__(18);
var operators_1 = __webpack_require__(36);
var IgxColumnResizerDirective = (function () {
    function IgxColumnResizerDirective(element, document, zone) {
        var _this = this;
        this.element = element;
        this.document = document;
        this.zone = zone;
        this.restrictHResizeMin = Number.MIN_SAFE_INTEGER;
        this.restrictHResizeMax = Number.MAX_SAFE_INTEGER;
        this.resizeEndTimeout = 0;
        this.resizeEnd = new rxjs_1.Subject();
        this.resizeStart = new rxjs_1.Subject();
        this.resize = new rxjs_1.Subject();
        this._destroy = new rxjs_1.Subject();
        this.resizeStart.pipe(operators_1.map(function (event) { return event.clientX; }), operators_1.takeUntil(this._destroy), operators_1.switchMap(function (offset) { return _this.resize.pipe(operators_1.map(function (event) { return event.clientX - offset; }), operators_1.takeUntil(_this.resizeEnd)); })).subscribe(function (pos) {
            var left = _this._left + pos;
            _this.left = left < _this.restrictHResizeMin ? _this.restrictHResizeMin + "px" : left + "px";
            if (left > _this.restrictHResizeMax) {
                _this.left = _this.restrictHResizeMax + "px";
            }
            else if (left > _this.restrictHResizeMin) {
                _this.left = left + "px";
            }
        });
    }
    IgxColumnResizerDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            rxjs_1.fromEvent(_this.document.defaultView, "mousedown").pipe(operators_1.takeUntil(_this._destroy))
                .subscribe(function (res) { return _this.onMousedown(res); });
            rxjs_1.fromEvent(_this.document.defaultView, "mousemove").pipe(operators_1.takeUntil(_this._destroy), operators_1.throttle(function () { return rxjs_1.interval(0, rxjs_1.animationFrameScheduler); })).subscribe(function (res) { return _this.onMousemove(res); });
            rxjs_1.fromEvent(_this.document.defaultView, "mouseup").pipe(operators_1.takeUntil(_this._destroy))
                .subscribe(function (res) { return _this.onMouseup(res); });
        });
    };
    IgxColumnResizerDirective.prototype.ngOnDestroy = function () {
        this._destroy.next(true);
        this._destroy.unsubscribe();
    };
    Object.defineProperty(IgxColumnResizerDirective.prototype, "left", {
        set: function (val) {
            var _this = this;
            requestAnimationFrame(function () { return _this.element.nativeElement.style.left = val; });
        },
        enumerable: true,
        configurable: true
    });
    IgxColumnResizerDirective.prototype.onMouseup = function (event) {
        var _this = this;
        setTimeout(function () {
            _this.resizeEnd.next(event);
            _this.resizeEnd.complete();
        }, this.resizeEndTimeout);
    };
    IgxColumnResizerDirective.prototype.onMousedown = function (event) {
        this.resizeStart.next(event);
        event.preventDefault();
        var elStyle = this.document.defaultView.getComputedStyle(this.element.nativeElement);
        this._left = Number.isNaN(parseInt(elStyle.left, 10)) ? 0 : parseInt(elStyle.left, 10);
    };
    IgxColumnResizerDirective.prototype.onMousemove = function (event) {
        this.resize.next(event);
        event.preventDefault();
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxColumnResizerDirective.prototype, "restrictHResizeMin", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxColumnResizerDirective.prototype, "restrictHResizeMax", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnResizerDirective.prototype, "resizeEndTimeout", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxColumnResizerDirective.prototype, "resizeEnd", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxColumnResizerDirective.prototype, "resizeStart", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxColumnResizerDirective.prototype, "resize", void 0);
    IgxColumnResizerDirective = __decorate([
        core_1.Directive({
            selector: "[igxResizer]"
        }),
        __param(1, core_1.Inject(common_1.DOCUMENT)),
        __metadata("design:paramtypes", [core_1.ElementRef, Object, core_1.NgZone])
    ], IgxColumnResizerDirective);
    return IgxColumnResizerDirective;
}());
exports.IgxColumnResizerDirective = IgxColumnResizerDirective;
var IgxCellTemplateDirective = (function () {
    function IgxCellTemplateDirective(template) {
        this.template = template;
    }
    IgxCellTemplateDirective = __decorate([
        core_1.Directive({
            selector: "[igxCell]"
        }),
        __metadata("design:paramtypes", [core_1.TemplateRef])
    ], IgxCellTemplateDirective);
    return IgxCellTemplateDirective;
}());
exports.IgxCellTemplateDirective = IgxCellTemplateDirective;
var IgxCellHeaderTemplateDirective = (function () {
    function IgxCellHeaderTemplateDirective(template) {
        this.template = template;
    }
    IgxCellHeaderTemplateDirective = __decorate([
        core_1.Directive({
            selector: "[igxHeader]"
        }),
        __metadata("design:paramtypes", [core_1.TemplateRef])
    ], IgxCellHeaderTemplateDirective);
    return IgxCellHeaderTemplateDirective;
}());
exports.IgxCellHeaderTemplateDirective = IgxCellHeaderTemplateDirective;
var IgxGroupByRowTemplateDirective = (function () {
    function IgxGroupByRowTemplateDirective(template) {
        this.template = template;
    }
    IgxGroupByRowTemplateDirective = __decorate([
        core_1.Directive({
            selector: "[igxGroupByRow]"
        }),
        __metadata("design:paramtypes", [core_1.TemplateRef])
    ], IgxGroupByRowTemplateDirective);
    return IgxGroupByRowTemplateDirective;
}());
exports.IgxGroupByRowTemplateDirective = IgxGroupByRowTemplateDirective;
var IgxCellFooterTemplateDirective = (function () {
    function IgxCellFooterTemplateDirective(template) {
        this.template = template;
    }
    IgxCellFooterTemplateDirective = __decorate([
        core_1.Directive({
            selector: "[igxFooter]"
        }),
        __metadata("design:paramtypes", [core_1.TemplateRef])
    ], IgxCellFooterTemplateDirective);
    return IgxCellFooterTemplateDirective;
}());
exports.IgxCellFooterTemplateDirective = IgxCellFooterTemplateDirective;
var IgxCellEditorTemplateDirective = (function () {
    function IgxCellEditorTemplateDirective(template) {
        this.template = template;
    }
    IgxCellEditorTemplateDirective = __decorate([
        core_1.Directive({
            selector: "[igxCellEditor]"
        }),
        __metadata("design:paramtypes", [core_1.TemplateRef])
    ], IgxCellEditorTemplateDirective);
    return IgxCellEditorTemplateDirective;
}());
exports.IgxCellEditorTemplateDirective = IgxCellEditorTemplateDirective;
function autoWire(markForCheck) {
    if (markForCheck === void 0) { markForCheck = false; }
    return function decorator(target, name, descriptor) {
        var old = descriptor.value || descriptor.set;
        var wrapped = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var result = old.apply(this, args);
            if (markForCheck) {
                this.cdr.markForCheck();
            }
            this.gridAPI.notify(this.gridID);
            return result;
        };
        if (descriptor.set) {
            descriptor.set = wrapped;
        }
        else if (descriptor.value) {
            descriptor.value = wrapped;
        }
        else {
            throw Error("Can bind only to setter properties and methods");
        }
        return descriptor;
    };
}
exports.autoWire = autoWire;


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isScheduler;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
//# sourceMappingURL=isScheduler.js.map


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var EaseIn;
(function (EaseIn) {
    EaseIn[EaseIn["quad"] = "cubic-bezier(0.550, 0.085, 0.680, 0.530)"] = "quad";
    EaseIn[EaseIn["cubic"] = "cubic-bezier(0.550, 0.055, 0.675, 0.190)"] = "cubic";
    EaseIn[EaseIn["quart"] = "cubic-bezier(0.895, 0.030, 0.685, 0.220)"] = "quart";
    EaseIn[EaseIn["quint"] = "cubic-bezier(0.755, 0.050, 0.855, 0.060)"] = "quint";
    EaseIn[EaseIn["sine"] = "cubic-bezier(0.470, 0.000, 0.745, 0.715)"] = "sine";
    EaseIn[EaseIn["expo"] = "cubic-bezier(0.950, 0.050, 0.795, 0.035)"] = "expo";
    EaseIn[EaseIn["circ"] = "cubic-bezier(0.600, 0.040, 0.980, 0.335)"] = "circ";
    EaseIn[EaseIn["back"] = "cubic-bezier(0.600, -0.280, 0.735, 0.045)"] = "back";
})(EaseIn || (EaseIn = {}));
exports.EaseIn = EaseIn;
var EaseOut;
(function (EaseOut) {
    EaseOut[EaseOut["quad"] = "cubic-bezier(0.250, 0.460, 0.450, 0.940)"] = "quad";
    EaseOut[EaseOut["cubic"] = "cubic-bezier(0.215, 0.610, 0.355, 1.000)"] = "cubic";
    EaseOut[EaseOut["quart"] = "cubic-bezier(0.165, 0.840, 0.440, 1.000)"] = "quart";
    EaseOut[EaseOut["quint"] = "cubic-bezier(0.230, 1.000, 0.320, 1.000)"] = "quint";
    EaseOut[EaseOut["sine"] = "cubic-bezier(0.390, 0.575, 0.565, 1.000)"] = "sine";
    EaseOut[EaseOut["expo"] = "cubic-bezier(0.190, 1.000, 0.220, 1.000)"] = "expo";
    EaseOut[EaseOut["circ"] = "cubic-bezier(0.075, 0.820, 0.165, 1.000)"] = "circ";
    EaseOut[EaseOut["back"] = "cubic-bezier(0.175, 0.885, 0.320, 1.275)"] = "back";
})(EaseOut || (EaseOut = {}));
exports.EaseOut = EaseOut;
var EaseInOut;
(function (EaseInOut) {
    EaseInOut[EaseInOut["quad"] = "cubic-bezier(0.455, 0.030, 0.515, 0.955)"] = "quad";
    EaseInOut[EaseInOut["cubic"] = "cubic-bezier(0.645, 0.045, 0.355, 1.000)"] = "cubic";
    EaseInOut[EaseInOut["quart"] = "cubic-bezier(0.770, 0.000, 0.175, 1.000)"] = "quart";
    EaseInOut[EaseInOut["quint"] = "cubic-bezier(0.860, 0.000, 0.070, 1.000)"] = "quint";
    EaseInOut[EaseInOut["sine"] = "cubic-bezier(0.445, 0.050, 0.550, 0.950)"] = "sine";
    EaseInOut[EaseInOut["expo"] = "cubic-bezier(1.000, 0.000, 0.000, 1.000)"] = "expo";
    EaseInOut[EaseInOut["circ"] = "cubic-bezier(0.785, 0.135, 0.150, 0.860)"] = "circ";
    EaseInOut[EaseInOut["back"] = "cubic-bezier(0.680, -0.550, 0.265, 1.550)"] = "back";
})(EaseInOut || (EaseInOut = {}));
exports.EaseInOut = EaseInOut;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxButtonDirective = (function () {
    function IgxButtonDirective(_el, _renderer) {
        this._el = _el;
        this._renderer = _renderer;
        this._type = "flat";
        this._cssClass = "igx-button";
        this.role = "button";
    }
    Object.defineProperty(IgxButtonDirective.prototype, "type", {
        set: function (value) {
            this._type = value || this._type;
            this._renderer.addClass(this._el.nativeElement, this._cssClass + "--" + this._type);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "color", {
        set: function (value) {
            this._color = value || this._el.nativeElement.style.color;
            this._renderer.setStyle(this._el.nativeElement, "color", this._color);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "background", {
        set: function (value) {
            this._backgroundColor = value || this._backgroundColor;
            this._renderer.setStyle(this._el.nativeElement, "background", this._backgroundColor);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "label", {
        set: function (value) {
            this._label = value || this._label;
            this._renderer.setAttribute(this._el.nativeElement, "aria-label", this._label);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonDirective.prototype, "disabled", {
        set: function (val) {
            val = !!val;
            if (val) {
                this._renderer.addClass(this._el.nativeElement, this._cssClass + "--disabled");
            }
            else {
                this._renderer.removeClass(this._el.nativeElement, this._cssClass + "--disabled");
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxButtonDirective.prototype, "role", void 0);
    __decorate([
        core_1.Input("igxButton"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], IgxButtonDirective.prototype, "type", null);
    __decorate([
        core_1.Input("igxButtonColor"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], IgxButtonDirective.prototype, "color", null);
    __decorate([
        core_1.Input("igxButtonBackground"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], IgxButtonDirective.prototype, "background", null);
    __decorate([
        core_1.Input("igxLabel"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], IgxButtonDirective.prototype, "label", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxButtonDirective.prototype, "disabled", null);
    IgxButtonDirective = __decorate([
        core_1.Directive({
            selector: "[igxButton]"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer2])
    ], IgxButtonDirective);
    return IgxButtonDirective;
}());
exports.IgxButtonDirective = IgxButtonDirective;
var IgxButtonModule = (function () {
    function IgxButtonModule() {
    }
    IgxButtonModule = __decorate([
        core_1.NgModule({
            declarations: [IgxButtonDirective],
            exports: [IgxButtonDirective]
        })
    ], IgxButtonModule);
    return IgxButtonModule;
}());
exports.IgxButtonModule = IgxButtonModule;


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_Observable__ = __webpack_require__(2);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Observable", function() { return __WEBPACK_IMPORTED_MODULE_0__internal_Observable__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_observable_ConnectableObservable__ = __webpack_require__(159);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectableObservable", function() { return __WEBPACK_IMPORTED_MODULE_1__internal_observable_ConnectableObservable__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_operators_groupBy__ = __webpack_require__(161);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "GroupedObservable", function() { return __WEBPACK_IMPORTED_MODULE_2__internal_operators_groupBy__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_symbol_observable__ = __webpack_require__(19);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "observable", function() { return __WEBPACK_IMPORTED_MODULE_3__internal_symbol_observable__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_Subject__ = __webpack_require__(20);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Subject", function() { return __WEBPACK_IMPORTED_MODULE_4__internal_Subject__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__internal_BehaviorSubject__ = __webpack_require__(162);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "BehaviorSubject", function() { return __WEBPACK_IMPORTED_MODULE_5__internal_BehaviorSubject__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__internal_ReplaySubject__ = __webpack_require__(163);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ReplaySubject", function() { return __WEBPACK_IMPORTED_MODULE_6__internal_ReplaySubject__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__internal_AsyncSubject__ = __webpack_require__(58);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncSubject", function() { return __WEBPACK_IMPORTED_MODULE_7__internal_AsyncSubject__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__internal_scheduler_asap__ = __webpack_require__(169);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "asapScheduler", function() { return __WEBPACK_IMPORTED_MODULE_8__internal_scheduler_asap__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__internal_scheduler_async__ = __webpack_require__(59);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "asyncScheduler", function() { return __WEBPACK_IMPORTED_MODULE_9__internal_scheduler_async__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__internal_scheduler_queue__ = __webpack_require__(88);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "queueScheduler", function() { return __WEBPACK_IMPORTED_MODULE_10__internal_scheduler_queue__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__internal_scheduler_animationFrame__ = __webpack_require__(173);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "animationFrameScheduler", function() { return __WEBPACK_IMPORTED_MODULE_11__internal_scheduler_animationFrame__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__internal_scheduler_VirtualTimeScheduler__ = __webpack_require__(176);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualTimeScheduler", function() { return __WEBPACK_IMPORTED_MODULE_12__internal_scheduler_VirtualTimeScheduler__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualAction", function() { return __WEBPACK_IMPORTED_MODULE_12__internal_scheduler_VirtualTimeScheduler__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__internal_Scheduler__ = __webpack_require__(89);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Scheduler", function() { return __WEBPACK_IMPORTED_MODULE_13__internal_Scheduler__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__internal_Subscription__ = __webpack_require__(4);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Subscription", function() { return __WEBPACK_IMPORTED_MODULE_14__internal_Subscription__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__internal_Subscriber__ = __webpack_require__(8);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Subscriber", function() { return __WEBPACK_IMPORTED_MODULE_15__internal_Subscriber__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__internal_Notification__ = __webpack_require__(90);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Notification", function() { return __WEBPACK_IMPORTED_MODULE_16__internal_Notification__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__internal_util_pipe__ = __webpack_require__(86);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "pipe", function() { return __WEBPACK_IMPORTED_MODULE_17__internal_util_pipe__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__internal_util_noop__ = __webpack_require__(56);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return __WEBPACK_IMPORTED_MODULE_18__internal_util_noop__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__internal_util_identity__ = __webpack_require__(60);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return __WEBPACK_IMPORTED_MODULE_19__internal_util_identity__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__internal_util_isObservable__ = __webpack_require__(177);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isObservable", function() { return __WEBPACK_IMPORTED_MODULE_20__internal_util_isObservable__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__internal_util_ArgumentOutOfRangeError__ = __webpack_require__(178);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ArgumentOutOfRangeError", function() { return __WEBPACK_IMPORTED_MODULE_21__internal_util_ArgumentOutOfRangeError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__internal_util_EmptyError__ = __webpack_require__(179);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "EmptyError", function() { return __WEBPACK_IMPORTED_MODULE_22__internal_util_EmptyError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__internal_util_ObjectUnsubscribedError__ = __webpack_require__(45);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectUnsubscribedError", function() { return __WEBPACK_IMPORTED_MODULE_23__internal_util_ObjectUnsubscribedError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__internal_util_UnsubscriptionError__ = __webpack_require__(85);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "UnsubscriptionError", function() { return __WEBPACK_IMPORTED_MODULE_24__internal_util_UnsubscriptionError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__internal_util_TimeoutError__ = __webpack_require__(180);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TimeoutError", function() { return __WEBPACK_IMPORTED_MODULE_25__internal_util_TimeoutError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__internal_observable_bindCallback__ = __webpack_require__(181);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "bindCallback", function() { return __WEBPACK_IMPORTED_MODULE_26__internal_observable_bindCallback__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__internal_observable_bindNodeCallback__ = __webpack_require__(182);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "bindNodeCallback", function() { return __WEBPACK_IMPORTED_MODULE_27__internal_observable_bindNodeCallback__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__internal_observable_combineLatest__ = __webpack_require__(183);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "combineLatest", function() { return __WEBPACK_IMPORTED_MODULE_28__internal_observable_combineLatest__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__internal_observable_concat__ = __webpack_require__(185);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return __WEBPACK_IMPORTED_MODULE_29__internal_observable_concat__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__internal_observable_defer__ = __webpack_require__(100);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "defer", function() { return __WEBPACK_IMPORTED_MODULE_30__internal_observable_defer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__internal_observable_empty__ = __webpack_require__(13);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return __WEBPACK_IMPORTED_MODULE_31__internal_observable_empty__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__internal_observable_forkJoin__ = __webpack_require__(193);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "forkJoin", function() { return __WEBPACK_IMPORTED_MODULE_32__internal_observable_forkJoin__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__internal_observable_from__ = __webpack_require__(23);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "from", function() { return __WEBPACK_IMPORTED_MODULE_33__internal_observable_from__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__internal_observable_fromEvent__ = __webpack_require__(194);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "fromEvent", function() { return __WEBPACK_IMPORTED_MODULE_34__internal_observable_fromEvent__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__internal_observable_fromEventPattern__ = __webpack_require__(195);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "fromEventPattern", function() { return __WEBPACK_IMPORTED_MODULE_35__internal_observable_fromEventPattern__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__internal_observable_generate__ = __webpack_require__(196);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "generate", function() { return __WEBPACK_IMPORTED_MODULE_36__internal_observable_generate__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__internal_observable_iif__ = __webpack_require__(197);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "iif", function() { return __WEBPACK_IMPORTED_MODULE_37__internal_observable_iif__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__internal_observable_interval__ = __webpack_require__(198);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "interval", function() { return __WEBPACK_IMPORTED_MODULE_38__internal_observable_interval__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__internal_observable_merge__ = __webpack_require__(199);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return __WEBPACK_IMPORTED_MODULE_39__internal_observable_merge__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__internal_observable_never__ = __webpack_require__(102);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "never", function() { return __WEBPACK_IMPORTED_MODULE_40__internal_observable_never__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__internal_observable_of__ = __webpack_require__(57);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "of", function() { return __WEBPACK_IMPORTED_MODULE_41__internal_observable_of__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__internal_observable_onErrorResumeNext__ = __webpack_require__(200);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function() { return __WEBPACK_IMPORTED_MODULE_42__internal_observable_onErrorResumeNext__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__internal_observable_pairs__ = __webpack_require__(201);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "pairs", function() { return __WEBPACK_IMPORTED_MODULE_43__internal_observable_pairs__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__internal_observable_race__ = __webpack_require__(202);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "race", function() { return __WEBPACK_IMPORTED_MODULE_44__internal_observable_race__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__internal_observable_range__ = __webpack_require__(203);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "range", function() { return __WEBPACK_IMPORTED_MODULE_45__internal_observable_range__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__internal_observable_throwError__ = __webpack_require__(92);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "throwError", function() { return __WEBPACK_IMPORTED_MODULE_46__internal_observable_throwError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__internal_observable_timer__ = __webpack_require__(204);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "timer", function() { return __WEBPACK_IMPORTED_MODULE_47__internal_observable_timer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__internal_observable_using__ = __webpack_require__(205);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "using", function() { return __WEBPACK_IMPORTED_MODULE_48__internal_observable_using__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__internal_observable_zip__ = __webpack_require__(206);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function() { return __WEBPACK_IMPORTED_MODULE_49__internal_observable_zip__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY", function() { return __WEBPACK_IMPORTED_MODULE_31__internal_observable_empty__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "NEVER", function() { return __WEBPACK_IMPORTED_MODULE_40__internal_observable_never__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__internal_config__ = __webpack_require__(44);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "config", function() { return __WEBPACK_IMPORTED_MODULE_50__internal_config__["a"]; });
/* Observable */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */




/* Subjects */




/* Schedulers */






/* Subscription */


/* Notification */

/* Utils */




/* Error types */





/* Static observable creation exports */
























/* Constants */


/* Config */

//# sourceMappingURL=index.js.map


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return observable; });
/** Symbol.observable or a string "@@observable". Used for interop */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';
//# sourceMappingURL=observable.js.map


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SubjectSubscriber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Subject; });
/* unused harmony export AnonymousSubject */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Subscriber__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Subscription__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_ObjectUnsubscribedError__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__SubjectSubscription__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__internal_symbol_rxSubscriber__ = __webpack_require__(55);
/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */







/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    }
    return SubjectSubscriber;
}(__WEBPACK_IMPORTED_MODULE_2__Subscriber__["a" /* Subscriber */]));

/**
 * @class Subject<T>
 */
var Subject = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype[__WEBPACK_IMPORTED_MODULE_6__internal_symbol_rxSubscriber__["a" /* rxSubscriber */]] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_4__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_4__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_4__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_4__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_4__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return __WEBPACK_IMPORTED_MODULE_3__Subscription__["a" /* Subscription */].EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return __WEBPACK_IMPORTED_MODULE_3__Subscription__["a" /* Subscription */].EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new __WEBPACK_IMPORTED_MODULE_5__SubjectSubscription__["a" /* SubjectSubscription */](this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new __WEBPACK_IMPORTED_MODULE_1__Observable__["a" /* Observable */]();
        observable.source = this;
        return observable;
    };
    /**@nocollapse */
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(__WEBPACK_IMPORTED_MODULE_1__Observable__["a" /* Observable */]));

/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return __WEBPACK_IMPORTED_MODULE_3__Subscription__["a" /* Subscription */].EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));

//# sourceMappingURL=Subject.js.map


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToArray__ = __webpack_require__(91);
/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */



function fromArray(input, scheduler) {
    if (!scheduler) {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToArray__["a" /* subscribeToArray */])(input));
    }
    else {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var sub = new __WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]();
            var i = 0;
            sub.add(scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                    return;
                }
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    sub.add(this.schedule());
                }
            }));
            return sub;
        });
    }
}
//# sourceMappingURL=fromArray.js.map


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = map;
/* unused harmony export MapOperator */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(8);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
var MapOperator = /*@__PURE__*/ (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    // NOTE: This looks unoptimized, but it's actually purposefully NOT
    // using try/catch optimizations.
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=map.js.map


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = from;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isPromise__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isArrayLike__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_isInteropObservable__ = __webpack_require__(186);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_isIterable__ = __webpack_require__(187);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__fromArray__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__fromPromise__ = __webpack_require__(188);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__fromIterable__ = __webpack_require__(189);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__fromObservable__ = __webpack_require__(190);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__util_subscribeTo__ = __webpack_require__(93);
/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */










function from(input, scheduler) {
    if (!scheduler) {
        if (input instanceof __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */]) {
            return input;
        }
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](Object(__WEBPACK_IMPORTED_MODULE_9__util_subscribeTo__["a" /* subscribeTo */])(input));
    }
    if (input != null) {
        if (Object(__WEBPACK_IMPORTED_MODULE_3__util_isInteropObservable__["a" /* isInteropObservable */])(input)) {
            return Object(__WEBPACK_IMPORTED_MODULE_8__fromObservable__["a" /* fromObservable */])(input, scheduler);
        }
        else if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isPromise__["a" /* isPromise */])(input)) {
            return Object(__WEBPACK_IMPORTED_MODULE_6__fromPromise__["a" /* fromPromise */])(input, scheduler);
        }
        else if (Object(__WEBPACK_IMPORTED_MODULE_2__util_isArrayLike__["a" /* isArrayLike */])(input)) {
            return Object(__WEBPACK_IMPORTED_MODULE_5__fromArray__["a" /* fromArray */])(input, scheduler);
        }
        else if (Object(__WEBPACK_IMPORTED_MODULE_4__util_isIterable__["a" /* isIterable */])(input) || typeof input === 'string') {
            return Object(__WEBPACK_IMPORTED_MODULE_7__fromIterable__["a" /* fromIterable */])(input, scheduler);
        }
    }
    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}
//# sourceMappingURL=from.js.map


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ExportUtilities = (function () {
    function ExportUtilities() {
    }
    ExportUtilities.getKeysFromData = function (data) {
        var length = data.length;
        if (length === 0) {
            return [];
        }
        var dataEntry = data[0];
        var dataEntryMiddle = data[Math.floor(length / 2)];
        var dataEntryLast = data[length - 1];
        var keys1 = Object.keys(dataEntry);
        var keys2 = Object.keys(dataEntryMiddle);
        var keys3 = Object.keys(dataEntryLast);
        var keys = new Set(keys1.concat(keys2).concat(keys3));
        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : ["Column 1"];
    };
    ExportUtilities.saveBlobToFile = function (blob, fileName) {
        var a = document.createElement("a");
        if (window.navigator && window.navigator.msSaveOrOpenBlob) {
            window.navigator.msSaveOrOpenBlob(blob, fileName);
        }
        else {
            var url = window.URL.createObjectURL(blob);
            a.download = fileName;
            a.href = url;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }
    };
    ExportUtilities.stringToArrayBuffer = function (s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i = 0; i !== s.length; ++i) {
            view[i] = s.charCodeAt(i) & 0xFF;
        }
        return buf;
    };
    ExportUtilities.isSpecialData = function (data) {
        var dataEntry = data[0];
        return (typeof dataEntry === "string" ||
            typeof dataEntry === "number" ||
            dataEntry instanceof Date);
    };
    ExportUtilities.hasValue = function (value) {
        return value !== undefined && value !== null;
    };
    return ExportUtilities;
}());
exports.ExportUtilities = ExportUtilities;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(68));
__export(__webpack_require__(113));


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SortingDirection;
(function (SortingDirection) {
    SortingDirection[SortingDirection["None"] = 0] = "None";
    SortingDirection[SortingDirection["Asc"] = 1] = "Asc";
    SortingDirection[SortingDirection["Desc"] = 2] = "Desc";
})(SortingDirection = exports.SortingDirection || (exports.SortingDirection = {}));


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function cloneArray(array, deep) {
    var arr = [];
    if (!array) {
        return arr;
    }
    var i = array.length;
    while (i--) {
        arr[i] = deep ? cloneObject(array[i]) : array[i];
    }
    return arr;
}
exports.cloneArray = cloneArray;
function cloneObject(object) {
    return JSON.parse(JSON.stringify(object));
}
exports.cloneObject = cloneObject;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IgxSelectionAPIService = (function () {
    function IgxSelectionAPIService() {
        this.selection = new Map();
        this.filteredSelection = new Map();
        this.prevSelection = new Map();
    }
    IgxSelectionAPIService.prototype.get_selection = function (componentID) {
        return this.selection.get(componentID);
    };
    IgxSelectionAPIService.prototype.get_prev_selection = function (componentID) {
        return this.prevSelection.get(componentID);
    };
    IgxSelectionAPIService.prototype.set_prev_selection = function (componentID, currSelection) {
        this.prevSelection.set(componentID, currSelection);
    };
    IgxSelectionAPIService.prototype.set_selection = function (componentID, currSelection) {
        var sel = this.get_selection(componentID);
        if (sel && sel.length > 0) {
            this.set_prev_selection(componentID, sel);
        }
        this.selection.set(componentID, currSelection);
    };
    IgxSelectionAPIService.prototype.get_selection_length = function (componentID) {
        return (this.get_selection(componentID) || []).length;
    };
    IgxSelectionAPIService.prototype.select_item = function (componentID, itemID, currSelection) {
        if (!currSelection) {
            currSelection = this.get_selection(componentID);
        }
        if (currSelection === undefined) {
            currSelection = [];
        }
        currSelection = currSelection.slice();
        if (currSelection.indexOf(itemID) === -1) {
            currSelection.push(itemID);
        }
        return currSelection;
    };
    IgxSelectionAPIService.prototype.select_items = function (componentID, itemIDs) {
        var _this = this;
        var selection;
        itemIDs.forEach(function (item) { return selection = _this.select_item(componentID, item, selection); });
        return selection;
    };
    IgxSelectionAPIService.prototype.append_items = function (componentID, itemIDs) {
        var selection = this.get_selection(componentID);
        if (selection === undefined) {
            selection = [];
        }
        return selection.concat(itemIDs);
    };
    IgxSelectionAPIService.prototype.deselect_item = function (componentID, itemID, currSelection) {
        if (!currSelection) {
            currSelection = this.get_selection(componentID);
        }
        if (currSelection === undefined) {
            return;
        }
        return currSelection.filter(function (item) { return item !== itemID; });
    };
    IgxSelectionAPIService.prototype.deselect_items = function (componentID, itemIDs) {
        var _this = this;
        var selection;
        itemIDs.forEach(function (deselectedItem) { return selection = _this.deselect_item(componentID, deselectedItem, selection); });
        return selection;
    };
    IgxSelectionAPIService.prototype.subtract_items = function (componentID, itemIDs) {
        var selection = this.get_selection(componentID);
        return selection.filter(function (selectedItemID) { return itemIDs.indexOf(selectedItemID) === -1; });
    };
    IgxSelectionAPIService.prototype.is_item_selected = function (componentID, itemID) {
        var selection = this.get_selection(componentID);
        if (selection && selection.indexOf(itemID) !== -1) {
            return true;
        }
        else {
            return false;
        }
    };
    IgxSelectionAPIService.prototype.get_all_ids = function (data, primaryKey) {
        return primaryKey ? data.map(function (x) { return x[primaryKey]; }) : data;
    };
    IgxSelectionAPIService.prototype.are_all_selected = function (componentID, data) {
        return this.get_selection_length(componentID) === data.length;
    };
    IgxSelectionAPIService.prototype.are_none_selected = function (componentID) {
        return this.get_selection_length(componentID) === 0;
    };
    return IgxSelectionAPIService;
}());
exports.IgxSelectionAPIService = IgxSelectionAPIService;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxTextHighlightDirective = (function () {
    function IgxTextHighlightDirective(element, renderer) {
        var _this = this;
        this.renderer = renderer;
        this._addedElements = [];
        this._nodeWasRemoved = false;
        this._forceEvaluation = false;
        this._activeElementIndex = -1;
        this.groupName = "";
        this.value = "";
        this.parentElement = this.renderer.parentNode(element.nativeElement);
        var callback = function (mutationList) {
            mutationList.forEach(function (mutation) {
                mutation.removedNodes.forEach(function (n) {
                    if (n === _this.container) {
                        _this._nodeWasRemoved = true;
                        _this.clearChildElements(false);
                    }
                });
                mutation.addedNodes.forEach(function (n) {
                    if (n === _this.parentElement.firstElementChild && _this._nodeWasRemoved) {
                        _this.container = _this.parentElement.firstElementChild;
                        _this._nodeWasRemoved = false;
                        _this._forceEvaluation = true;
                        _this.highlight(_this._lastSearchInfo.searchedText, _this._lastSearchInfo.caseSensitive);
                        _this._forceEvaluation = false;
                        _this.activateIfNecessary();
                    }
                });
            });
        };
        this._observer = new MutationObserver(callback);
        this._observer.observe(this.parentElement, { childList: true });
        IgxTextHighlightDirective_1.onActiveElementChanged.subscribe(function (groupName) {
            if (_this.groupName === groupName) {
                if (_this._activeElementIndex !== -1) {
                    _this.deactivate();
                }
                _this.activateIfNecessary();
            }
        });
    }
    IgxTextHighlightDirective_1 = IgxTextHighlightDirective;
    IgxTextHighlightDirective.setActiveHighlight = function (groupName, column, row, index, page) {
        var group = IgxTextHighlightDirective_1.highlightGroupsMap.get(groupName);
        group.columnIndex = column;
        group.rowIndex = row;
        group.index = index;
        group.page = page;
        IgxTextHighlightDirective_1.onActiveElementChanged.emit(groupName);
    };
    IgxTextHighlightDirective.prototype.ngOnDestroy = function () {
        this._observer.disconnect();
    };
    IgxTextHighlightDirective.prototype.ngOnChanges = function (changes) {
        if (changes.value && !changes.value.firstChange) {
            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive);
            this.activateIfNecessary();
        }
        if ((changes.row !== undefined && !changes.row.firstChange) ||
            (changes.column !== undefined && !changes.column.firstChange) ||
            (changes.page !== undefined && !changes.page.firstChange)) {
            if (this._activeElementIndex !== -1) {
                this.deactivate();
            }
            this.activateIfNecessary();
        }
    };
    IgxTextHighlightDirective.prototype.ngAfterViewInit = function () {
        if (IgxTextHighlightDirective_1.highlightGroupsMap.has(this.groupName) === false) {
            IgxTextHighlightDirective_1.highlightGroupsMap.set(this.groupName, {
                rowIndex: -1,
                columnIndex: -1,
                page: -1,
                index: -1
            });
        }
        this._lastSearchInfo = {
            searchedText: "",
            content: this.value,
            matchCount: 0,
            caseSensitive: false
        };
        this.container = this.parentElement.firstElementChild;
    };
    IgxTextHighlightDirective.prototype.highlight = function (text, caseSensitive) {
        var caseSensitiveResolved = caseSensitive ? true : false;
        if (this.searchNeedsEvaluation(text, caseSensitiveResolved)) {
            this._lastSearchInfo.searchedText = text;
            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;
            this._lastSearchInfo.content = this.value;
            if (text === "" || text === undefined || text === null) {
                this.clearHighlight();
            }
            else {
                this.clearChildElements(true);
                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive);
            }
        }
        return this._lastSearchInfo.matchCount;
    };
    IgxTextHighlightDirective.prototype.clearHighlight = function () {
        this.clearChildElements(false);
        this._lastSearchInfo.searchedText = "";
        this._lastSearchInfo.matchCount = 0;
    };
    IgxTextHighlightDirective.prototype.activateIfNecessary = function () {
        var group = IgxTextHighlightDirective_1.highlightGroupsMap.get(this.groupName);
        if (group.columnIndex === this.column && group.rowIndex === this.row && group.page === this.page) {
            this.activate(group.index);
        }
    };
    IgxTextHighlightDirective.prototype.activate = function (index) {
        this.deactivate();
        var spans = this._addedElements.filter(function (el) { return el.nodeName === "SPAN"; });
        this._activeElementIndex = index;
        if (spans.length <= index) {
            return;
        }
        var elementToActivate = spans[index];
        this.renderer.addClass(elementToActivate, this.activeCssClass);
        this.renderer.setAttribute(elementToActivate, "style", "background:orange;font-weight:bold");
    };
    IgxTextHighlightDirective.prototype.deactivate = function () {
        if (this._activeElementIndex === -1) {
            return;
        }
        var spans = this._addedElements.filter(function (el) { return el.nodeName === "SPAN"; });
        if (spans.length <= this._activeElementIndex) {
            this._activeElementIndex = -1;
            return;
        }
        var elementToDeactivate = spans[this._activeElementIndex];
        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);
        this.renderer.setAttribute(elementToDeactivate, "style", "background:yellow;font-weight:bold");
        this._activeElementIndex = -1;
    };
    IgxTextHighlightDirective.prototype.clearChildElements = function (originalContentHidden) {
        if (this.parentElement.firstElementChild) {
            this.renderer.setProperty(this.parentElement.firstElementChild, "hidden", originalContentHidden);
        }
        while (this._addedElements.length) {
            var el = this._addedElements.pop();
            this.renderer.removeChild(this.parentElement, el);
        }
        this._activeElementIndex = -1;
    };
    IgxTextHighlightDirective.prototype.getHighlightedText = function (searchText, caseSensitive) {
        var stringValue = String(this.value);
        var contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;
        var searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;
        var foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);
        var previousMatchEnd = 0;
        var matchCount = 0;
        while (foundIndex !== -1) {
            var start = foundIndex;
            var end = foundIndex + searchTextResolved.length;
            this.appendText(stringValue.substring(previousMatchEnd, start));
            this.appendSpan("<span class=\"" + this.cssClass + "\" style=\"background:yellow;font-weight:bold\">" + stringValue.substring(start, end) + "</span>");
            previousMatchEnd = end;
            matchCount++;
            foundIndex = contentStringResolved.indexOf(searchTextResolved, end);
        }
        this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));
        return matchCount;
    };
    IgxTextHighlightDirective.prototype.appendText = function (text) {
        var textElement = this.renderer.createText(text);
        this.renderer.appendChild(this.parentElement, textElement);
        this._addedElements.push(textElement);
    };
    IgxTextHighlightDirective.prototype.appendSpan = function (outerHTML) {
        var span = this.renderer.createElement("span");
        this.renderer.appendChild(this.parentElement, span);
        this.renderer.setProperty(span, "outerHTML", outerHTML);
        var childNodes = this.parentElement.childNodes;
        this._addedElements.push(childNodes[childNodes.length - 1]);
    };
    IgxTextHighlightDirective.prototype.searchNeedsEvaluation = function (text, caseSensitive) {
        var searchedText = this._lastSearchInfo.searchedText;
        return !this._nodeWasRemoved &&
            (searchedText === null ||
                searchedText !== text ||
                this._lastSearchInfo.content !== this.value ||
                this._lastSearchInfo.caseSensitive !== caseSensitive ||
                this._forceEvaluation);
    };
    IgxTextHighlightDirective.onActiveElementChanged = new core_1.EventEmitter();
    IgxTextHighlightDirective.highlightGroupsMap = new Map();
    __decorate([
        core_1.Input("cssClass"),
        __metadata("design:type", String)
    ], IgxTextHighlightDirective.prototype, "cssClass", void 0);
    __decorate([
        core_1.Input("activeCssClass"),
        __metadata("design:type", String)
    ], IgxTextHighlightDirective.prototype, "activeCssClass", void 0);
    __decorate([
        core_1.Input("groupName"),
        __metadata("design:type", Object)
    ], IgxTextHighlightDirective.prototype, "groupName", void 0);
    __decorate([
        core_1.Input("value"),
        __metadata("design:type", Object)
    ], IgxTextHighlightDirective.prototype, "value", void 0);
    __decorate([
        core_1.Input("row"),
        __metadata("design:type", Number)
    ], IgxTextHighlightDirective.prototype, "row", void 0);
    __decorate([
        core_1.Input("column"),
        __metadata("design:type", Number)
    ], IgxTextHighlightDirective.prototype, "column", void 0);
    __decorate([
        core_1.Input("page"),
        __metadata("design:type", Number)
    ], IgxTextHighlightDirective.prototype, "page", void 0);
    IgxTextHighlightDirective = IgxTextHighlightDirective_1 = __decorate([
        core_1.Directive({
            selector: "[igxTextHighlight]"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer2])
    ], IgxTextHighlightDirective);
    return IgxTextHighlightDirective;
    var IgxTextHighlightDirective_1;
}());
exports.IgxTextHighlightDirective = IgxTextHighlightDirective;
var IgxTextHighlightModule = (function () {
    function IgxTextHighlightModule() {
    }
    IgxTextHighlightModule = __decorate([
        core_1.NgModule({
            declarations: [IgxTextHighlightDirective],
            exports: [IgxTextHighlightDirective]
        })
    ], IgxTextHighlightModule);
    return IgxTextHighlightModule;
}());
exports.IgxTextHighlightModule = IgxTextHighlightModule;


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AsyncAction; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Action__ = __webpack_require__(165);
/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsyncAction = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (this.closed) {
            return this;
        }
        // Always replace the current state with the new state.
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        //
        // Important implementation note:
        //
        // Actions only execute once by default, unless rescheduled from within the
        // scheduled callback. This allows us to implement single and repeat
        // actions via the same code path, without adding API surface area, as well
        // as mimic traditional recursion but across asynchronous boundaries.
        //
        // However, JS runtimes and timers distinguish between intervals achieved by
        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
        // serial `setTimeout` calls can be individually delayed, which delays
        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
        // guarantee the interval callback will be invoked more precisely to the
        // interval period, regardless of load.
        //
        // Therefore, we use `setInterval` to schedule single and repeat actions.
        // If the action reschedules itself with the same delay, the interval is not
        // canceled. If the action doesn't reschedule, or reschedules with a
        // different delay, the interval will be canceled after scheduled callback
        // execution.
        //
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        // Set the pending flag indicating that this action has been scheduled, or
        // has recursively rescheduled itself.
        this.pending = true;
        this.delay = delay;
        // If this action has already an async Id, don't request a new one.
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If this action is rescheduled with the same delay time, don't clear the interval id.
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        // Otherwise, if the action's delay time is different from the current delay,
        // or the action has been rescheduled before it's executed, clear the interval id
        return clearInterval(id) && undefined || undefined;
    };
    /**
     * Immediately executes this action and the `work` it contains.
     * @return {any}
     */
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            // Dequeue if the action didn't reschedule itself. Don't call
            // unsubscribe(), because the action could reschedule later.
            // For example:
            // ```
            // scheduler.schedule(function doWork(counter) {
            //   /* ... I'm a busy worker bee ... */
            //   var originalAction = this;
            //   /* wait 100ms before rescheduling the action */
            //   setTimeout(function () {
            //     originalAction.schedule(counter + 1);
            //   }, 100);
            // }, 1000);
            // ```
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(__WEBPACK_IMPORTED_MODULE_1__Action__["a" /* Action */]));

//# sourceMappingURL=AsyncAction.js.map


/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AsyncScheduler; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Scheduler__ = __webpack_require__(89);
/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */


var AsyncScheduler = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = __WEBPACK_IMPORTED_MODULE_1__Scheduler__["a" /* Scheduler */].now;
        }
        var _this = _super.call(this, SchedulerAction, function () {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                return AsyncScheduler.delegate.now();
            }
            else {
                return now();
            }
        }) || this;
        _this.actions = [];
        /**
         * A flag to indicate whether the Scheduler is currently executing a batch of
         * queued actions.
         * @type {boolean}
         * @deprecated internal use only
         */
        _this.active = false;
        /**
         * An internal ID used to track the latest asynchronous task such as those
         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
         * others.
         * @type {any}
         * @deprecated internal use only
         */
        _this.scheduled = undefined;
        return _this;
    }
    AsyncScheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
        }
        else {
            return _super.prototype.schedule.call(this, work, delay, state);
        }
    };
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift()); // exhaust the scheduler queue
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(__WEBPACK_IMPORTED_MODULE_1__Scheduler__["a" /* Scheduler */]));

//# sourceMappingURL=AsyncScheduler.js.map


/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OuterSubscriber; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(8);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](OuterSubscriber, _super);
    function OuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));

//# sourceMappingURL=OuterSubscriber.js.map


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = subscribeToResult;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__InnerSubscriber__ = __webpack_require__(184);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__subscribeTo__ = __webpack_require__(93);
/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */


function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new __WEBPACK_IMPORTED_MODULE_0__InnerSubscriber__["a" /* InnerSubscriber */](outerSubscriber, outerValue, outerIndex);
    return Object(__WEBPACK_IMPORTED_MODULE_1__subscribeTo__["a" /* subscribeTo */])(result)(destination);
}
//# sourceMappingURL=subscribeToResult.js.map


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getSymbolIterator */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return iterator; });
/* unused harmony export $$iterator */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator = /*@__PURE__*/ getSymbolIterator();
/**
 * @deprecated use {@link iterator} instead
 */
var $$iterator = iterator;
//# sourceMappingURL=iterator.js.map


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var data_util_1 = __webpack_require__(11);
var text_highlight_directive_1 = __webpack_require__(29);
var api_service_1 = __webpack_require__(10);
var grid_summary_1 = __webpack_require__(207);
var grid_common_1 = __webpack_require__(14);
var IgxColumnComponent = (function () {
    function IgxColumnComponent(gridAPI, cdr) {
        this.gridAPI = gridAPI;
        this.cdr = cdr;
        this.header = "";
        this.sortable = false;
        this.groupable = false;
        this.editable = false;
        this.filterable = false;
        this.resizable = false;
        this.hasSummary = false;
        this.movable = false;
        this.minWidth = this.defaultMinWidth;
        this.headerClasses = "";
        this.cellClasses = "";
        this.filteringIgnoreCase = true;
        this.sortingIgnoreCase = true;
        this.dataType = data_util_1.DataType.String;
        this.pinned = false;
        this._summaries = null;
        this._hidden = false;
        this._defaultMinWidth = "88";
    }
    Object.defineProperty(IgxColumnComponent.prototype, "hidden", {
        get: function () {
            return this._hidden;
        },
        set: function (value) {
            if (this._hidden !== value) {
                this._hidden = value;
                this.check();
                if (this.grid) {
                    var activeInfo = text_highlight_directive_1.IgxTextHighlightDirective.highlightGroupsMap.get(this.grid.id);
                    var oldIndex = activeInfo.columnIndex;
                    if (this.grid.lastSearchInfo.searchText) {
                        if (this.index <= oldIndex) {
                            var newIndex = this.hidden ? oldIndex - 1 : oldIndex + 1;
                            this.updateHighlights(oldIndex, newIndex);
                        }
                        else if (oldIndex === -1 && !this.hidden) {
                            this.grid.refreshSearch();
                        }
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "index", {
        get: function () {
            return this._index;
        },
        set: function (value) {
            if (this._index !== value) {
                this._index = value;
                this.check();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "summaries", {
        get: function () {
            return this._summaries;
        },
        set: function (classRef) {
            this._summaries = new classRef();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "defaultMinWidth", {
        get: function () {
            return this._defaultMinWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "grid", {
        get: function () {
            return this.gridAPI.get(this.gridID);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "bodyTemplate", {
        get: function () {
            return this._bodyTemplate;
        },
        set: function (template) {
            this._bodyTemplate = template;
            this.grid.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "headerTemplate", {
        get: function () {
            return this._headerTemplate;
        },
        set: function (template) {
            this._headerTemplate = template;
            this.grid.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "footerTemplate", {
        get: function () {
            return this._headerTemplate;
        },
        set: function (template) {
            this._footerTemplate = template;
            this.grid.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "inlineEditorTemplate", {
        get: function () {
            return this._inlineEditorTemplate;
        },
        set: function (template) {
            this._inlineEditorTemplate = template;
            this.grid.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "cells", {
        get: function () {
            var _this = this;
            return this.grid.rowList.map(function (row) { return row.cells.filter(function (cell) { return cell.columnIndex === _this.index; }); })
                .reduce(function (a, b) { return a.concat(b); }, []);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "visibleIndex", {
        get: function () {
            var grid = this.gridAPI.get(this.gridID);
            var vIndex = -1;
            if (!this.pinned) {
                var indexInCollection = grid.unpinnedColumns.indexOf(this);
                vIndex = indexInCollection === -1 ? -1 : grid.pinnedColumns.length + indexInCollection;
            }
            else {
                vIndex = grid.pinnedColumns.indexOf(this);
            }
            return vIndex;
        },
        enumerable: true,
        configurable: true
    });
    IgxColumnComponent.prototype.ngAfterContentInit = function () {
        if (this.cellTemplate) {
            this._bodyTemplate = this.cellTemplate.template;
        }
        if (this.headTemplate) {
            this._headerTemplate = this.headTemplate.template;
        }
        if (this.footTemplate) {
            this._footerTemplate = this.footTemplate.template;
        }
        if (this.editorTemplate) {
            this._inlineEditorTemplate = this.editorTemplate.template;
        }
        if (!this.summaries) {
            switch (this.dataType) {
                case data_util_1.DataType.String:
                case data_util_1.DataType.Boolean:
                    this.summaries = grid_summary_1.IgxSummaryOperand;
                    break;
                case data_util_1.DataType.Number:
                    this.summaries = grid_summary_1.IgxNumberSummaryOperand;
                    break;
                case data_util_1.DataType.Date:
                    this.summaries = grid_summary_1.IgxDateSummaryOperand;
                    break;
            }
        }
    };
    IgxColumnComponent.prototype.pin = function () {
        return this.gridAPI.get(this.gridID).pinColumn(this.field);
    };
    IgxColumnComponent.prototype.unpin = function () {
        return this.gridAPI.get(this.gridID).unpinColumn(this.field);
    };
    IgxColumnComponent.prototype.updateHighlights = function (oldIndex, newIndex) {
        var activeInfo = text_highlight_directive_1.IgxTextHighlightDirective.highlightGroupsMap.get(this.grid.id);
        if (activeInfo.columnIndex === oldIndex) {
            text_highlight_directive_1.IgxTextHighlightDirective.setActiveHighlight(this.grid.id, newIndex, activeInfo.rowIndex, activeInfo.index, activeInfo.page);
            this.grid.refreshSearch(true);
        }
    };
    IgxColumnComponent.prototype.check = function () {
        if (this.grid) {
            this.grid.markForCheck();
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxColumnComponent.prototype, "field", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "header", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "sortable", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "groupable", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "editable", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "filterable", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "resizable", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "hasSummary", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxColumnComponent.prototype, "hidden", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "movable", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxColumnComponent.prototype, "width", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxColumnComponent.prototype, "maxWidth", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "minWidth", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "headerClasses", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "cellClasses", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], IgxColumnComponent.prototype, "index", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Function)
    ], IgxColumnComponent.prototype, "formatter", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Function)
    ], IgxColumnComponent.prototype, "filteringCondition", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "filteringIgnoreCase", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "sortingIgnoreCase", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxColumnComponent.prototype, "dataType", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxColumnComponent.prototype, "pinned", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxColumnComponent.prototype, "summaries", null);
    __decorate([
        core_1.ContentChild(grid_common_1.IgxCellTemplateDirective, { read: grid_common_1.IgxCellTemplateDirective }),
        __metadata("design:type", grid_common_1.IgxCellTemplateDirective)
    ], IgxColumnComponent.prototype, "cellTemplate", void 0);
    __decorate([
        core_1.ContentChild(grid_common_1.IgxCellHeaderTemplateDirective, { read: grid_common_1.IgxCellHeaderTemplateDirective }),
        __metadata("design:type", grid_common_1.IgxCellHeaderTemplateDirective)
    ], IgxColumnComponent.prototype, "headTemplate", void 0);
    __decorate([
        core_1.ContentChild(grid_common_1.IgxCellFooterTemplateDirective, { read: grid_common_1.IgxCellFooterTemplateDirective }),
        __metadata("design:type", grid_common_1.IgxCellFooterTemplateDirective)
    ], IgxColumnComponent.prototype, "footTemplate", void 0);
    __decorate([
        core_1.ContentChild(grid_common_1.IgxCellEditorTemplateDirective, { read: grid_common_1.IgxCellEditorTemplateDirective }),
        __metadata("design:type", grid_common_1.IgxCellEditorTemplateDirective)
    ], IgxColumnComponent.prototype, "editorTemplate", void 0);
    IgxColumnComponent = __decorate([
        core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: "igx-column",
            template: ""
        }),
        __metadata("design:paramtypes", [api_service_1.IgxGridAPIService, core_1.ChangeDetectorRef])
    ], IgxColumnComponent);
    return IgxColumnComponent;
}());
exports.IgxColumnComponent = IgxColumnComponent;


/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_36__;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FilteringLogic;
(function (FilteringLogic) {
    FilteringLogic[FilteringLogic["And"] = 0] = "And";
    FilteringLogic[FilteringLogic["Or"] = 1] = "Or";
})(FilteringLogic = exports.FilteringLogic || (exports.FilteringLogic = {}));


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var icon_1 = __webpack_require__(6);
var NEXT_ID = 0;
var Type;
(function (Type) {
    Type["DEFAULT"] = "default";
    Type["INFO"] = "info";
    Type["SUCCESS"] = "success";
    Type["WARNING"] = "warning";
    Type["ERROR"] = "error";
})(Type = exports.Type || (exports.Type = {}));
var IgxBadgeComponent = (function () {
    function IgxBadgeComponent() {
        this.id = "igx-badge-" + NEXT_ID++;
        this.type = "default";
        this.value = "";
        this.role = "status";
        this.cssClass = "igx-badge";
        this.label = "badge";
    }
    Object.defineProperty(IgxBadgeComponent.prototype, "roleDescription", {
        get: function () {
            var message;
            if (this.icon) {
                message = this.type + " type badge with icon type " + this.icon;
            }
            else if (this.value) {
                message = this.type + " badge type with value " + this.value;
            }
            else {
                message = this.type + " badge type without value";
            }
            return message;
        },
        enumerable: true,
        configurable: true
    });
    IgxBadgeComponent.prototype.setClasses = function () {
        var classes = {};
        switch (Type[this.type.toUpperCase()]) {
            case Type.DEFAULT:
                classes = (_a = {},
                    _a[this.cssClass + "__circle--default"] = true,
                    _a);
                break;
            case Type.INFO:
                classes = (_b = {},
                    _b[this.cssClass + "__circle--info"] = true,
                    _b);
                break;
            case Type.SUCCESS:
                classes = (_c = {},
                    _c[this.cssClass + "__circle--success"] = true,
                    _c);
                break;
            case Type.WARNING:
                classes = (_d = {},
                    _d[this.cssClass + "__circle--warning"] = true,
                    _d);
                break;
            case Type.ERROR:
                classes = (_e = {},
                    _e[this.cssClass + "__circle--error"] = true,
                    _e);
                break;
        }
        return classes;
        var _a, _b, _c, _d, _e;
    };
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxBadgeComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxBadgeComponent.prototype, "type", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxBadgeComponent.prototype, "value", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxBadgeComponent.prototype, "icon", void 0);
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxBadgeComponent.prototype, "role", void 0);
    __decorate([
        core_1.HostBinding("class.igx-badge"),
        __metadata("design:type", Object)
    ], IgxBadgeComponent.prototype, "cssClass", void 0);
    __decorate([
        core_1.HostBinding("attr.aria-label"),
        __metadata("design:type", Object)
    ], IgxBadgeComponent.prototype, "label", void 0);
    IgxBadgeComponent = __decorate([
        core_1.Component({
            selector: "igx-badge",
            template: __webpack_require__(120)
        })
    ], IgxBadgeComponent);
    return IgxBadgeComponent;
}());
exports.IgxBadgeComponent = IgxBadgeComponent;
var IgxBadgeModule = (function () {
    function IgxBadgeModule() {
    }
    IgxBadgeModule = __decorate([
        core_1.NgModule({
            declarations: [IgxBadgeComponent],
            exports: [IgxBadgeComponent],
            imports: [common_1.CommonModule, icon_1.IgxIconModule]
        })
    ], IgxBadgeModule);
    return IgxBadgeModule;
}());
exports.IgxBadgeModule = IgxBadgeModule;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var badge_component_1 = __webpack_require__(38);
var ripple_directive_1 = __webpack_require__(12);
var icon_1 = __webpack_require__(6);
var tab_item_component_1 = __webpack_require__(123);
var tabs_group_component_1 = __webpack_require__(74);
var tabs_directives_1 = __webpack_require__(75);
var TabsType;
(function (TabsType) {
    TabsType["FIXED"] = "fixed";
    TabsType["CONTENTFIT"] = "contentfit";
})(TabsType = exports.TabsType || (exports.TabsType = {}));
var IgxTabsComponent = (function () {
    function IgxTabsComponent(_element) {
        this._element = _element;
        this.tabsType = "contentfit";
        this.onTabItemSelected = new core_1.EventEmitter();
        this.onTabItemDeselected = new core_1.EventEmitter();
        this.selectedIndex = -1;
        this.offset = 0;
    }
    Object.defineProperty(IgxTabsComponent.prototype, "class", {
        get: function () {
            var defaultStyle = "igx-tabs";
            var fixedStyle = "igx-tabs--fixed";
            var iconStyle = "igx-tabs--icons";
            var iconLabelFound = this.groups.find(function (group) { return group.icon != null && group.label != null; });
            var css;
            switch (TabsType[this.tabsType.toUpperCase()]) {
                case TabsType.FIXED: {
                    css = fixedStyle;
                    break;
                }
                default: {
                    css = defaultStyle;
                    break;
                }
            }
            if (iconLabelFound !== undefined) {
                css = css + " " + iconStyle;
            }
            return css;
        },
        enumerable: true,
        configurable: true
    });
    IgxTabsComponent.prototype.scrollLeft = function (event) {
        this._scroll(false);
    };
    IgxTabsComponent.prototype.scrollRight = function (event) {
        this._scroll(true);
    };
    IgxTabsComponent.prototype._scroll = function (scrollRight) {
        var tabsArray = this.tabs.toArray();
        for (var _i = 0, tabsArray_1 = tabsArray; _i < tabsArray_1.length; _i++) {
            var tab = tabsArray_1[_i];
            var element = tab.nativeTabItem.nativeElement;
            if (scrollRight) {
                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {
                    this.scrollElement(element, scrollRight);
                    break;
                }
            }
            else {
                if (element.offsetWidth + element.offsetLeft >= this.offset) {
                    this.scrollElement(element, scrollRight);
                    break;
                }
            }
        }
    };
    IgxTabsComponent.prototype.scrollElement = function (element, scrollRight) {
        var _this = this;
        requestAnimationFrame(function () {
            var viewPortWidth = _this.viewPort.nativeElement.offsetWidth;
            _this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;
            _this.itemsContainer.nativeElement.style.transform = "translate(" + -_this.offset + "px)";
        });
    };
    Object.defineProperty(IgxTabsComponent.prototype, "selectedTabItem", {
        get: function () {
            if (this.tabs && this.selectedIndex !== undefined) {
                return this.tabs.toArray()[this.selectedIndex];
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxTabsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.selectedIndex === -1) {
                var selectableGroups = _this.groups.filter(function (p) { return !p.isDisabled; });
                var group = selectableGroups[0];
                if (group) {
                    group.select(50, true);
                }
            }
        }, 0);
    };
    IgxTabsComponent.prototype._selectedGroupHandler = function (args) {
        var _this = this;
        this.selectedIndex = args.group.index;
        this.groups.forEach(function (p) {
            if (p.index !== _this.selectedIndex) {
                _this._deselectGroup(p);
            }
        });
    };
    IgxTabsComponent.prototype._deselectGroup = function (group) {
        if (group.isDisabled || this.selectedTabItem.index === group.index) {
            return;
        }
        group.isSelected = false;
        group.relatedTab.tabindex = -1;
        this.onTabItemDeselected.emit({ tab: this.tabs[group.index], group: group });
    };
    __decorate([
        core_1.ViewChildren(core_1.forwardRef(function () { return tab_item_component_1.IgxTabItemComponent; })),
        __metadata("design:type", core_1.QueryList)
    ], IgxTabsComponent.prototype, "tabs", void 0);
    __decorate([
        core_1.ContentChildren(core_1.forwardRef(function () { return tabs_group_component_1.IgxTabsGroupComponent; })),
        __metadata("design:type", core_1.QueryList)
    ], IgxTabsComponent.prototype, "groups", void 0);
    __decorate([
        core_1.Input("tabsType"),
        __metadata("design:type", String)
    ], IgxTabsComponent.prototype, "tabsType", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxTabsComponent.prototype, "onTabItemSelected", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxTabsComponent.prototype, "onTabItemDeselected", void 0);
    __decorate([
        core_1.ViewChild("tabsContainer"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxTabsComponent.prototype, "tabsContainer", void 0);
    __decorate([
        core_1.ViewChild("headerContainer"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxTabsComponent.prototype, "headerContainer", void 0);
    __decorate([
        core_1.ViewChild("itemsContainer"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxTabsComponent.prototype, "itemsContainer", void 0);
    __decorate([
        core_1.ViewChild("contentsContainer"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxTabsComponent.prototype, "contentsContainer", void 0);
    __decorate([
        core_1.ViewChild("selectedIndicator"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxTabsComponent.prototype, "selectedIndicator", void 0);
    __decorate([
        core_1.ViewChild("viewPort"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxTabsComponent.prototype, "viewPort", void 0);
    __decorate([
        core_1.HostBinding("attr.class"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxTabsComponent.prototype, "class", null);
    __decorate([
        core_1.HostListener("onTabItemSelected", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxTabsComponent.prototype, "_selectedGroupHandler", null);
    IgxTabsComponent = __decorate([
        core_1.Component({
            selector: "igx-tabs",
            template: __webpack_require__(126)
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], IgxTabsComponent);
    return IgxTabsComponent;
}());
exports.IgxTabsComponent = IgxTabsComponent;
var IgxTabsModule = (function () {
    function IgxTabsModule() {
    }
    IgxTabsModule = __decorate([
        core_1.NgModule({
            declarations: [IgxTabsComponent,
                tabs_group_component_1.IgxTabsGroupComponent,
                tab_item_component_1.IgxTabItemComponent,
                tabs_directives_1.IgxTabItemTemplateDirective,
                tabs_directives_1.IgxRightButtonStyleDirective,
                tabs_directives_1.IgxLeftButtonStyleDirective],
            exports: [IgxTabsComponent,
                tabs_group_component_1.IgxTabsGroupComponent,
                tab_item_component_1.IgxTabItemComponent,
                tabs_directives_1.IgxTabItemTemplateDirective,
                tabs_directives_1.IgxRightButtonStyleDirective,
                tabs_directives_1.IgxLeftButtonStyleDirective],
            imports: [common_1.CommonModule, badge_component_1.IgxBadgeModule, icon_1.IgxIconModule, ripple_directive_1.IgxRippleModule]
        })
    ], IgxTabsModule);
    return IgxTabsModule;
}());
exports.IgxTabsModule = IgxTabsModule;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var forms_1 = __webpack_require__(7);
var ripple_directive_1 = __webpack_require__(12);
var LabelPosition;
(function (LabelPosition) {
    LabelPosition["BEFORE"] = "before";
    LabelPosition["AFTER"] = "after";
})(LabelPosition = exports.LabelPosition || (exports.LabelPosition = {}));
var noop = function () { };
var nextId = 0;
var IgxCheckboxComponent = (function () {
    function IgxCheckboxComponent() {
        this.id = "igx-checkbox-" + nextId++;
        this.labelId = this.id + "-label";
        this.tabindex = null;
        this.labelPosition = LabelPosition.AFTER;
        this.disableRipple = false;
        this.required = false;
        this.ariaLabelledBy = this.labelId;
        this.ariaLabel = null;
        this.change = new core_1.EventEmitter();
        this.cssClass = "igx-checkbox";
        this.focused = false;
        this.indeterminate = false;
        this.checked = false;
        this.disabled = false;
        this.inputId = this.id + "-input";
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
    }
    IgxCheckboxComponent_1 = IgxCheckboxComponent;
    IgxCheckboxComponent.prototype.toggle = function () {
        if (this.disabled) {
            return;
        }
        this.indeterminate = false;
        this.focused = false;
        this.checked = !this.checked;
        this.change.emit({ checked: this.checked, checkbox: this });
        this._onChangeCallback(this.checked);
    };
    IgxCheckboxComponent.prototype._onCheckboxChange = function (event) {
        event.stopPropagation();
    };
    IgxCheckboxComponent.prototype._onCheckboxClick = function (event) {
        event.stopPropagation();
        this.toggle();
    };
    IgxCheckboxComponent.prototype._onLabelClick = function (event) {
        this.toggle();
    };
    IgxCheckboxComponent.prototype.onFocus = function (event) {
        this.focused = true;
    };
    IgxCheckboxComponent.prototype.onBlur = function (event) {
        this.focused = false;
        this._onTouchedCallback();
    };
    IgxCheckboxComponent.prototype.writeValue = function (value) {
        this._value = value;
        this.checked = !!this._value;
    };
    Object.defineProperty(IgxCheckboxComponent.prototype, "labelClass", {
        get: function () {
            switch (this.labelPosition) {
                case LabelPosition.BEFORE:
                    return this.cssClass + "__label--before";
                case LabelPosition.AFTER:
                default:
                    return this.cssClass + "__label";
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxCheckboxComponent.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    IgxCheckboxComponent.prototype.registerOnTouched = function (fn) { this._onTouchedCallback = fn; };
    __decorate([
        core_1.ViewChild("checkbox"),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "nativeCheckbox", void 0);
    __decorate([
        core_1.ViewChild("label"),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "nativeLabel", void 0);
    __decorate([
        core_1.ViewChild("placeholderLabel"),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "placeholderLabel", void 0);
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "labelId", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "value", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxCheckboxComponent.prototype, "name", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxCheckboxComponent.prototype, "tabindex", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxCheckboxComponent.prototype, "labelPosition", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "disableRipple", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "required", void 0);
    __decorate([
        core_1.Input("aria-labelledby"),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "ariaLabelledBy", void 0);
    __decorate([
        core_1.Input("aria-label"),
        __metadata("design:type", String)
    ], IgxCheckboxComponent.prototype, "ariaLabel", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], IgxCheckboxComponent.prototype, "change", void 0);
    __decorate([
        core_1.HostBinding("class.igx-checkbox"),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "cssClass", void 0);
    __decorate([
        core_1.HostBinding("class.igx-checkbox--focused"),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "focused", void 0);
    __decorate([
        core_1.HostBinding("class.igx-checkbox--indeterminate"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "indeterminate", void 0);
    __decorate([
        core_1.HostBinding("class.igx-checkbox--checked"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "checked", void 0);
    __decorate([
        core_1.HostBinding("class.igx-checkbox--disabled"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCheckboxComponent.prototype, "disabled", void 0);
    IgxCheckboxComponent = IgxCheckboxComponent_1 = __decorate([
        core_1.Component({
            providers: [{ provide: forms_1.NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent_1, multi: true }],
            selector: "igx-checkbox",
            preserveWhitespaces: false,
            template: __webpack_require__(143)
        })
    ], IgxCheckboxComponent);
    return IgxCheckboxComponent;
    var IgxCheckboxComponent_1;
}());
exports.IgxCheckboxComponent = IgxCheckboxComponent;
exports.IGX_CHECKBOX_REQUIRED_VALIDATOR = {
    provide: forms_1.NG_VALIDATORS,
    useExisting: core_1.forwardRef(function () { return IgxCheckboxRequiredDirective; }),
    multi: true
};
var IgxCheckboxRequiredDirective = (function (_super) {
    __extends(IgxCheckboxRequiredDirective, _super);
    function IgxCheckboxRequiredDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgxCheckboxRequiredDirective = __decorate([
        core_1.Directive({
            selector: "igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]",
            providers: [exports.IGX_CHECKBOX_REQUIRED_VALIDATOR]
        })
    ], IgxCheckboxRequiredDirective);
    return IgxCheckboxRequiredDirective;
}(forms_1.CheckboxRequiredValidator));
exports.IgxCheckboxRequiredDirective = IgxCheckboxRequiredDirective;
var IgxCheckboxModule = (function () {
    function IgxCheckboxModule() {
    }
    IgxCheckboxModule = __decorate([
        core_1.NgModule({
            declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],
            exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],
            imports: [ripple_directive_1.IgxRippleModule]
        })
    ], IgxCheckboxModule);
    return IgxCheckboxModule;
}());
exports.IgxCheckboxModule = IgxCheckboxModule;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var hint_directive_1 = __webpack_require__(146);
var input_directive_1 = __webpack_require__(147);
var label_directive_1 = __webpack_require__(148);
var prefix_directive_1 = __webpack_require__(149);
var suffix_directive_1 = __webpack_require__(150);
var NEXT_ID = 0;
var IgxInputGroupType;
(function (IgxInputGroupType) {
    IgxInputGroupType[IgxInputGroupType["LINE"] = 0] = "LINE";
    IgxInputGroupType[IgxInputGroupType["BOX"] = 1] = "BOX";
    IgxInputGroupType[IgxInputGroupType["BORDER"] = 2] = "BORDER";
    IgxInputGroupType[IgxInputGroupType["SEARCH"] = 3] = "SEARCH";
})(IgxInputGroupType || (IgxInputGroupType = {}));
var IgxInputGroupComponent = (function () {
    function IgxInputGroupComponent(element) {
        this.element = element;
        this._type = IgxInputGroupType.LINE;
        this.id = "igx-input-group-" + NEXT_ID++;
        this.defaultClass = true;
        this.hasPlaceholder = false;
        this.isRequired = false;
        this.isFocused = false;
        this.isFilled = false;
        this.isBox = false;
        this.isBorder = false;
        this.isSearch = false;
        this.isDisabled = false;
        this.hasWarning = false;
    }
    Object.defineProperty(IgxInputGroupComponent.prototype, "validClass", {
        get: function () {
            return this.input.valid === input_directive_1.IgxInputState.VALID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputGroupComponent.prototype, "invalidClass", {
        get: function () {
            return this.input.valid === input_directive_1.IgxInputState.INVALID;
        },
        enumerable: true,
        configurable: true
    });
    IgxInputGroupComponent.prototype.onClick = function (event) {
        this.input.focus();
    };
    Object.defineProperty(IgxInputGroupComponent.prototype, "type", {
        get: function () {
            return this._type.toString();
        },
        set: function (value) {
            var type = IgxInputGroupType[value.toUpperCase()];
            if (type !== undefined) {
                this.isBox = this.isBorder = this.isSearch = false;
                switch (type) {
                    case IgxInputGroupType.BOX:
                        this.isBox = true;
                        break;
                    case IgxInputGroupType.BORDER:
                        this.isBorder = true;
                        break;
                    case IgxInputGroupType.SEARCH:
                        this.isSearch = true;
                        break;
                    default: break;
                }
                this._type = type;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputGroupComponent.prototype, "hasHints", {
        get: function () {
            return this.hints.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputGroupComponent.prototype, "hasBorder", {
        get: function () {
            return this._type === IgxInputGroupType.LINE ||
                this._type === IgxInputGroupType.BOX;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputGroupComponent.prototype, "isTypeLine", {
        get: function () {
            return this._type === IgxInputGroupType.LINE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputGroupComponent.prototype, "isTypeBox", {
        get: function () {
            return this._type === IgxInputGroupType.BOX;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputGroupComponent.prototype, "isTypeBorder", {
        get: function () {
            return this._type === IgxInputGroupType.BORDER;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputGroupComponent.prototype, "isTypeSearch", {
        get: function () {
            return this._type === IgxInputGroupType.SEARCH;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxInputGroupComponent.prototype, "id", void 0);
    __decorate([
        core_1.HostBinding("class.igx-input-group"),
        __metadata("design:type", Object)
    ], IgxInputGroupComponent.prototype, "defaultClass", void 0);
    __decorate([
        core_1.HostBinding("class.igx-input-group--placeholder"),
        __metadata("design:type", Object)
    ], IgxInputGroupComponent.prototype, "hasPlaceholder", void 0);
    __decorate([
        core_1.HostBinding("class.igx-input-group--required"),
        __metadata("design:type", Object)
    ], IgxInputGroupComponent.prototype, "isRequired", void 0);
    __decorate([
        core_1.HostBinding("class.igx-input-group--focused"),
        __metadata("design:type", Object)
    ], IgxInputGroupComponent.prototype, "isFocused", void 0);
    __decorate([
        core_1.HostBinding("class.igx-input-group--filled"),
        __metadata("design:type", Object)
    ], IgxInputGroupComponent.prototype, "isFilled", void 0);
    __decorate([
        core_1.HostBinding("class.igx-input-group--box"),
        __metadata("design:type", Object)
    ], IgxInputGroupComponent.prototype, "isBox", void 0);
    __decorate([
        core_1.HostBinding("class.igx-input-group--border"),
        __metadata("design:type", Object)
    ], IgxInputGroupComponent.prototype, "isBorder", void 0);
    __decorate([
        core_1.HostBinding("class.igx-input-group--search"),
        __metadata("design:type", Object)
    ], IgxInputGroupComponent.prototype, "isSearch", void 0);
    __decorate([
        core_1.HostBinding("class.igx-input-group--disabled"),
        __metadata("design:type", Object)
    ], IgxInputGroupComponent.prototype, "isDisabled", void 0);
    __decorate([
        core_1.HostBinding("class.igx-input-group--valid"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxInputGroupComponent.prototype, "validClass", null);
    __decorate([
        core_1.HostBinding("class.igx-input-group--invalid"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxInputGroupComponent.prototype, "invalidClass", null);
    __decorate([
        core_1.HostBinding("class.igx-input-group--warning"),
        __metadata("design:type", Object)
    ], IgxInputGroupComponent.prototype, "hasWarning", void 0);
    __decorate([
        core_1.ContentChildren(hint_directive_1.IgxHintDirective, { read: hint_directive_1.IgxHintDirective }),
        __metadata("design:type", core_1.QueryList)
    ], IgxInputGroupComponent.prototype, "hints", void 0);
    __decorate([
        core_1.ContentChild(input_directive_1.IgxInputDirective, { read: input_directive_1.IgxInputDirective }),
        __metadata("design:type", input_directive_1.IgxInputDirective)
    ], IgxInputGroupComponent.prototype, "input", void 0);
    __decorate([
        core_1.HostListener("click", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxInputGroupComponent.prototype, "onClick", null);
    __decorate([
        core_1.Input("type"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], IgxInputGroupComponent.prototype, "type", null);
    IgxInputGroupComponent = __decorate([
        core_1.Component({
            selector: "igx-input-group",
            template: __webpack_require__(151)
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], IgxInputGroupComponent);
    return IgxInputGroupComponent;
}());
exports.IgxInputGroupComponent = IgxInputGroupComponent;
var IgxInputGroupModule = (function () {
    function IgxInputGroupModule() {
    }
    IgxInputGroupModule = __decorate([
        core_1.NgModule({
            declarations: [IgxInputGroupComponent, hint_directive_1.IgxHintDirective, input_directive_1.IgxInputDirective, label_directive_1.IgxLabelDirective, prefix_directive_1.IgxPrefixDirective, suffix_directive_1.IgxSuffixDirective],
            exports: [IgxInputGroupComponent, hint_directive_1.IgxHintDirective, input_directive_1.IgxInputDirective, label_directive_1.IgxLabelDirective, prefix_directive_1.IgxPrefixDirective, suffix_directive_1.IgxSuffixDirective],
            imports: [common_1.CommonModule]
        })
    ], IgxInputGroupModule);
    return IgxInputGroupModule;
}());
exports.IgxInputGroupModule = IgxInputGroupModule;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var deprecateDecorators_1 = __webpack_require__(80);
var display_container_1 = __webpack_require__(154);
var horizontal_virtual_helper_component_1 = __webpack_require__(155);
var virtual_helper_component_1 = __webpack_require__(156);
var IgxForOfDirective = (function () {
    function IgxForOfDirective(_viewContainer, _template, _differs, resolver, cdr, _zone) {
        this._viewContainer = _viewContainer;
        this._template = _template;
        this._differs = _differs;
        this.resolver = resolver;
        this.cdr = cdr;
        this._zone = _zone;
        this.state = {
            startIndex: 0,
            chunkSize: 0
        };
        this.totalItemCount = null;
        this.igxForRemote = false;
        this.onChunkLoad = new core_1.EventEmitter();
        this.onChunkPreload = new core_1.EventEmitter();
        this._differ = null;
        this._lastTouchX = 0;
        this._lastTouchY = 0;
        this._isScrolledToBottom = false;
        this._virtHeight = 0;
        this._virtHeightRatio = 1;
        this._virtScrollTop = 0;
        this._bScrollInternal = false;
        this._embeddedViews = [];
    }
    Object.defineProperty(IgxForOfDirective.prototype, "isRemote", {
        get: function () {
            return this.totalItemCount !== null;
        },
        enumerable: true,
        configurable: true
    });
    IgxForOfDirective.prototype.ngOnInit = function () {
        var _this = this;
        var totalWidth = 0;
        var vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;
        var dcFactory = this.resolver.resolveComponentFactory(display_container_1.DisplayContainerComponent);
        this.dc = this._viewContainer.createComponent(dcFactory, 0);
        if (this.igxForOf && this.igxForOf.length) {
            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);
            if (this.igxForScrollOrientation === "horizontal") {
                totalWidth = this.initHCache(this.igxForOf);
                this.hScroll = this.getElement(vc, "igx-horizontal-virtual-helper");
                if (this.hScroll) {
                    this.state.startIndex = this.getHorizontalIndexAt(this.hScroll.scrollLeft, this.hCache, 0);
                }
            }
            this.state.chunkSize = this._calculateChunkSize();
            for (var i = 0; i < this.state.chunkSize && this.igxForOf[i] !== undefined; i++) {
                var input = this.igxForOf[i];
                var embeddedView = this.dc.instance._vcr.createEmbeddedView(this._template, { $implicit: input, index: this.igxForOf.indexOf(input) });
                this._embeddedViews.push(embeddedView);
            }
        }
        if (this.igxForScrollOrientation === "vertical") {
            this.dc.instance._viewContainer.element.nativeElement.style.top = "0px";
            var factory = this.resolver.resolveComponentFactory(virtual_helper_component_1.VirtualHelperComponent);
            this.vh = this._viewContainer.createComponent(factory, 1);
            this._maxHeight = this._calcMaxBrowserHeight();
            this.vh.instance.height = this.igxForOf ? this._calcHeight() : 0;
            this._zone.runOutsideAngular(function () {
                _this.vh.instance.elementRef.nativeElement.addEventListener("scroll", function (evt) { _this.onScroll(evt); });
                _this.dc.instance._viewContainer.element.nativeElement.addEventListener("wheel", function (evt) { _this.onWheel(evt); });
                _this.dc.instance._viewContainer.element.nativeElement.addEventListener("touchstart", function (evt) { _this.onTouchStart(evt); });
                _this.dc.instance._viewContainer.element.nativeElement.addEventListener("touchmove", function (evt) { _this.onTouchMove(evt); });
                _this.dc.instance._viewContainer.element.nativeElement.addEventListener("pointerdown", function (evt) { _this.onPointerDown(evt); });
                _this.dc.instance._viewContainer.element.nativeElement.addEventListener("pointerup", function (evt) { _this.onPointerUp(evt); });
                _this.dc.instance._viewContainer.element.nativeElement.addEventListener("MSGestureStart", function (evt) { _this.onMSGestureStart(evt); });
                _this.dc.instance._viewContainer.element.nativeElement.addEventListener("MSGestureChange", function (evt) { _this.onMSGestureChange(evt); });
            });
        }
        if (this.igxForScrollOrientation === "horizontal") {
            this.func = function (evt) { _this.onHScroll(evt); };
            this.hScroll = this.getElement(vc, "igx-horizontal-virtual-helper");
            if (!this.hScroll) {
                var hvFactory = this.resolver.resolveComponentFactory(horizontal_virtual_helper_component_1.HVirtualHelperComponent);
                this.hvh = vc.createComponent(hvFactory);
                this.hvh.instance.width = totalWidth;
                this.hScroll = this.hvh.instance.elementRef.nativeElement;
                this._zone.runOutsideAngular(function () {
                    _this.hvh.instance.elementRef.nativeElement.addEventListener("scroll", _this.func);
                });
            }
            else {
                this._zone.runOutsideAngular(function () {
                    _this.hScroll.addEventListener("scroll", _this.func);
                    _this.dc.instance._viewContainer.element.nativeElement.addEventListener("wheel", function (evt) { _this.onWheel(evt); });
                    _this.dc.instance._viewContainer.element.nativeElement.addEventListener("touchstart", function (evt) { _this.onTouchStart(evt); });
                    _this.dc.instance._viewContainer.element.nativeElement.addEventListener("touchmove", function (evt) { _this.onTouchMove(evt); });
                    _this.dc.instance._viewContainer.element.nativeElement.addEventListener("pointerdown", function (evt) { _this.onPointerDown(evt); });
                    _this.dc.instance._viewContainer.element.nativeElement.addEventListener("pointerup", function (evt) { _this.onPointerUp(evt); });
                    _this.dc.instance._viewContainer.element.nativeElement.addEventListener("MSGestureStart", function (evt) { _this.onMSGestureStart(evt); });
                    _this.dc.instance._viewContainer.element.nativeElement.addEventListener("MSGestureChange", function (evt) { _this.onMSGestureChange(evt); });
                });
            }
            var scrollOffset = this.hScroll.scrollLeft - (this.hCache && this.hCache.length ? this.hCache[this.state.startIndex] : 0);
            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + "px";
            this.dc.instance._viewContainer.element.nativeElement.style.height = "100%";
        }
    };
    IgxForOfDirective.prototype.ngOnDestroy = function () {
        if (this.hScroll) {
            this.hScroll.removeEventListener("scroll", this.func);
        }
    };
    IgxForOfDirective.prototype.ngOnChanges = function (changes) {
        var forOf = "igxForOf";
        if (forOf in changes) {
            var value = changes[forOf].currentValue;
            if (!this._differ && value) {
                try {
                    this._differ = this._differs.find(value).create(this.igxForTrackBy);
                }
                catch (e) {
                    throw new Error("Cannot find a differ supporting object \"" + value + "\" of type \"" + getTypeNameForDebugging(value) + "\".\n                     NgFor only supports binding to Iterables such as Arrays.");
                }
            }
        }
        var containerSize = "igxForContainerSize";
        if (containerSize in changes && !changes[containerSize].firstChange) {
            this._recalcOnContainerChange(changes);
        }
    };
    IgxForOfDirective.prototype.ngDoCheck = function () {
        if (this._differ) {
            var changes = this._differ.diff(this.igxForOf);
            if (changes) {
                if (this.igxForScrollOrientation === "horizontal") {
                    this.initHCache(this.igxForOf);
                }
                this._applyChanges(changes);
            }
        }
    };
    IgxForOfDirective.prototype.addScrollTop = function (addTop) {
        if (addTop === 0 && this.igxForScrollOrientation === "horizontal") {
            return;
        }
        var containerSize = parseInt(this.igxForContainerSize, 10);
        var maxVirtScrollTop = this._virtHeight - containerSize;
        this._bScrollInternal = true;
        this._virtScrollTop += addTop;
        this._virtScrollTop = this._virtScrollTop > 0 ?
            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :
            0;
        this.vh.instance.elementRef.nativeElement.scrollTop += addTop / this._virtHeightRatio;
        if (Math.abs(addTop / this._virtHeightRatio) < 1) {
            var scrollOffset = this.fixedUpdateAllRows(this._virtScrollTop, this._virtHeight);
            scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;
            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + "px";
        }
        var curScrollTop = this.vh.instance.elementRef.nativeElement.scrollTop;
        var maxRealScrollTop = this.vh.instance.elementRef.nativeElement.scrollHeight - containerSize;
        if ((this._virtScrollTop > 0 && curScrollTop === 0) ||
            (this._virtScrollTop < maxVirtScrollTop && curScrollTop === maxRealScrollTop)) {
            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;
        }
        else if (this._virtScrollTop === 0 && curScrollTop > 0) {
            this.vh.instance.elementRef.nativeElement.scrollTop = 0;
        }
        else if (this._virtScrollTop === maxVirtScrollTop && curScrollTop < maxRealScrollTop) {
            this.vh.instance.elementRef.nativeElement.scrollTop = maxRealScrollTop;
        }
    };
    IgxForOfDirective.prototype.scrollTo = function (index) {
        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length)) {
            return;
        }
        if (this.igxForScrollOrientation === "horizontal") {
            this.hScroll.scrollLeft = this.hCache[index] + 1;
        }
        else {
            this._bScrollInternal = true;
            this._virtScrollTop = index * parseInt(this.igxForItemSize, 10);
            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop * this._virtHeightRatio;
        }
    };
    IgxForOfDirective.prototype.scrollNext = function () {
        this.scrollTo(this.state.startIndex + 1);
    };
    IgxForOfDirective.prototype.scrollPrev = function () {
        this.scrollTo(this.state.startIndex - 1);
    };
    IgxForOfDirective.prototype.getColumnScrollLeft = function (colIndex) {
        return this.hCache[colIndex];
    };
    IgxForOfDirective.prototype.getVerticalScroll = function () {
        if (this.vh) {
            return this.vh.instance.elementRef.nativeElement;
        }
        return null;
    };
    IgxForOfDirective.prototype.getHorizontalScroll = function () {
        return this.getElement(this._viewContainer, "igx-horizontal-virtual-helper");
    };
    IgxForOfDirective.prototype.onScroll = function (event) {
        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {
            return;
        }
        var containerSize = parseInt(this.igxForContainerSize, 10);
        var maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;
        var realPercentScrolled = event.target.scrollTop / maxRealScrollTop;
        if (!this._bScrollInternal) {
            var maxVirtScrollTop = this._virtHeight - containerSize;
            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;
        }
        else {
            this._bScrollInternal = false;
        }
        var scrollOffset = this.fixedUpdateAllRows(this._virtScrollTop, this._virtHeight);
        if (scrollOffset === undefined) {
            return;
        }
        scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;
        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + "px";
        this.dc.changeDetectorRef.detectChanges();
        this.onChunkLoad.emit(this.state);
    };
    IgxForOfDirective.prototype.fixedUpdateAllRows = function (inScrollTop, scrollHeight) {
        var ratio = scrollHeight !== 0 ? inScrollTop / scrollHeight : 0;
        var embeddedViewCopy = Object.assign([], this._embeddedViews);
        var count = this.isRemote ? this.totalItemCount : this.igxForOf.length;
        var currIndex = Math.floor(ratio * count);
        var endingIndex = this.state.chunkSize + currIndex;
        var bUpdatedStart = this.state.startIndex !== currIndex;
        this.state.startIndex = currIndex;
        if (endingIndex > this.igxForOf.length) {
            endingIndex = this.igxForOf.length;
            this._isScrolledToBottom = true;
            this.applyChunkSizeChange();
        }
        else if (this._isScrolledToBottom && bUpdatedStart) {
            if (endingIndex < this.igxForOf.length) {
                this._isScrolledToBottom = false;
            }
            this.applyChunkSizeChange();
        }
        if (bUpdatedStart) {
            this.onChunkPreload.emit(this.state);
        }
        if (this.isRemote) {
            return;
        }
        for (var i = this.state.startIndex; i < endingIndex && this.igxForOf[i] !== undefined; i++) {
            var input = this.igxForOf[i];
            var embView = embeddedViewCopy.shift();
            var cntx = embView.context;
            cntx.$implicit = input;
            cntx.index = this.igxForOf.indexOf(input);
        }
        return inScrollTop - this.state.startIndex * (scrollHeight / count);
    };
    IgxForOfDirective.prototype.onHScroll = function (event) {
        if (!parseInt(this.hScroll.children[0].style.width, 10)) {
            return;
        }
        var curScrollLeft = event.target.scrollLeft;
        var scrollOffset = this.fixedUpdateAllCols(curScrollLeft);
        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + "px";
        this.dc.changeDetectorRef.detectChanges();
        this.onChunkLoad.emit();
    };
    IgxForOfDirective.prototype.fixedUpdateAllCols = function (inScrollLeft) {
        this.state.startIndex = this.getHorizontalIndexAt(inScrollLeft, this.hCache, 0);
        this.onChunkPreload.emit(this.state);
        this.applyChunkSizeChange();
        var embeddedViewCopy = Object.assign([], this._embeddedViews);
        var endingIndex = this.state.chunkSize + this.state.startIndex;
        for (var i = this.state.startIndex; i < endingIndex && this.igxForOf[i] !== undefined; i++) {
            var input = this.igxForOf[i];
            var embView = embeddedViewCopy.shift();
            var cntx = embView.context;
            cntx.$implicit = input;
            cntx.index = this.igxForOf.indexOf(input);
        }
        return inScrollLeft - this.hCache[this.state.startIndex];
    };
    IgxForOfDirective.prototype.onWheel = function (event) {
        if (this.igxForScrollOrientation === "horizontal") {
            var scrollStepX = 10;
            this.hScroll.scrollLeft += Math.sign(event.deltaX) * scrollStepX;
        }
        else if (this.igxForScrollOrientation === "vertical") {
            var scrollStepY = /Edge/.test(navigator.userAgent) ? 25 : 100;
            this.vh.instance.elementRef.nativeElement.scrollTop += Math.sign(event.deltaY) * scrollStepY / this._virtHeightRatio;
            var curScrollTop = this.vh.instance.elementRef.nativeElement.scrollTop;
            var maxScrollTop = this.vh.instance.height - this.vh.instance.elementRef.nativeElement.offsetHeight;
            if (0 < curScrollTop && curScrollTop < maxScrollTop) {
                event.preventDefault();
            }
        }
    };
    IgxForOfDirective.prototype.onTouchStart = function (event) {
        if (typeof MSGesture === "function") {
            return false;
        }
        if (this.igxForScrollOrientation === "horizontal") {
            this._lastTouchX = event.changedTouches[0].screenX;
        }
        else if (this.igxForScrollOrientation === "vertical") {
            this._lastTouchY = event.changedTouches[0].screenY;
        }
    };
    IgxForOfDirective.prototype.onTouchMove = function (event) {
        if (typeof MSGesture === "function") {
            return false;
        }
        if (this.igxForScrollOrientation === "horizontal") {
            var movedX = this._lastTouchX - event.changedTouches[0].screenX;
            this.hScroll.scrollLeft += movedX;
            this._lastTouchX = event.changedTouches[0].screenX;
        }
        else if (this.igxForScrollOrientation === "vertical") {
            var maxScrollTop = this.vh.instance.elementRef.nativeElement.children[0].offsetHeight -
                this.dc.instance._viewContainer.element.nativeElement.offsetHeight;
            var movedY = this._lastTouchY - event.changedTouches[0].screenY;
            this.vh.instance.elementRef.nativeElement.scrollTop += movedY;
            if (this.vh.instance.elementRef.nativeElement.scrollTop !== 0 &&
                this.vh.instance.elementRef.nativeElement.scrollTop !== maxScrollTop) {
                event.preventDefault();
            }
            this._lastTouchY = event.changedTouches[0].screenY;
        }
    };
    IgxForOfDirective.prototype.onPointerDown = function (event) {
        if (!event || (event.pointerType !== 2 && event.pointerType !== "touch") ||
            typeof MSGesture !== "function") {
            return true;
        }
        if (!this._gestureObject) {
            this._gestureObject = new MSGesture();
            this._gestureObject.target = this.dc.instance._viewContainer.element.nativeElement;
        }
        event.target.setPointerCapture(this._pointerCapture = event.pointerId);
        this._gestureObject.addPointer(this._pointerCapture);
    };
    IgxForOfDirective.prototype.onPointerUp = function (event) {
        if (!this._pointerCapture) {
            return true;
        }
        event.target.releasePointerCapture(this._pointerCapture);
        delete this._pointerCapture;
    };
    IgxForOfDirective.prototype.onMSGestureStart = function (event) {
        if (this.igxForScrollOrientation === "horizontal") {
            this._lastTouchX = event.screenX;
        }
        else if (this.igxForScrollOrientation === "vertical") {
            this._lastTouchY = event.screenY;
        }
        return false;
    };
    IgxForOfDirective.prototype.onMSGestureChange = function (event) {
        if (this.igxForScrollOrientation === "horizontal") {
            var movedX = this._lastTouchX - event.screenX;
            this.hScroll.scrollLeft += movedX;
            this._lastTouchX = event.screenX;
        }
        else if (this.igxForScrollOrientation === "vertical") {
            var movedY = this._lastTouchY - event.screenY;
            this.vh.instance.elementRef.nativeElement.scrollTop += movedY;
            this._lastTouchY = event.screenY;
        }
        return false;
    };
    Object.defineProperty(IgxForOfDirective.prototype, "igxForTrackBy", {
        get: function () { return this._trackByFn; },
        set: function (fn) { this._trackByFn = fn; },
        enumerable: true,
        configurable: true
    });
    IgxForOfDirective.prototype._applyChanges = function (changes) {
        this.applyChunkSizeChange();
        this._recalcScrollBarSize();
        if (this.igxForOf && this.igxForOf.length && this.dc) {
            var embeddedViewCopy = Object.assign([], this._embeddedViews);
            var startIndex = this.state.startIndex;
            var endIndex = this.state.chunkSize + this.state.startIndex;
            if (this.isRemote) {
                startIndex = 0;
                endIndex = this.igxForOf.length;
            }
            for (var i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {
                var input = this.igxForOf[i];
                var embView = embeddedViewCopy.shift();
                var cntx = embView.context;
                cntx.$implicit = input;
                cntx.index = this.igxForOf.indexOf(input);
            }
            this.dc.changeDetectorRef.detectChanges();
            this.onChunkLoad.emit();
        }
    };
    IgxForOfDirective.prototype._calcMaxBrowserHeight = function () {
        var div = document.createElement("div");
        var style = div.style;
        style.position = "absolute";
        style.top = "9999999999999999px";
        document.body.appendChild(div);
        var size = Math.abs(div.getBoundingClientRect()["top"]);
        document.body.removeChild(div);
        return size;
    };
    IgxForOfDirective.prototype._calculateChunkSize = function () {
        var chunkSize = 0;
        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {
            if (this.igxForScrollOrientation === "horizontal") {
                var vc = this.igxForScrollContainer ?
                    this.igxForScrollContainer._viewContainer :
                    this._viewContainer;
                var hScroll = this.getElement(vc, "igx-horizontal-virtual-helper");
                var left = hScroll && hScroll.scrollLeft !== 0 ?
                    hScroll.scrollLeft + parseInt(this.igxForContainerSize, 10) :
                    parseInt(this.igxForContainerSize, 10);
                if (!this.hCache) {
                    this.initHCache(this.igxForOf);
                }
                var endIndex = this.getHorizontalIndexAt(left, this.hCache, 0) + 1;
                chunkSize = endIndex - this.state.startIndex;
                chunkSize = chunkSize > this.igxForOf.length ? this.igxForOf.length : chunkSize;
            }
            else {
                chunkSize = Math.ceil(parseInt(this.igxForContainerSize, 10) /
                    parseInt(this.igxForItemSize, 10));
                if (chunkSize !== 0 && !this._isScrolledToBottom) {
                    chunkSize++;
                }
                if (chunkSize > this.igxForOf.length) {
                    chunkSize = this.igxForOf.length;
                }
            }
        }
        else {
            chunkSize = this.igxForOf.length;
        }
        return chunkSize;
    };
    IgxForOfDirective.prototype.getElement = function (viewref, nodeName) {
        var elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);
        return elem.length > 0 ? elem[0] : null;
    };
    IgxForOfDirective.prototype.initHCache = function (cols) {
        var totalWidth = 0;
        var i = 0;
        this.hCache = [];
        this.hCache.push(0);
        for (i; i < cols.length; i++) {
            totalWidth += parseInt(cols[i].width, 10) || 0;
            this.hCache.push(totalWidth);
        }
        return totalWidth;
    };
    IgxForOfDirective.prototype.getHorizontalIndexAt = function (left, set, index) {
        var midIdx;
        var midLeft;
        if (set.length === 1) {
            return index;
        }
        midIdx = Math.floor(set.length / 2);
        midLeft = set[midIdx];
        return this.getHorizontalIndexAt(left, midLeft >= left ? set.slice(0, midIdx) : set.slice(midIdx), midLeft >= left ? index : index + midIdx);
    };
    IgxForOfDirective.prototype._recalcScrollBarSize = function () {
        var count = this.isRemote ? this.totalItemCount : this.igxForOf.length;
        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);
        if (this.igxForScrollOrientation === "horizontal") {
            var totalWidth = this.igxForContainerSize ? this.initHCache(this.igxForOf) : 0;
            this.hScroll.children[0].style.width = totalWidth + "px";
        }
        if (this.igxForScrollOrientation === "vertical") {
            this.vh.instance.elementRef.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + "px";
            this.vh.instance.height = this._calcHeight();
        }
    };
    IgxForOfDirective.prototype._calcHeight = function () {
        var count = this.totalItemCount || this.igxForOf.length;
        var height = count * parseInt(this.igxForItemSize, 10);
        this._virtHeight = height;
        if (height > this._maxHeight) {
            this._virtHeightRatio = height / this._maxHeight;
            height = this._maxHeight;
        }
        return height;
    };
    IgxForOfDirective.prototype._recalcOnContainerChange = function (changes) {
        this.dc.instance._viewContainer.element.nativeElement.style.top = "0px";
        this.dc.instance._viewContainer.element.nativeElement.style.left = "0px";
        if (this.hCache) {
            this.state.startIndex = 0;
            if (this.hScroll.scrollLeft !== 0) {
                this.scrollTo(0);
            }
            else {
                this.fixedUpdateAllCols(0);
            }
            this.cdr.detectChanges();
            return;
        }
        this.applyChunkSizeChange();
        this._recalcScrollBarSize();
    };
    IgxForOfDirective.prototype.removeLastElem = function () {
        var oldElem = this._embeddedViews.pop();
        oldElem.destroy();
        this.state.chunkSize--;
    };
    IgxForOfDirective.prototype.addLastElem = function () {
        var elemIndex = this.state.startIndex + this.state.chunkSize;
        if (elemIndex > this.igxForOf.length) {
            return;
        }
        if (elemIndex === this.igxForOf.length) {
            elemIndex = this.igxForOf.length - 1;
        }
        var input = this.igxForOf[elemIndex];
        var embeddedView = this.dc.instance._vcr.createEmbeddedView(this._template, { $implicit: input, index: elemIndex });
        this._embeddedViews.push(embeddedView);
        this.state.chunkSize++;
    };
    IgxForOfDirective.prototype.applyChunkSizeChange = function () {
        var chunkSize = this.isRemote ? this.igxForOf.length : this._calculateChunkSize();
        if (chunkSize > this.state.chunkSize) {
            var diff = chunkSize - this.state.chunkSize;
            for (var i = 0; i < diff; i++) {
                this.addLastElem();
            }
        }
        else if (chunkSize < this.state.chunkSize) {
            var diff = this.state.chunkSize - chunkSize;
            for (var i = 0; i < diff; i++) {
                this.removeLastElem();
            }
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], IgxForOfDirective.prototype, "igxForOf", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxForOfDirective.prototype, "igxForScrollOrientation", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxForOfDirective.prototype, "igxForScrollContainer", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxForOfDirective.prototype, "igxForContainerSize", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxForOfDirective.prototype, "igxForItemSize", void 0);
    __decorate([
        deprecateDecorators_1.DeprecateProperty("igxForRemote is deprecated, setting this property is no longer needed for remote virtualization"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxForOfDirective.prototype, "igxForRemote", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxForOfDirective.prototype, "onChunkLoad", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxForOfDirective.prototype, "onChunkPreload", void 0);
    __decorate([
        core_1.ViewChild(display_container_1.DisplayContainerComponent),
        __metadata("design:type", display_container_1.DisplayContainerComponent)
    ], IgxForOfDirective.prototype, "displayContiner", void 0);
    __decorate([
        core_1.ViewChild(virtual_helper_component_1.VirtualHelperComponent),
        __metadata("design:type", virtual_helper_component_1.VirtualHelperComponent)
    ], IgxForOfDirective.prototype, "virtualHelper", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Function])
    ], IgxForOfDirective.prototype, "igxForTrackBy", null);
    IgxForOfDirective = __decorate([
        core_1.Directive({ selector: "[igxFor][igxForOf]" }),
        __metadata("design:paramtypes", [core_1.ViewContainerRef,
            core_1.TemplateRef,
            core_1.IterableDiffers,
            core_1.ComponentFactoryResolver,
            core_1.ChangeDetectorRef,
            core_1.NgZone])
    ], IgxForOfDirective);
    return IgxForOfDirective;
}());
exports.IgxForOfDirective = IgxForOfDirective;
function getTypeNameForDebugging(type) {
    var name = "name";
    return type[name] || typeof type;
}
exports.getTypeNameForDebugging = getTypeNameForDebugging;
var IgxForOfModule = (function () {
    function IgxForOfModule() {
    }
    IgxForOfModule = __decorate([
        core_1.NgModule({
            declarations: [IgxForOfDirective, display_container_1.DisplayContainerComponent, virtual_helper_component_1.VirtualHelperComponent, horizontal_virtual_helper_component_1.HVirtualHelperComponent],
            entryComponents: [display_container_1.DisplayContainerComponent, virtual_helper_component_1.VirtualHelperComponent, horizontal_virtual_helper_component_1.HVirtualHelperComponent],
            exports: [IgxForOfDirective],
            imports: [common_1.CommonModule]
        })
    ], IgxForOfModule);
    return IgxForOfModule;
}());
exports.IgxForOfModule = IgxForOfModule;


/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isFunction;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isFunction(x) {
    return typeof x === 'function';
}
//# sourceMappingURL=isFunction.js.map


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return config; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var _enable_super_gross_mode_that_will_cause_bad_things = false;
/**
 * The global configuration object for RxJS, used to configure things
 * like what Promise contructor should used to create Promises
 */
var config = {
    /**
     * The promise constructor used by default for methods such as
     * {@link toPromise} and {@link forEach}
     */
    Promise: undefined,
    /**
     * If true, turns on synchronous error rethrowing, which is a deprecated behavior
     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe
     * call in a try/catch block. It also enables producer interference, a nasty bug
     * where a multicast can be broken for all observers by a downstream consumer with
     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME
     * FOR MIGRATION REASONS.
     */
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            var error = /*@__PURE__*/ new Error();
            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};
//# sourceMappingURL=config.js.map


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ObjectUnsubscribedError; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */

/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var _this = _super.call(this, 'object unsubscribed') || this;
        _this.name = 'ObjectUnsubscribedError';
        Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);
        return _this;
    }
    return ObjectUnsubscribedError;
}(Error));

//# sourceMappingURL=ObjectUnsubscribedError.js.map


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function applyIgnoreCase(a, ignoreCase) {
    a = a || "";
    return ignoreCase ? ("" + a).toLowerCase() : a;
}
function getDateParts(date, dateFormat) {
    var res = {
        day: null,
        hours: null,
        milliseconds: null,
        minutes: null,
        month: null,
        seconds: null,
        year: null
    };
    if (!date || !dateFormat) {
        return res;
    }
    if (dateFormat.indexOf("y") >= 0) {
        res.year = date.getFullYear();
    }
    if (dateFormat.indexOf("M") >= 0) {
        res.month = date.getMonth();
    }
    if (dateFormat.indexOf("d") >= 0) {
        res.day = date.getDate();
    }
    if (dateFormat.indexOf("h") >= 0) {
        res.hours = date.getHours();
    }
    if (dateFormat.indexOf("m") >= 0) {
        res.minutes = date.getMinutes();
    }
    if (dateFormat.indexOf("s") >= 0) {
        res.seconds = date.getSeconds();
    }
    if (dateFormat.indexOf("f") >= 0) {
        res.milliseconds = date.getMilliseconds();
    }
    return res;
}
exports.FilteringCondition = {
    boolean: {
        true: function (target) {
            return target;
        },
        false: function (target) {
            return !target && target !== null && target !== undefined;
        },
        null: function (target) {
            return target === null;
        },
        notNull: function (target) {
            return target !== null;
        },
        empty: function (target) {
            return target === null || target === undefined;
        },
        notEmpty: function (target) {
            return target !== null && target !== undefined;
        }
    },
    date: {
        equals: function (target, searchVal) {
            var targetp = getDateParts(target, "yMd");
            var searchp = getDateParts(searchVal, "yMd");
            return targetp.year === searchp.year &&
                targetp.month === searchp.month &&
                targetp.day === searchp.day;
        },
        doesNotEqual: function (target, searchVal) {
            return !exports.FilteringCondition.date.equals(target, searchVal);
        },
        before: function (target, searchVal) {
            return target < searchVal;
        },
        after: function (target, searchVal) {
            return target > searchVal;
        },
        today: function (target) {
            var d = getDateParts(target, "yMd");
            var now = getDateParts(new Date(), "yMd");
            return d.year === now.year &&
                d.month === now.month &&
                d.day === now.day;
        },
        yesterday: function (target) {
            var td = getDateParts(target, "yMd");
            var y = (function (d) { return new Date(d.setDate(d.getDate() - 1)); })(new Date());
            var yesterday = getDateParts(y, "yMd");
            return td.year === yesterday.year &&
                td.month === yesterday.month &&
                td.day === yesterday.day;
        },
        thisMonth: function (target) {
            var d = getDateParts(target, "yM");
            var now = getDateParts(new Date(), "yM");
            return d.year === now.year &&
                d.month === now.month;
        },
        lastMonth: function (target) {
            var d = getDateParts(target, "yM");
            var now = getDateParts(new Date(), "yM");
            if (!now.month) {
                now.month = 11;
                now.year -= 1;
            }
            else {
                now.month--;
            }
            return d.year === now.year &&
                d.month === now.month;
        },
        nextMonth: function (target) {
            var d = getDateParts(target, "yM");
            var now = getDateParts(new Date(), "yM");
            if (now.month === 11) {
                now.month = 0;
                now.year += 1;
            }
            else {
                now.month++;
            }
            return d.year === now.year &&
                d.month === now.month;
        },
        thisYear: function (target) {
            var d = getDateParts(target, "y");
            var now = getDateParts(new Date(), "y");
            return d.year === now.year;
        },
        lastYear: function (target) {
            var d = getDateParts(target, "y");
            var now = getDateParts(new Date(), "y");
            return d.year === now.year - 1;
        },
        nextYear: function (target) {
            var d = getDateParts(target, "y");
            var now = getDateParts(new Date(), "y");
            return d.year === now.year + 1;
        },
        null: function (target) {
            return target === null;
        },
        notNull: function (target) {
            return target !== null;
        },
        empty: function (target) {
            return target === null || target === undefined;
        },
        notEmpty: function (target) {
            return target !== null && target !== undefined;
        }
    },
    number: {
        equals: function (target, searchVal) {
            return target === searchVal;
        },
        doesNotEqual: function (target, searchVal) {
            return target !== searchVal;
        },
        greaterThan: function (target, searchVal) {
            return target > searchVal;
        },
        lessThan: function (target, searchVal) {
            return target < searchVal;
        },
        greaterThanOrEqualTo: function (target, searchVal) {
            return target >= searchVal;
        },
        lessThanOrEqualTo: function (target, searchVal) {
            return target <= searchVal;
        },
        null: function (target) {
            return target === null;
        },
        notNull: function (target) {
            return target !== null;
        },
        empty: function (target) {
            return target === null || target === undefined || isNaN(target);
        },
        notEmpty: function (target) {
            return target !== null && target !== undefined && !isNaN(target);
        }
    },
    string: {
        contains: function (target, searchVal, ignoreCase) {
            var search = applyIgnoreCase(searchVal, ignoreCase);
            target = applyIgnoreCase(target, ignoreCase);
            return target.indexOf(search) !== -1;
        },
        startsWith: function (target, searchVal, ignoreCase) {
            var search = applyIgnoreCase(searchVal, ignoreCase);
            target = applyIgnoreCase(target, ignoreCase);
            return target.startsWith(search);
        },
        endsWith: function (target, searchVal, ignoreCase) {
            var search = applyIgnoreCase(searchVal, ignoreCase);
            target = applyIgnoreCase(target, ignoreCase);
            return target.endsWith(search);
        },
        doesNotContain: function (target, searchVal, ignoreCase) {
            var search = applyIgnoreCase(searchVal, ignoreCase);
            target = applyIgnoreCase(target, ignoreCase);
            return target.indexOf(search) === -1;
        },
        equals: function (target, searchVal, ignoreCase) {
            var search = applyIgnoreCase(searchVal, ignoreCase);
            target = applyIgnoreCase(target, ignoreCase);
            return target === search;
        },
        doesNotEqual: function (target, searchVal, ignoreCase) {
            var search = applyIgnoreCase(searchVal, ignoreCase);
            target = applyIgnoreCase(target, ignoreCase);
            return target !== search;
        },
        null: function (target) {
            return target === null;
        },
        notNull: function (target) {
            return target !== null;
        },
        empty: function (target) {
            return target === null || target === undefined || target.length === 0;
        },
        notEmpty: function (target) {
            return target !== null && target !== undefined && target.length > 0;
        }
    }
};
exports.STRING_FILTERS = {
    contains: function (target, searchVal, ignoreCase) {
        var search = applyIgnoreCase(searchVal, ignoreCase);
        target = applyIgnoreCase(target, ignoreCase);
        return target.indexOf(search) !== -1;
    },
    startsWith: function (target, searchVal, ignoreCase) {
        var search = applyIgnoreCase(searchVal, ignoreCase);
        target = applyIgnoreCase(target, ignoreCase);
        return target.startsWith(search);
    },
    endsWith: function (target, searchVal, ignoreCase) {
        var search = applyIgnoreCase(searchVal, ignoreCase);
        target = applyIgnoreCase(target, ignoreCase);
        return target.endsWith(search);
    },
    doesNotContain: function (target, searchVal, ignoreCase) {
        var search = applyIgnoreCase(searchVal, ignoreCase);
        target = applyIgnoreCase(target, ignoreCase);
        return target.indexOf(search) === -1;
    },
    equals: function (target, searchVal, ignoreCase) {
        var search = applyIgnoreCase(searchVal, ignoreCase);
        target = applyIgnoreCase(target, ignoreCase);
        return target === search;
    },
    doesNotEqual: function (target, searchVal, ignoreCase) {
        var search = applyIgnoreCase(searchVal, ignoreCase);
        target = applyIgnoreCase(target, ignoreCase);
        return target !== search;
    },
    null: function (target) {
        return target === null;
    },
    notNull: function (target) {
        return target !== null;
    },
    empty: function (target) {
        return target === null || target === undefined || target.length === 0;
    },
    notEmpty: function (target) {
        return target !== null && target !== undefined && target.length > 0;
    }
};
exports.NUMBER_FILTERS = {
    equals: function (target, searchVal) {
        return target === searchVal;
    },
    doesNotEqual: function (target, searchVal) {
        return target !== searchVal;
    },
    greaterThan: function (target, searchVal) {
        return target > searchVal;
    },
    lessThan: function (target, searchVal) {
        return target < searchVal;
    },
    greaterThanOrEqualTo: function (target, searchVal) {
        return target >= searchVal;
    },
    lessThanOrEqualTo: function (target, searchVal) {
        return target <= searchVal;
    },
    null: function (target) {
        return target === null;
    },
    notNull: function (target) {
        return target !== null;
    },
    empty: function (target) {
        return target === null || target === undefined || isNaN(target);
    },
    notEmpty: function (target) {
        return target !== null && target !== undefined && !isNaN(target);
    }
};
exports.BOOLEAN_FILTERS = {
    true: function (target) {
        return target;
    },
    false: function (target) {
        return !target && target !== null && target !== undefined;
    },
    null: function (target) {
        return target === null;
    },
    notNull: function (target) {
        return target !== null;
    },
    empty: function (target) {
        return target === null || target === undefined;
    },
    notEmpty: function (target) {
        return target !== null && target !== undefined;
    }
};
exports.DATE_FILTERS = {
    equals: function (target, searchVal) {
        var targetp = getDateParts(target, "yMd");
        var searchp = getDateParts(searchVal, "yMd");
        return targetp.year === searchp.year &&
            targetp.month === searchp.month &&
            targetp.day === searchp.day;
    },
    doesNotEqual: function (target, searchVal) {
        return !exports.DATE_FILTERS.equals(target, searchVal);
    },
    before: function (target, searchVal) {
        return target < searchVal;
    },
    after: function (target, searchVal) {
        return target > searchVal;
    },
    today: function (target) {
        var d = getDateParts(target, "yMd");
        var now = getDateParts(new Date(), "yMd");
        return d.year === now.year &&
            d.month === now.month &&
            d.day === now.day;
    },
    yesterday: function (target) {
        var td = getDateParts(target, "yMd");
        var y = (function (d) { return new Date(d.setDate(d.getDate() - 1)); })(new Date());
        var yesterday = getDateParts(y, "yMd");
        return td.year === yesterday.year &&
            td.month === yesterday.month &&
            td.day === yesterday.day;
    },
    thisMonth: function (target) {
        var d = getDateParts(target, "yM");
        var now = getDateParts(new Date(), "yM");
        return d.year === now.year &&
            d.month === now.month;
    },
    lastMonth: function (target) {
        var d = getDateParts(target, "yM");
        var now = getDateParts(new Date(), "yM");
        if (!now.month) {
            now.month = 11;
            now.year -= 1;
        }
        else {
            now.month--;
        }
        return d.year === now.year &&
            d.month === now.month;
    },
    nextMonth: function (target) {
        var d = getDateParts(target, "yM");
        var now = getDateParts(new Date(), "yM");
        if (now.month === 11) {
            now.month = 0;
            now.year += 1;
        }
        else {
            now.month++;
        }
        return d.year === now.year &&
            d.month === now.month;
    },
    thisYear: function (target) {
        var d = getDateParts(target, "y");
        var now = getDateParts(new Date(), "y");
        return d.year === now.year;
    },
    lastYear: function (target) {
        var d = getDateParts(target, "y");
        var now = getDateParts(new Date(), "y");
        return d.year === now.year - 1;
    },
    nextYear: function (target) {
        var d = getDateParts(target, "y");
        var now = getDateParts(new Date(), "y");
        return d.year === now.year + 1;
    },
    null: function (target) {
        return target === null;
    },
    notNull: function (target) {
        return target !== null;
    },
    empty: function (target) {
        return target === null || target === undefined;
    },
    notEmpty: function (target) {
        return target !== null && target !== undefined;
    }
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(27);
var sorting_expression_interface_1 = __webpack_require__(26);
var SortingStrategy = (function () {
    function SortingStrategy() {
    }
    SortingStrategy.prototype.sort = function (data, expressions) {
        return this.sortDataRecursive(data, expressions);
    };
    SortingStrategy.prototype.groupBy = function (data, expressions) {
        return this.groupDataRecursive(data, expressions, 0, null);
    };
    SortingStrategy.prototype.compareValues = function (a, b) {
        var an = (a === null || a === undefined);
        var bn = (b === null || b === undefined);
        if (an) {
            if (bn) {
                return 0;
            }
            return -1;
        }
        else if (bn) {
            return 1;
        }
        return a > b ? 1 : a < b ? -1 : 0;
    };
    SortingStrategy.prototype.compareObjects = function (obj1, obj2, key, reverse, ignoreCase) {
        var a = obj1[key];
        var b = obj2[key];
        if (ignoreCase) {
            a = a && a.toLowerCase ? a.toLowerCase() : a;
            b = b && b.toLowerCase ? b.toLowerCase() : b;
        }
        return reverse * this.compareValues(a, b);
    };
    SortingStrategy.prototype.arraySort = function (data, compareFn) {
        return data.sort(compareFn);
    };
    SortingStrategy.prototype.groupedRecordsByExpression = function (data, index, expression) {
        var i;
        var groupval;
        var res = [];
        var key = expression.fieldName;
        var len = data.length;
        res.push(data[index]);
        groupval = data[index][key];
        index++;
        for (i = index; i < len; i++) {
            if (this.compareValues(data[i][key], groupval) === 0) {
                res.push(data[i]);
            }
            else {
                break;
            }
        }
        return res;
    };
    SortingStrategy.prototype.sortByFieldExpression = function (data, expression) {
        var _this = this;
        var key = expression.fieldName;
        var ignoreCase = expression.ignoreCase ?
            data[0] && (typeof data[0][key] === "string" ||
                data[0][key] === null ||
                data[0][key] === undefined) :
            false;
        var reverse = (expression.dir === sorting_expression_interface_1.SortingDirection.Desc ? -1 : 1);
        var cmpFunc = function (obj1, obj2) {
            return _this.compareObjects(obj1, obj2, key, reverse, ignoreCase);
        };
        return this.arraySort(data, cmpFunc);
    };
    SortingStrategy.prototype.sortDataRecursive = function (data, expressions, expressionIndex) {
        if (expressionIndex === void 0) { expressionIndex = 0; }
        var i;
        var j;
        var expr;
        var gbData;
        var gbDataLen;
        var exprsLen = expressions.length;
        var dataLen = data.length;
        expressionIndex = expressionIndex || 0;
        if (expressionIndex >= exprsLen || dataLen <= 1) {
            return data;
        }
        expr = expressions[expressionIndex];
        data = this.sortByFieldExpression(data, expr);
        if (expressionIndex === exprsLen - 1) {
            return data;
        }
        for (i = 0; i < dataLen; i++) {
            gbData = this.groupedRecordsByExpression(data, i, expr);
            gbDataLen = gbData.length;
            if (gbDataLen > 1) {
                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);
            }
            for (j = 0; j < gbDataLen; j++) {
                data[i + j] = gbData[j];
            }
            i += gbDataLen - 1;
        }
        return data;
    };
    SortingStrategy.prototype.groupDataRecursive = function (data, expressions, level, parent) {
        var i = 0;
        var result = [];
        while (i < data.length) {
            var group = this.groupedRecordsByExpression(data, i, expressions[level]);
            var groupRow = {
                expression: expressions[level],
                level: level,
                records: utils_1.cloneArray(group),
                value: group[0][expressions[level].fieldName],
                __groupParent: parent
            };
            if (level < expressions.length - 1) {
                result = result.concat(this.groupDataRecursive(group, expressions, level + 1, groupRow));
            }
            else {
                for (var _i = 0, group_1 = group; _i < group_1.length; _i++) {
                    var groupItem = group_1[_i];
                    groupItem["__groupParent"] = groupRow;
                    result.push(groupItem);
                }
            }
            i += group.length;
        }
        return result;
    };
    return SortingStrategy;
}());
exports.SortingStrategy = SortingStrategy;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var calendar_component_1 = __webpack_require__(49);
var IgxCalendarYearDirective = (function () {
    function IgxCalendarYearDirective(calendar) {
        this.calendar = calendar;
        this.onYearSelection = new core_1.EventEmitter();
    }
    Object.defineProperty(IgxCalendarYearDirective.prototype, "defaultCSS", {
        get: function () {
            return !this.isCurrentYear;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarYearDirective.prototype, "currentCSS", {
        get: function () {
            return this.isCurrentYear;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarYearDirective.prototype, "isCurrentYear", {
        get: function () {
            return this.calendar.isCurrentYear(this.value);
        },
        enumerable: true,
        configurable: true
    });
    IgxCalendarYearDirective.prototype.onClick = function () {
        this.onYearSelection.emit(this.value);
    };
    __decorate([
        core_1.Input("igxCalendarYear"),
        __metadata("design:type", Date)
    ], IgxCalendarYearDirective.prototype, "value", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxCalendarYearDirective.prototype, "onYearSelection", void 0);
    __decorate([
        core_1.HostBinding("class.igx-calendar__year"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxCalendarYearDirective.prototype, "defaultCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-calendar__year--current"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxCalendarYearDirective.prototype, "currentCSS", null);
    __decorate([
        core_1.HostListener("click"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxCalendarYearDirective.prototype, "onClick", null);
    IgxCalendarYearDirective = __decorate([
        core_1.Directive({
            selector: "[igxCalendarYear]"
        }),
        __param(0, core_1.Host()),
        __metadata("design:paramtypes", [calendar_component_1.IgxCalendarComponent])
    ], IgxCalendarYearDirective);
    return IgxCalendarYearDirective;
}());
exports.IgxCalendarYearDirective = IgxCalendarYearDirective;
var IgxCalendarMonthDirective = (function () {
    function IgxCalendarMonthDirective(calendar) {
        this.calendar = calendar;
        this.onMonthSelection = new core_1.EventEmitter();
    }
    Object.defineProperty(IgxCalendarMonthDirective.prototype, "defaultCSS", {
        get: function () {
            return !this.isCurrentMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarMonthDirective.prototype, "currentCSS", {
        get: function () {
            return this.isCurrentMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarMonthDirective.prototype, "isCurrentMonth", {
        get: function () {
            return this.calendar.isCurrentMonth(this.value);
        },
        enumerable: true,
        configurable: true
    });
    IgxCalendarMonthDirective.prototype.onClick = function () {
        this.onMonthSelection.emit(this.value);
    };
    __decorate([
        core_1.Input("igxCalendarMonth"),
        __metadata("design:type", Date)
    ], IgxCalendarMonthDirective.prototype, "value", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCalendarMonthDirective.prototype, "index", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxCalendarMonthDirective.prototype, "onMonthSelection", void 0);
    __decorate([
        core_1.HostBinding("class.igx-calendar__month"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxCalendarMonthDirective.prototype, "defaultCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-calendar__month--current"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxCalendarMonthDirective.prototype, "currentCSS", null);
    __decorate([
        core_1.HostListener("click"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxCalendarMonthDirective.prototype, "onClick", null);
    IgxCalendarMonthDirective = __decorate([
        core_1.Directive({
            selector: "[igxCalendarMonth]"
        }),
        __param(0, core_1.Host()),
        __metadata("design:paramtypes", [calendar_component_1.IgxCalendarComponent])
    ], IgxCalendarMonthDirective);
    return IgxCalendarMonthDirective;
}());
exports.IgxCalendarMonthDirective = IgxCalendarMonthDirective;
var IgxCalendarDateDirective = (function () {
    function IgxCalendarDateDirective(calendar, elementRef) {
        this.calendar = calendar;
        this.elementRef = elementRef;
        this.onDateSelection = new core_1.EventEmitter();
        this.tabindex = 0;
        this._selected = false;
    }
    Object.defineProperty(IgxCalendarDateDirective.prototype, "selected", {
        get: function () {
            var date = this.date.date;
            if (!this.calendar.value) {
                return;
            }
            if (this.calendar.selection === "single") {
                this._selected = this.calendar.value.toDateString() === date.toDateString();
            }
            else {
                this._selected = this.calendar.value
                    .some(function (each) { return each.toDateString() === date.toDateString(); });
            }
            return this._selected;
        },
        set: function (value) {
            this._selected = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarDateDirective.prototype, "isCurrentMonth", {
        get: function () {
            return this.date.isCurrentMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarDateDirective.prototype, "isPreviousMonth", {
        get: function () {
            return this.date.isPrevMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarDateDirective.prototype, "isNextMonth", {
        get: function () {
            return this.date.isNextMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarDateDirective.prototype, "nativeElement", {
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarDateDirective.prototype, "isInactive", {
        get: function () {
            return this.date.isNextMonth || this.date.isPrevMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarDateDirective.prototype, "isToday", {
        get: function () {
            var today = new Date(Date.now());
            var date = this.date.date;
            return (date.getFullYear() === today.getFullYear() &&
                date.getMonth() === today.getMonth() &&
                date.getDate() === today.getDate());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarDateDirective.prototype, "isWeekend", {
        get: function () {
            var day = this.date.date.getDay();
            return day === 0 || day === 6;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarDateDirective.prototype, "defaultCSS", {
        get: function () {
            return this.date.isCurrentMonth && !(this.isWeekend && this.selected);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarDateDirective.prototype, "isInactiveCSS", {
        get: function () {
            return this.isInactive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarDateDirective.prototype, "isTodayCSS", {
        get: function () {
            return this.isToday && !this.selected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarDateDirective.prototype, "isSelectedCSS", {
        get: function () {
            return this.selected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarDateDirective.prototype, "isWeekendCSS", {
        get: function () {
            return this.isWeekend;
        },
        enumerable: true,
        configurable: true
    });
    IgxCalendarDateDirective.prototype.onSelect = function () {
        this.onDateSelection.emit(this.date);
    };
    __decorate([
        core_1.Input("igxCalendarDate"),
        __metadata("design:type", Object)
    ], IgxCalendarDateDirective.prototype, "date", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxCalendarDateDirective.prototype, "onDateSelection", void 0);
    __decorate([
        core_1.HostBinding("attr.tabindex"),
        __metadata("design:type", Object)
    ], IgxCalendarDateDirective.prototype, "tabindex", void 0);
    __decorate([
        core_1.HostBinding("class.igx-calendar__date"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxCalendarDateDirective.prototype, "defaultCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-calendar__date--inactive"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxCalendarDateDirective.prototype, "isInactiveCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-calendar__date--current"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxCalendarDateDirective.prototype, "isTodayCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-calendar__date--selected"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxCalendarDateDirective.prototype, "isSelectedCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-calendar__date--weekend"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxCalendarDateDirective.prototype, "isWeekendCSS", null);
    __decorate([
        core_1.HostListener("click"),
        core_1.HostListener("keydown.enter"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxCalendarDateDirective.prototype, "onSelect", null);
    IgxCalendarDateDirective = __decorate([
        core_1.Directive({
            selector: "[igxCalendarDate]"
        }),
        __param(0, core_1.Host()),
        __metadata("design:paramtypes", [calendar_component_1.IgxCalendarComponent, core_1.ElementRef])
    ], IgxCalendarDateDirective);
    return IgxCalendarDateDirective;
}());
exports.IgxCalendarDateDirective = IgxCalendarDateDirective;
var IgxCalendarHeaderTemplateDirective = (function () {
    function IgxCalendarHeaderTemplateDirective(template) {
        this.template = template;
    }
    IgxCalendarHeaderTemplateDirective = __decorate([
        core_1.Directive({
            selector: "[igxCalendarHeader]"
        }),
        __metadata("design:paramtypes", [core_1.TemplateRef])
    ], IgxCalendarHeaderTemplateDirective);
    return IgxCalendarHeaderTemplateDirective;
}());
exports.IgxCalendarHeaderTemplateDirective = IgxCalendarHeaderTemplateDirective;
var IgxCalendarSubheaderTemplateDirective = (function () {
    function IgxCalendarSubheaderTemplateDirective(template) {
        this.template = template;
    }
    IgxCalendarSubheaderTemplateDirective = __decorate([
        core_1.Directive({
            selector: "[igxCalendarSubheader]"
        }),
        __metadata("design:paramtypes", [core_1.TemplateRef])
    ], IgxCalendarSubheaderTemplateDirective);
    return IgxCalendarSubheaderTemplateDirective;
}());
exports.IgxCalendarSubheaderTemplateDirective = IgxCalendarSubheaderTemplateDirective;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var core_1 = __webpack_require__(0);
var forms_1 = __webpack_require__(7);
var platform_browser_1 = __webpack_require__(50);
var main_1 = __webpack_require__(51);
var calendar_1 = __webpack_require__(77);
var calendar_directives_1 = __webpack_require__(48);
var NEXT_ID = 0;
var CalendarView;
(function (CalendarView) {
    CalendarView[CalendarView["DEFAULT"] = 0] = "DEFAULT";
    CalendarView[CalendarView["YEAR"] = 1] = "YEAR";
    CalendarView[CalendarView["DECADE"] = 2] = "DECADE";
})(CalendarView = exports.CalendarView || (exports.CalendarView = {}));
var CalendarSelection;
(function (CalendarSelection) {
    CalendarSelection["SINGLE"] = "single";
    CalendarSelection["MULTI"] = "multi";
    CalendarSelection["RANGE"] = "range";
})(CalendarSelection = exports.CalendarSelection || (exports.CalendarSelection = {}));
var CalendarHammerConfig = (function (_super) {
    __extends(CalendarHammerConfig, _super);
    function CalendarHammerConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.overrides = {
            pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }
        };
        return _this;
    }
    return CalendarHammerConfig;
}(platform_browser_1.HammerGestureConfig));
exports.CalendarHammerConfig = CalendarHammerConfig;
var IgxCalendarComponent = (function () {
    function IgxCalendarComponent() {
        this.id = "igx-calendar-" + NEXT_ID++;
        this.locale = "en";
        this.vertical = false;
        this.onSelection = new core_1.EventEmitter();
        this.tabindex = 0;
        this.role = "grid";
        this.ariaLabelledBy = "calendar";
        this._activeView = CalendarView.DEFAULT;
        this._selection = CalendarSelection.SINGLE;
        this._rangeStarted = false;
        this._monthAction = "";
        this._formatOptions = {
            day: "numeric",
            month: "short",
            weekday: "short",
            year: "numeric"
        };
        this._formatViews = {
            day: false,
            month: true,
            year: false
        };
        this._onTouchedCallback = function () { };
        this._onChangeCallback = function () { };
        this.calendarModel = new calendar_1.Calendar();
    }
    IgxCalendarComponent_1 = IgxCalendarComponent;
    Object.defineProperty(IgxCalendarComponent.prototype, "weekStart", {
        get: function () {
            return this.calendarModel.firstWeekDay;
        },
        set: function (value) {
            this.calendarModel.firstWeekDay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "selection", {
        get: function () {
            return this._selection;
        },
        set: function (value) {
            switch (value) {
                case "single":
                    this.selectedDates = null;
                    break;
                case "multi":
                case "range":
                    this.selectedDates = [];
                    break;
                default:
                    throw new Error("Invalid selection value");
            }
            this._onChangeCallback(this.selectedDates);
            this._rangeStarted = false;
            this._selection = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "viewDate", {
        get: function () {
            return this._viewDate;
        },
        set: function (value) {
            this._viewDate = new Date(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "value", {
        get: function () {
            return this.selectedDates;
        },
        set: function (value) {
            this.selectDate(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "formatOptions", {
        get: function () {
            return this._formatOptions;
        },
        set: function (formatOptions) {
            this._formatOptions = Object.assign(this._formatOptions, formatOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "formatViews", {
        get: function () {
            return this._formatViews;
        },
        set: function (formatViews) {
            this._formatViews = Object.assign(this._formatViews, formatViews);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "styleClass", {
        get: function () {
            if (this.vertical) {
                return "igx-calendar--vertical";
            }
            return "igx-calendar";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "months", {
        get: function () {
            var start = new Date(this._viewDate.getFullYear(), 0, 1);
            var result = [];
            for (var i = 0; i < 12; i++) {
                result.push(start);
                start = this.calendarModel.timedelta(start, "month", 1);
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "decade", {
        get: function () {
            var result = [];
            var start = this._viewDate.getFullYear() - 3;
            var end = this._viewDate.getFullYear() + 4;
            for (var _i = 0, _a = calendar_1.range(start, end); _i < _a.length; _i++) {
                var year = _a[_i];
                result.push(new Date(year, this._viewDate.getMonth(), this._viewDate.getDate()));
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "isDefaultView", {
        get: function () {
            return this._activeView === CalendarView.DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "isYearView", {
        get: function () {
            return this._activeView === CalendarView.YEAR;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "isDecadeView", {
        get: function () {
            return this._activeView === CalendarView.DECADE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "activeView", {
        get: function () {
            return this._activeView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "monthAction", {
        get: function () {
            return this._monthAction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "headerTemplate", {
        get: function () {
            if (this.headerTemplateDirective) {
                return this.headerTemplateDirective.template;
            }
            return null;
        },
        set: function (directive) {
            this.headerTemplateDirective = directive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "subheaderTemplate", {
        get: function () {
            if (this.subheaderTemplateDirective) {
                return this.subheaderTemplateDirective.template;
            }
            return null;
        },
        set: function (directive) {
            this.subheaderTemplateDirective = directive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "headerContext", {
        get: function () {
            var date = this.headerDate;
            return this.generateContext(date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "context", {
        get: function () {
            var date = this._viewDate;
            return this.generateContext(date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "headerDate", {
        get: function () {
            return this.selectedDates ? this.selectedDates : new Date();
        },
        enumerable: true,
        configurable: true
    });
    IgxCalendarComponent.prototype.ngOnInit = function () {
        var today = new Date();
        this.calendarModel.firstWeekDay = this.weekStart;
        this._viewDate = this._viewDate ? this._viewDate : today;
    };
    IgxCalendarComponent.prototype.registerOnChange = function (fn) {
        this._onChangeCallback = fn;
    };
    IgxCalendarComponent.prototype.registerOnTouched = function (fn) {
        this._onTouchedCallback = fn;
    };
    IgxCalendarComponent.prototype.writeValue = function (value) {
        this.selectedDates = value;
    };
    IgxCalendarComponent.prototype.formattedMonth = function (value) {
        if (this._formatViews.month) {
            return value.toLocaleString(this.locale, { month: this._formatOptions.month });
        }
        return "" + value.getMonth();
    };
    IgxCalendarComponent.prototype.formattedDate = function (value) {
        if (this._formatViews.day) {
            return value.toLocaleString(this.locale, { day: this._formatOptions.day });
        }
        return "" + value.getDate();
    };
    IgxCalendarComponent.prototype.formattedYear = function (value) {
        if (this._formatViews.year) {
            return value.toLocaleString(this.locale, { year: this._formatOptions.year });
        }
        return "" + value.getFullYear();
    };
    IgxCalendarComponent.prototype.isCurrentMonth = function (value) {
        return this.viewDate.getMonth() === value.getMonth();
    };
    IgxCalendarComponent.prototype.isCurrentYear = function (value) {
        return this.viewDate.getFullYear() === value.getFullYear();
    };
    IgxCalendarComponent.prototype.previousMonth = function () {
        this._viewDate = this.calendarModel.timedelta(this._viewDate, "month", -1);
        this._monthAction = "prev";
    };
    IgxCalendarComponent.prototype.nextMonth = function () {
        this._viewDate = this.calendarModel.timedelta(this._viewDate, "month", 1);
        this._monthAction = "next";
    };
    IgxCalendarComponent.prototype.previousYear = function () {
        this._viewDate = this.calendarModel.timedelta(this._viewDate, "year", -1);
    };
    IgxCalendarComponent.prototype.nextYear = function () {
        this._viewDate = this.calendarModel.timedelta(this._viewDate, "year", 1);
    };
    IgxCalendarComponent.prototype.getFormattedDate = function () {
        var date = this.headerDate;
        return {
            monthday: date.toLocaleString(this.locale, { month: this._formatOptions.month, day: this._formatOptions.day }),
            weekday: date.toLocaleString(this.locale, { weekday: this._formatOptions.weekday })
        };
    };
    IgxCalendarComponent.prototype.childClicked = function (instance) {
        if (instance.isPrevMonth) {
            this.previousMonth();
        }
        if (instance.isNextMonth) {
            this.nextMonth();
        }
        this.selectDate(instance.date);
        this.onSelection.emit(this.selectedDates);
    };
    IgxCalendarComponent.prototype.animationDone = function () {
        var date = this.dates.find(function (d) { return d.selected; });
        if (date) {
            date.nativeElement.focus();
        }
    };
    IgxCalendarComponent.prototype.selectDate = function (value) {
        switch (this.selection) {
            case "single":
                this.selectSingle(value);
                break;
            case "multi":
                this.selectMultiple(value);
                break;
            case "range":
                this.selectRange(value);
                break;
        }
    };
    IgxCalendarComponent.prototype.generateWeekHeader = function () {
        var dayNames = [];
        var rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];
        for (var _i = 0, rv_1 = rv; _i < rv_1.length; _i++) {
            var day = rv_1[_i];
            dayNames.push(day.date.toLocaleString(this.locale, { weekday: this._formatOptions.weekday }));
        }
        return dayNames;
    };
    Object.defineProperty(IgxCalendarComponent.prototype, "getCalendarMonth", {
        get: function () {
            return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);
        },
        enumerable: true,
        configurable: true
    });
    IgxCalendarComponent.prototype.changeYear = function (event) {
        this._viewDate = new Date(event.getFullYear(), this._viewDate.getMonth(), 1, 0, 0, 0);
        this._activeView = CalendarView.DEFAULT;
    };
    IgxCalendarComponent.prototype.changeMonth = function (event) {
        this._viewDate = new Date(this._viewDate.getFullYear(), event.getMonth(), 1, 0, 0, 0);
        this._activeView = CalendarView.DEFAULT;
    };
    IgxCalendarComponent.prototype.activeViewYear = function () {
        this._activeView = CalendarView.YEAR;
    };
    IgxCalendarComponent.prototype.activeViewDecade = function () {
        this._activeView = CalendarView.DECADE;
    };
    IgxCalendarComponent.prototype.onScroll = function (event) {
        event.preventDefault();
        event.stopPropagation();
        var delta = event.deltaY < 0 ? 1 : -1;
        this.generateYearRange(delta);
    };
    IgxCalendarComponent.prototype.onPan = function (event) {
        var delta = event.deltaY < 0 ? 1 : -1;
        this.generateYearRange(delta);
    };
    IgxCalendarComponent.prototype.onKeydownPageUp = function (event) {
        event.preventDefault();
        this.previousMonth();
    };
    IgxCalendarComponent.prototype.onKeydownPageDown = function (event) {
        event.preventDefault();
        this.nextMonth();
    };
    IgxCalendarComponent.prototype.onKeydownShiftPageUp = function (event) {
        event.preventDefault();
        this.previousYear();
    };
    IgxCalendarComponent.prototype.onKeydownShiftPageDown = function (event) {
        event.preventDefault();
        this.nextYear();
    };
    IgxCalendarComponent.prototype.onKeydownArrowUp = function (event) {
        event.preventDefault();
        var node = this.dates.find(function (date) { return date.nativeElement === event.target; });
        var index = this.dates.toArray().indexOf(node);
        if (node && index > -1 && index - 7 > -1) {
            this.dates.toArray()[index - 7].nativeElement.focus();
        }
    };
    IgxCalendarComponent.prototype.onKeydownArrowDown = function (event) {
        event.preventDefault();
        var node = this.dates.find(function (date) { return date.nativeElement === event.target; });
        var index = this.dates.toArray().indexOf(node);
        if (node && index > -1 && index + 7 < this.dates.length) {
            this.dates.toArray()[index + 7].nativeElement.focus();
        }
    };
    IgxCalendarComponent.prototype.onKeydownArrowLeft = function (event) {
        event.preventDefault();
        var node = this.dates.find(function (date) { return date.nativeElement === event.target; });
        var index = this.dates.toArray().indexOf(node);
        if (node && index > -1 && index > 0) {
            this.dates.toArray()[index - 1].nativeElement.focus();
        }
    };
    IgxCalendarComponent.prototype.onKeydownArrowRight = function (event) {
        event.preventDefault();
        var node = this.dates.find(function (date) { return date.nativeElement === event.target; });
        var index = this.dates.toArray().indexOf(node);
        if (node && index > -1 && index < this.dates.length - 1) {
            this.dates.toArray()[index + 1].nativeElement.focus();
        }
    };
    IgxCalendarComponent.prototype.onKeydownHome = function (event) {
        event.preventDefault();
        this.dates
            .filter(function (date) { return date.isCurrentMonth; })
            .shift().nativeElement.focus();
    };
    IgxCalendarComponent.prototype.onKeydownEnd = function (event) {
        event.preventDefault();
        this.dates
            .filter(function (date) { return date.isCurrentMonth; })
            .pop().nativeElement.focus();
    };
    IgxCalendarComponent.prototype.dateTracker = function (index, item) {
        return item.date.getMonth() + "--" + item.date.getDate();
    };
    IgxCalendarComponent.prototype.rowTracker = function (index, item) {
        return "" + item[index].date.getMonth() + item[index].date.getDate();
    };
    IgxCalendarComponent.prototype.selectSingle = function (value) {
        this.selectedDates = value;
        this._onChangeCallback(this.selectedDates);
    };
    IgxCalendarComponent.prototype.selectMultiple = function (value) {
        if (Array.isArray(value)) {
            this.selectedDates = this.selectedDates.concat(value);
        }
        else {
            if (this.selectedDates.every(function (date) { return date.toDateString() !== value.toDateString(); })) {
                this.selectedDates.push(value);
            }
            else {
                this.selectedDates = this.selectedDates.filter(function (date) { return date.toDateString() !== value.toDateString(); });
            }
        }
        this._onChangeCallback(this.selectedDates);
    };
    IgxCalendarComponent.prototype.selectRange = function (value) {
        var start;
        var end;
        if (Array.isArray(value)) {
            this._rangeStarted = false;
            value.sort(function (a, b) { return a.valueOf() - b.valueOf(); });
            start = value.shift();
            end = value.pop();
            this.selectedDates = [start];
            this.selectedDates = [start].concat(this.generateDateRange(start, end));
        }
        else {
            if (!this._rangeStarted) {
                this._rangeStarted = true;
                this.selectedDates = [value];
            }
            else {
                this._rangeStarted = false;
                if (this.selectedDates[0].toDateString() === value.toDateString()) {
                    this.selectedDates = [];
                    this._onChangeCallback(this.selectedDates);
                    return;
                }
                this.selectedDates.push(value);
                this.selectedDates.sort(function (a, b) { return a.valueOf() - b.valueOf(); });
                start = this.selectedDates.shift();
                end = this.selectedDates.pop();
                this.selectedDates = [start].concat(this.generateDateRange(start, end));
            }
        }
        this._onChangeCallback(this.selectedDates);
    };
    IgxCalendarComponent.prototype.generateContext = function (value) {
        var _this = this;
        var formatObject = __assign({ monthView: function () { return _this.activeViewYear(); }, yearView: function () { return _this.activeViewDecade(); } }, this.calendarModel.formatToParts(value, this.locale, this._formatOptions, ["era", "year", "month", "day", "weekday"]));
        return { $implicit: formatObject };
    };
    IgxCalendarComponent.prototype.generateDateRange = function (start, end) {
        var result = [];
        while (start.toDateString() !== end.toDateString()) {
            start = this.calendarModel.timedelta(start, "day", 1);
            result.push(start);
        }
        return result;
    };
    IgxCalendarComponent.prototype.generateYearRange = function (delta) {
        var currentYear = new Date().getFullYear();
        if ((delta > 0 && this._viewDate.getFullYear() - currentYear >= 95) ||
            (delta < 0 && currentYear - this._viewDate.getFullYear() >= 95)) {
            return;
        }
        this._viewDate = this.calendarModel.timedelta(this._viewDate, "year", delta);
    };
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCalendarComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], IgxCalendarComponent.prototype, "weekStart", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCalendarComponent.prototype, "locale", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], IgxCalendarComponent.prototype, "selection", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Date),
        __metadata("design:paramtypes", [Date])
    ], IgxCalendarComponent.prototype, "viewDate", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxCalendarComponent.prototype, "value", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxCalendarComponent.prototype, "formatOptions", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxCalendarComponent.prototype, "formatViews", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCalendarComponent.prototype, "vertical", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxCalendarComponent.prototype, "onSelection", void 0);
    __decorate([
        core_1.ViewChildren(core_1.forwardRef(function () { return calendar_directives_1.IgxCalendarDateDirective; }), { read: calendar_directives_1.IgxCalendarDateDirective }),
        __metadata("design:type", core_1.QueryList)
    ], IgxCalendarComponent.prototype, "dates", void 0);
    __decorate([
        core_1.HostBinding("attr.tabindex"),
        __metadata("design:type", Object)
    ], IgxCalendarComponent.prototype, "tabindex", void 0);
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxCalendarComponent.prototype, "role", void 0);
    __decorate([
        core_1.HostBinding("attr.aria-labelledby"),
        __metadata("design:type", Object)
    ], IgxCalendarComponent.prototype, "ariaLabelledBy", void 0);
    __decorate([
        core_1.HostBinding("class"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxCalendarComponent.prototype, "styleClass", null);
    __decorate([
        core_1.ContentChild(core_1.forwardRef(function () { return calendar_directives_1.IgxCalendarHeaderTemplateDirective; }), { read: calendar_directives_1.IgxCalendarHeaderTemplateDirective }),
        __metadata("design:type", calendar_directives_1.IgxCalendarHeaderTemplateDirective)
    ], IgxCalendarComponent.prototype, "headerTemplateDirective", void 0);
    __decorate([
        core_1.ContentChild(core_1.forwardRef(function () { return calendar_directives_1.IgxCalendarSubheaderTemplateDirective; }), { read: calendar_directives_1.IgxCalendarSubheaderTemplateDirective }),
        __metadata("design:type", calendar_directives_1.IgxCalendarSubheaderTemplateDirective)
    ], IgxCalendarComponent.prototype, "subheaderTemplateDirective", void 0);
    __decorate([
        core_1.HostListener("keydown.pageup", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxCalendarComponent.prototype, "onKeydownPageUp", null);
    __decorate([
        core_1.HostListener("keydown.pagedown", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxCalendarComponent.prototype, "onKeydownPageDown", null);
    __decorate([
        core_1.HostListener("keydown.shift.pageup", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxCalendarComponent.prototype, "onKeydownShiftPageUp", null);
    __decorate([
        core_1.HostListener("keydown.shift.pagedown", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxCalendarComponent.prototype, "onKeydownShiftPageDown", null);
    __decorate([
        core_1.HostListener("keydown.arrowup", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxCalendarComponent.prototype, "onKeydownArrowUp", null);
    __decorate([
        core_1.HostListener("keydown.arrowdown", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxCalendarComponent.prototype, "onKeydownArrowDown", null);
    __decorate([
        core_1.HostListener("keydown.arrowleft", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxCalendarComponent.prototype, "onKeydownArrowLeft", null);
    __decorate([
        core_1.HostListener("keydown.arrowright", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxCalendarComponent.prototype, "onKeydownArrowRight", null);
    __decorate([
        core_1.HostListener("keydown.home", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxCalendarComponent.prototype, "onKeydownHome", null);
    __decorate([
        core_1.HostListener("keydown.end", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxCalendarComponent.prototype, "onKeydownEnd", null);
    IgxCalendarComponent = IgxCalendarComponent_1 = __decorate([
        core_1.Component({
            animations: [
                animations_1.trigger("animateView", [
                    animations_1.transition("void => 0", animations_1.useAnimation(main_1.fadeIn)),
                    animations_1.transition("void => *", animations_1.useAnimation(main_1.scaleInCenter, {
                        params: {
                            duration: ".2s",
                            fromScale: .9
                        }
                    }))
                ]),
                animations_1.trigger("animateChange", [
                    animations_1.transition("* => prev", animations_1.useAnimation(main_1.slideInLeft, {
                        params: {
                            fromPosition: "translateX(-30%)"
                        }
                    })),
                    animations_1.transition("* => next", animations_1.useAnimation(main_1.slideInRight, {
                        params: {
                            fromPosition: "translateX(30%)"
                        }
                    }))
                ])
            ],
            providers: [
                {
                    multi: true,
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: IgxCalendarComponent_1
                },
                {
                    provide: platform_browser_1.HAMMER_GESTURE_CONFIG,
                    useClass: CalendarHammerConfig
                }
            ],
            selector: "igx-calendar",
            template: __webpack_require__(136)
        }),
        __metadata("design:paramtypes", [])
    ], IgxCalendarComponent);
    return IgxCalendarComponent;
    var IgxCalendarComponent_1;
}());
exports.IgxCalendarComponent = IgxCalendarComponent;


/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_50__;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(127));
__export(__webpack_require__(128));
__export(__webpack_require__(129));
__export(__webpack_require__(130));
__export(__webpack_require__(133));
__export(__webpack_require__(134));
__export(__webpack_require__(135));


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var main_1 = __webpack_require__(51);
var navigation_1 = __webpack_require__(25);
var button_directive_1 = __webpack_require__(17);
var ripple_directive_1 = __webpack_require__(12);
var dialog_directives_1 = __webpack_require__(144);
var DIALOG_ID = 0;
var IgxDialogComponent = (function () {
    function IgxDialogComponent(elementRef, navService) {
        this.elementRef = elementRef;
        this.navService = navService;
        this.id = "igx-dialog-" + DIALOG_ID++;
        this.title = "";
        this.message = "";
        this.leftButtonLabel = "";
        this.leftButtonType = "flat";
        this.leftButtonColor = "";
        this.leftButtonBackgroundColor = "";
        this.leftButtonRipple = "";
        this.rightButtonLabel = "";
        this.rightButtonType = "flat";
        this.rightButtonColor = "";
        this.rightButtonBackgroundColor = "";
        this.rightButtonRipple = "";
        this.closeOnOutsideSelect = false;
        this.onOpen = new core_1.EventEmitter();
        this.onClose = new core_1.EventEmitter();
        this.onLeftButtonSelect = new core_1.EventEmitter();
        this.onRightButtonSelect = new core_1.EventEmitter();
        this.tabindex = -1;
        this._isOpen = false;
        this._titleId = IgxDialogComponent_1.NEXT_ID++ + "_title";
    }
    IgxDialogComponent_1 = IgxDialogComponent;
    Object.defineProperty(IgxDialogComponent.prototype, "element", {
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDialogComponent.prototype, "state", {
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDialogComponent.prototype, "isOpen", {
        get: function () {
            return this._isOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDialogComponent.prototype, "role", {
        get: function () {
            if (this.leftButtonLabel !== "" && this.rightButtonLabel !== "") {
                return "dialog";
            }
            else if (this.leftButtonLabel !== "" ||
                this.rightButtonLabel !== "") {
                return "alertdialog";
            }
            else {
                return "alert";
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDialogComponent.prototype, "titleId", {
        get: function () {
            return this._titleId;
        },
        enumerable: true,
        configurable: true
    });
    IgxDialogComponent.prototype.open = function () {
        if (this.isOpen) {
            return;
        }
        this.toggleState("open");
        this.onOpen.emit({ dialog: this, event: null });
    };
    IgxDialogComponent.prototype.close = function () {
        if (!this.isOpen) {
            return;
        }
        this.toggleState("close");
        this.onClose.emit({ dialog: this, event: null });
    };
    IgxDialogComponent.prototype.toggle = function () {
        this.isOpen ? this.close() : this.open();
    };
    IgxDialogComponent.prototype.onDialogSelected = function (event) {
        event.stopPropagation();
        if (this.isOpen &&
            this.closeOnOutsideSelect &&
            event.target.classList.contains(IgxDialogComponent_1.DIALOG_CLASS)) {
            this.close();
        }
    };
    IgxDialogComponent.prototype.onInternalLeftButtonSelect = function (event) {
        this.onLeftButtonSelect.emit({ dialog: this, event: event });
    };
    IgxDialogComponent.prototype.onInternalRightButtonSelect = function (event) {
        this.onRightButtonSelect.emit({ dialog: this, event: event });
    };
    IgxDialogComponent.prototype.ngOnInit = function () {
        if (this.navService && this.id) {
            this.navService.add(this.id, this);
        }
    };
    IgxDialogComponent.prototype.ngOnDestroy = function () {
        if (this.navService && this.id) {
            this.navService.remove(this.id);
        }
    };
    IgxDialogComponent.prototype.toggleState = function (state) {
        this._state = state;
        this._isOpen = state === "open" ? true : false;
    };
    IgxDialogComponent.NEXT_ID = 1;
    IgxDialogComponent.DIALOG_CLASS = "igx-dialog";
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "title", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "message", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "leftButtonLabel", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "leftButtonType", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "leftButtonColor", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "leftButtonBackgroundColor", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "leftButtonRipple", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "rightButtonLabel", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "rightButtonType", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "rightButtonColor", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "rightButtonBackgroundColor", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "rightButtonRipple", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "closeOnOutsideSelect", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "onOpen", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "onClose", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "onLeftButtonSelect", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "onRightButtonSelect", void 0);
    __decorate([
        core_1.HostBinding("attr.tabindex"),
        __metadata("design:type", Object)
    ], IgxDialogComponent.prototype, "tabindex", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxDialogComponent.prototype, "isOpen", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxDialogComponent.prototype, "role", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxDialogComponent.prototype, "titleId", null);
    IgxDialogComponent = IgxDialogComponent_1 = __decorate([
        core_1.Component({
            animations: [
                animations_1.trigger("fadeInOut", [
                    animations_1.transition("void => open", animations_1.useAnimation(main_1.fadeIn)),
                    animations_1.transition("open => void", animations_1.useAnimation(main_1.fadeOut))
                ]),
                animations_1.trigger("slideIn", [
                    animations_1.transition("void => open", animations_1.useAnimation(main_1.slideInBottom))
                ])
            ],
            selector: "igx-dialog",
            template: __webpack_require__(145)
        }),
        __param(1, core_1.Optional()),
        __metadata("design:paramtypes", [core_1.ElementRef,
            navigation_1.IgxNavigationService])
    ], IgxDialogComponent);
    return IgxDialogComponent;
    var IgxDialogComponent_1;
}());
exports.IgxDialogComponent = IgxDialogComponent;
var IgxDialogModule = (function () {
    function IgxDialogModule() {
    }
    IgxDialogModule = __decorate([
        core_1.NgModule({
            declarations: [IgxDialogComponent, dialog_directives_1.IgxDialogTitleDirective, dialog_directives_1.IgxDialogActionsDirective],
            exports: [IgxDialogComponent, dialog_directives_1.IgxDialogTitleDirective, dialog_directives_1.IgxDialogActionsDirective],
            imports: [common_1.CommonModule, button_directive_1.IgxButtonModule, ripple_directive_1.IgxRippleModule]
        })
    ], IgxDialogModule);
    return IgxDialogModule;
}());
exports.IgxDialogModule = IgxDialogModule;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var core_1 = __webpack_require__(0);
var navigation_1 = __webpack_require__(25);
var IgxToggleDirective = (function () {
    function IgxToggleDirective(elementRef, builder, cdr, navigationService) {
        this.elementRef = elementRef;
        this.builder = builder;
        this.cdr = cdr;
        this.navigationService = navigationService;
        this.onOpen = new core_1.EventEmitter();
        this.onClose = new core_1.EventEmitter();
        this.collapsed = true;
    }
    Object.defineProperty(IgxToggleDirective.prototype, "element", {
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxToggleDirective.prototype, "hiddenClass", {
        get: function () {
            return this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxToggleDirective.prototype, "defaultClass", {
        get: function () {
            return !this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    IgxToggleDirective.prototype.open = function (fireEvents, handler) {
        var _this = this;
        if (!this.collapsed) {
            return;
        }
        var player = this.animationActivation();
        player.onStart(function () { return _this.collapsed = !_this.collapsed; });
        player.onDone(function () {
            player.destroy();
            if (fireEvents) {
                _this.onOpen.emit();
            }
        });
        player.play();
    };
    IgxToggleDirective.prototype.close = function (fireEvents, handler) {
        var _this = this;
        if (this.collapsed) {
            return;
        }
        var player = this.animationActivation();
        player.onDone(function () {
            _this.collapsed = !_this.collapsed;
            _this.cdr.markForCheck();
            player.destroy();
            if (fireEvents) {
                _this.onClose.emit();
            }
        });
        player.play();
    };
    IgxToggleDirective.prototype.toggle = function (fireEvents) {
        this.collapsed ? this.open(fireEvents) : this.close(fireEvents);
    };
    IgxToggleDirective.prototype.ngOnInit = function () {
        if (this.navigationService && this.id) {
            this.navigationService.add(this.id, this);
        }
    };
    IgxToggleDirective.prototype.ngOnDestroy = function () {
        if (this.navigationService && this.id) {
            this.navigationService.remove(this.id);
        }
    };
    IgxToggleDirective.prototype.animationActivation = function () {
        var animation;
        this.collapsed ?
            animation = this.openingAnimation() :
            animation = this.closingAnimation();
        return animation.create(this.elementRef.nativeElement);
    };
    IgxToggleDirective.prototype.openingAnimation = function () {
        return this.builder.build([
            animations_1.style({ transform: "scaleY(0) translateY(-48px)", transformOrigin: "100% 0%", opacity: 0 }),
            animations_1.animate("200ms ease-out", animations_1.style({ transform: "scaleY(1) translateY(0)", opacity: 1 }))
        ]);
    };
    IgxToggleDirective.prototype.closingAnimation = function () {
        return this.builder.build([
            animations_1.style({ transform: "translateY(0)", opacity: 1 }),
            animations_1.animate("120ms ease-in", animations_1.style({ transform: "translateY(-12px)", opacity: 0 }))
        ]);
    };
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxToggleDirective.prototype, "onOpen", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxToggleDirective.prototype, "onClose", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxToggleDirective.prototype, "collapsed", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxToggleDirective.prototype, "id", void 0);
    __decorate([
        core_1.HostBinding("class.igx-toggle--hidden"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxToggleDirective.prototype, "hiddenClass", null);
    __decorate([
        core_1.HostBinding("class.igx-toggle"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxToggleDirective.prototype, "defaultClass", null);
    IgxToggleDirective = __decorate([
        core_1.Directive({
            exportAs: "toggle",
            selector: "[igxToggle]"
        }),
        __param(3, core_1.Optional()),
        __metadata("design:paramtypes", [core_1.ElementRef,
            animations_1.AnimationBuilder,
            core_1.ChangeDetectorRef,
            navigation_1.IgxNavigationService])
    ], IgxToggleDirective);
    return IgxToggleDirective;
}());
exports.IgxToggleDirective = IgxToggleDirective;
var IgxToggleActionDirective = (function () {
    function IgxToggleActionDirective(element, navigationService) {
        this.element = element;
        this.navigationService = navigationService;
        this.closeOnOutsideClick = true;
    }
    Object.defineProperty(IgxToggleActionDirective.prototype, "target", {
        get: function () {
            if (typeof this._target === "string") {
                return this.navigationService.get(this._target);
            }
            return this._target;
        },
        set: function (target) {
            if (target !== null && target !== "") {
                this._target = target;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxToggleActionDirective.prototype.ngOnDestroy = function () {
        document.removeEventListener("click", this._handler, true);
    };
    IgxToggleActionDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (this.closeOnOutsideClick) {
            this._handler = function (evt) {
                if (_this.target.element.contains(evt.target) || _this.element.nativeElement.contains(evt.target)) {
                    return;
                }
                _this.target.close(true);
                document.removeEventListener("click", _this._handler, true);
            };
            document.addEventListener("click", this._handler, true);
        }
    };
    IgxToggleActionDirective.prototype.onClick = function () {
        this.target.toggle(true);
        if (this._handler) {
            document.addEventListener("click", this._handler, true);
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxToggleActionDirective.prototype, "closeOnOutsideClick", void 0);
    __decorate([
        core_1.Input("igxToggleAction"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxToggleActionDirective.prototype, "target", null);
    __decorate([
        core_1.HostListener("click"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxToggleActionDirective.prototype, "onClick", null);
    IgxToggleActionDirective = __decorate([
        core_1.Directive({
            exportAs: "toggle-action",
            selector: "[igxToggleAction]"
        }),
        __param(1, core_1.Optional()),
        __metadata("design:paramtypes", [core_1.ElementRef, navigation_1.IgxNavigationService])
    ], IgxToggleActionDirective);
    return IgxToggleActionDirective;
}());
exports.IgxToggleActionDirective = IgxToggleActionDirective;
var IgxToggleModule = (function () {
    function IgxToggleModule() {
    }
    IgxToggleModule = __decorate([
        core_1.NgModule({
            declarations: [IgxToggleDirective, IgxToggleActionDirective],
            exports: [IgxToggleDirective, IgxToggleActionDirective],
            providers: [navigation_1.IgxNavigationService]
        })
    ], IgxToggleModule);
    return IgxToggleModule;
}());
exports.IgxToggleModule = IgxToggleModule;


/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = hostReportError;
/**
 * Throws an error on another job so that it's picked up by the runtime's
 * uncaught error handling mechanism.
 * @param err the error to throw
 */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function hostReportError(err) {
    setTimeout(function () { throw err; });
}
//# sourceMappingURL=hostReportError.js.map


/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return rxSubscriber; });
/* unused harmony export $$rxSubscriber */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')
    ? /*@__PURE__*/ Symbol.for('rxSubscriber')
    : '@@rxSubscriber';
/**
 * @deprecated use rxSubscriber instead
 */
var $$rxSubscriber = rxSubscriber;
//# sourceMappingURL=rxSubscriber.js.map


/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = noop;
/* tslint:disable:no-empty */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function noop() { }
//# sourceMappingURL=noop.js.map


/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = of;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_isScheduler__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__fromArray__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__empty__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__scalar__ = __webpack_require__(168);
/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */




function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args[args.length - 1];
    if (Object(__WEBPACK_IMPORTED_MODULE_0__util_isScheduler__["a" /* isScheduler */])(scheduler)) {
        args.pop();
    }
    else {
        scheduler = undefined;
    }
    switch (args.length) {
        case 0:
            return Object(__WEBPACK_IMPORTED_MODULE_2__empty__["b" /* empty */])(scheduler);
        case 1:
            return scheduler ? Object(__WEBPACK_IMPORTED_MODULE_1__fromArray__["a" /* fromArray */])(args, scheduler) : Object(__WEBPACK_IMPORTED_MODULE_3__scalar__["a" /* scalar */])(args[0]);
        default:
            return Object(__WEBPACK_IMPORTED_MODULE_1__fromArray__["a" /* fromArray */])(args, scheduler);
    }
}
//# sourceMappingURL=of.js.map


/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AsyncSubject; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Subscription__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */



/**
 * @class AsyncSubject<T>
 */
var AsyncSubject = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AsyncSubject, _super);
    function AsyncSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.value = null;
        _this.hasNext = false;
        _this.hasCompleted = false;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    AsyncSubject.prototype._subscribe = function (subscriber) {
        if (this.hasError) {
            subscriber.error(this.thrownError);
            return __WEBPACK_IMPORTED_MODULE_2__Subscription__["a" /* Subscription */].EMPTY;
        }
        else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return __WEBPACK_IMPORTED_MODULE_2__Subscription__["a" /* Subscription */].EMPTY;
        }
        return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    };
    AsyncSubject.prototype.error = function (error) {
        if (!this.hasCompleted) {
            _super.prototype.error.call(this, error);
        }
    };
    AsyncSubject.prototype.complete = function () {
        this.hasCompleted = true;
        if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
        }
        _super.prototype.complete.call(this);
    };
    return AsyncSubject;
}(__WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]));

//# sourceMappingURL=AsyncSubject.js.map


/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return async; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AsyncAction__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__ = __webpack_require__(31);
/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */


/**
 *
 * Async Scheduler
 *
 * <span class="informal">Schedule task as if you used setTimeout(task, duration)</span>
 *
 * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript
 * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating
 * in intervals.
 *
 * If you just want to "defer" task, that is to perform it right after currently
 * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),
 * better choice will be the {@link asap} scheduler.
 *
 * @example <caption>Use async scheduler to delay task</caption>
 * const task = () => console.log('it works!');
 *
 * Rx.Scheduler.async.schedule(task, 2000);
 *
 * // After 2 seconds logs:
 * // "it works!"
 *
 *
 * @example <caption>Use async scheduler to repeat task in intervals</caption>
 * function task(state) {
 *   console.log(state);
 *   this.schedule(state + 1, 1000); // `this` references currently executing Action,
 *                                   // which we reschedule with new state and delay
 * }
 *
 * Rx.Scheduler.async.schedule(task, 3000, 0);
 *
 * // Logs:
 * // 0 after 3s
 * // 1 after 4s
 * // 2 after 5s
 * // 3 after 6s
 *
 * @static true
 * @name async
 * @owner Scheduler
 */
var async = /*@__PURE__*/ new __WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__["a" /* AsyncScheduler */](__WEBPACK_IMPORTED_MODULE_0__AsyncAction__["a" /* AsyncAction */]);
//# sourceMappingURL=async.js.map


/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = identity;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxListPanState;
(function (IgxListPanState) {
    IgxListPanState[IgxListPanState["NONE"] = 0] = "NONE";
    IgxListPanState[IgxListPanState["LEFT"] = 1] = "LEFT";
    IgxListPanState[IgxListPanState["RIGHT"] = 2] = "RIGHT";
})(IgxListPanState = exports.IgxListPanState || (exports.IgxListPanState = {}));
var IgxEmptyListTemplateDirective = (function () {
    function IgxEmptyListTemplateDirective(template) {
        this.template = template;
    }
    IgxEmptyListTemplateDirective = __decorate([
        core_1.Directive({
            selector: "[igxEmptyList]"
        }),
        __metadata("design:paramtypes", [core_1.TemplateRef])
    ], IgxEmptyListTemplateDirective);
    return IgxEmptyListTemplateDirective;
}());
exports.IgxEmptyListTemplateDirective = IgxEmptyListTemplateDirective;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxNavDrawerItemDirective = (function () {
    function IgxNavDrawerItemDirective() {
        this.active = false;
        this.isHeader = false;
        this.activeClass = "igx-nav-drawer__item--active";
    }
    Object.defineProperty(IgxNavDrawerItemDirective.prototype, "defaultCSS", {
        get: function () {
            return !this.active && !this.isHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavDrawerItemDirective.prototype, "currentCSS", {
        get: function () {
            return this.active && !this.isHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavDrawerItemDirective.prototype, "headerCSS", {
        get: function () {
            return this.isHeader;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input("active"),
        __metadata("design:type", Object)
    ], IgxNavDrawerItemDirective.prototype, "active", void 0);
    __decorate([
        core_1.Input("isHeader"),
        __metadata("design:type", Object)
    ], IgxNavDrawerItemDirective.prototype, "isHeader", void 0);
    __decorate([
        core_1.HostBinding("class.igx-nav-drawer__item"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxNavDrawerItemDirective.prototype, "defaultCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-nav-drawer__item--active"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxNavDrawerItemDirective.prototype, "currentCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-nav-drawer__item--header"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxNavDrawerItemDirective.prototype, "headerCSS", null);
    IgxNavDrawerItemDirective = __decorate([
        core_1.Directive({
            selector: "[igxDrawerItem]",
            exportAs: "igxDrawerItem"
        })
    ], IgxNavDrawerItemDirective);
    return IgxNavDrawerItemDirective;
}());
exports.IgxNavDrawerItemDirective = IgxNavDrawerItemDirective;
var IgxNavDrawerTemplateDirective = (function () {
    function IgxNavDrawerTemplateDirective(template) {
        this.template = template;
    }
    IgxNavDrawerTemplateDirective = __decorate([
        core_1.Directive({
            selector: "[igxDrawer]"
        }),
        __metadata("design:paramtypes", [core_1.TemplateRef])
    ], IgxNavDrawerTemplateDirective);
    return IgxNavDrawerTemplateDirective;
}());
exports.IgxNavDrawerTemplateDirective = IgxNavDrawerTemplateDirective;
var IgxNavDrawerMiniTemplateDirective = (function () {
    function IgxNavDrawerMiniTemplateDirective(template) {
        this.template = template;
    }
    IgxNavDrawerMiniTemplateDirective = __decorate([
        core_1.Directive({
            selector: "[igxDrawerMini]"
        }),
        __metadata("design:paramtypes", [core_1.TemplateRef])
    ], IgxNavDrawerMiniTemplateDirective);
    return IgxNavDrawerMiniTemplateDirective;
}());
exports.IgxNavDrawerMiniTemplateDirective = IgxNavDrawerMiniTemplateDirective;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var forms_1 = __webpack_require__(7);
var platform_browser_1 = __webpack_require__(50);
var dialog_component_1 = __webpack_require__(52);
var icon_1 = __webpack_require__(6);
var input_group_component_1 = __webpack_require__(41);
var time_picker_directives_1 = __webpack_require__(242);
var NEXT_ID = 0;
var TimePickerHammerConfig = (function (_super) {
    __extends(TimePickerHammerConfig, _super);
    function TimePickerHammerConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.overrides = {
            pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }
        };
        return _this;
    }
    return TimePickerHammerConfig;
}(platform_browser_1.HammerGestureConfig));
exports.TimePickerHammerConfig = TimePickerHammerConfig;
var IgxTimePickerComponent = (function () {
    function IgxTimePickerComponent() {
        this.id = "igx-time-picker-" + NEXT_ID++;
        this.isDisabled = false;
        this.okButtonLabel = "OK";
        this.cancelButtonLabel = "Cancel";
        this.itemsDelta = { hours: 1, minutes: 1 };
        this.isSpinLoop = true;
        this.vertical = false;
        this.format = "hh:mm tt";
        this.onValueChanged = new core_1.EventEmitter();
        this.onValidationFailed = new core_1.EventEmitter();
        this.onOpen = new core_1.EventEmitter();
        this._hourItems = [];
        this._minuteItems = [];
        this._ampmItems = [];
        this._isHourListLoop = this.isSpinLoop;
        this._isMinuteListLoop = this.isSpinLoop;
        this._hourView = [];
        this._minuteView = [];
        this._ampmView = [];
        this._onTouchedCallback = function () { };
        this._onChangeCallback = function () { };
    }
    IgxTimePickerComponent_1 = IgxTimePickerComponent;
    Object.defineProperty(IgxTimePickerComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (this._isValueValid(value)) {
                this._value = value;
                this._onChangeCallback(value);
            }
            else {
                var args = {
                    timePicker: this,
                    currentValue: value,
                    setThroughUI: false
                };
                this.onValidationFailed.emit(args);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTimePickerComponent.prototype, "styleClass", {
        get: function () {
            if (this.vertical) {
                return "igx-time-picker--vertical";
            }
            return "igx-time-picker";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTimePickerComponent.prototype, "displayTime", {
        get: function () {
            if (this.value) {
                return this._formatTime(this.value, this.format);
            }
            return "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTimePickerComponent.prototype, "hourView", {
        get: function () {
            return this._hourView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTimePickerComponent.prototype, "minuteView", {
        get: function () {
            return this._minuteView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTimePickerComponent.prototype, "ampmView", {
        get: function () {
            return this._ampmView;
        },
        enumerable: true,
        configurable: true
    });
    IgxTimePickerComponent.prototype.onClick = function () {
        var _this = this;
        if (this.value) {
            var foramttedTime = this._formatTime(this.value, this.format);
            var sections = foramttedTime.split(/[\s:]+/);
            this.selectedHour = sections[0];
            this.selectedMinute = sections[1];
            if (this._ampmItems !== null) {
                this.selectedAmPm = sections[2];
            }
        }
        if (this.selectedHour === undefined) {
            this.selectedHour = "" + this._hourItems[3];
        }
        if (this.selectedMinute === undefined) {
            this.selectedMinute = "" + this._minuteItems[3];
        }
        if (this.selectedAmPm === undefined && this._ampmItems !== null) {
            this.selectedAmPm = this._ampmItems[3];
        }
        this._prevSelectedHour = this.selectedHour;
        this._prevSelectedMinute = this.selectedMinute;
        this._prevSelectedAmPm = this.selectedAmPm;
        this._alert.open();
        this._onTouchedCallback();
        this._updateHourView(0, 7);
        this._updateMinuteView(0, 7);
        this._updateAmPmView(0, 7);
        if (this.selectedHour) {
            this.scrollHourIntoView(this.selectedHour);
        }
        if (this.selectedMinute) {
            this.scrollMinuteIntoView(this.selectedMinute);
        }
        if (this.selectedAmPm) {
            this.scrollAmPmIntoView(this.selectedAmPm);
        }
        setTimeout(function () {
            _this.hourList.nativeElement.focus();
        });
        this.onOpen.emit(this);
    };
    IgxTimePickerComponent.prototype.ngOnInit = function () {
        this._generateHours();
        this._generateMinutes();
        if (this.format.indexOf("tt") !== -1) {
            this._generateAmPm();
        }
    };
    IgxTimePickerComponent.prototype.ngOnDestroy = function () {
    };
    IgxTimePickerComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    IgxTimePickerComponent.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    IgxTimePickerComponent.prototype.registerOnTouched = function (fn) { this._onTouchedCallback = fn; };
    IgxTimePickerComponent.prototype._scrollItemIntoView = function (item, items, selectedItem, isListLoop, viewType) {
        var itemIntoView;
        if (items) {
            var index = (item === "AM" || item === "PM") ? items.indexOf(item) : items.indexOf(parseInt(item, 10));
            var view = void 0;
            if (index !== -1) {
                if (isListLoop) {
                    if (index > 0) {
                        selectedItem = this._itemToString(items[index - 1], viewType);
                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);
                    }
                    else {
                        selectedItem = this._itemToString(items[1], viewType);
                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);
                    }
                }
                else {
                    view = items.slice(index - 3, index + 4);
                    selectedItem = this._itemToString(items[index], viewType);
                    itemIntoView = { selectedItem: selectedItem, view: view };
                }
                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);
            }
        }
        return itemIntoView;
    };
    IgxTimePickerComponent.prototype._viewToString = function (view, viewType) {
        for (var i = 0; i < view.length; i++) {
            if (typeof (view[i]) !== "string") {
                view[i] = this._itemToString(view[i], viewType);
            }
        }
        return view;
    };
    IgxTimePickerComponent.prototype._itemToString = function (item, viewType) {
        if (item === null) {
            item = "";
        }
        else if (viewType && typeof (item) !== "string") {
            var leadZeroHour = (item < 10 && (this.format.indexOf("hh") !== -1 || this.format.indexOf("HH") !== -1));
            var leadZeroMinute = (item < 10 && this.format.indexOf("mm") !== -1);
            var leadZero = (viewType === "hour") ? leadZeroHour : leadZeroMinute;
            item = (leadZero) ? "0" + item : "" + item;
        }
        return item;
    };
    IgxTimePickerComponent.prototype._prevItem = function (items, selectedItem, isListLoop, viewType) {
        var selectedIndex = items.indexOf(parseInt(selectedItem, 10));
        var itemsCount = items.length;
        var view;
        if (selectedIndex === -1) {
            view = items.slice(0, 7);
            selectedItem = items[3];
        }
        else if (isListLoop) {
            if (selectedIndex - 4 < 0) {
                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);
                view = view.concat(items.slice(0, selectedIndex + 3));
            }
            else if (selectedIndex + 4 > itemsCount) {
                view = items.slice(selectedIndex - 4, itemsCount);
                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));
            }
            else {
                view = items.slice(selectedIndex - 4, selectedIndex + 3);
            }
            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];
        }
        else if (selectedIndex > 3) {
            view = items.slice(selectedIndex - 4, selectedIndex + 3);
            selectedItem = items[selectedIndex - 1];
        }
        else if (selectedIndex === 3) {
            view = items.slice(0, 7);
        }
        view = this._viewToString(view, viewType);
        selectedItem = this._itemToString(selectedItem, viewType);
        return {
            selectedItem: selectedItem,
            view: view
        };
    };
    IgxTimePickerComponent.prototype._nextItem = function (items, selectedItem, isListLoop, viewType) {
        var selectedIndex = items.indexOf(parseInt(selectedItem, 10));
        var itemsCount = items.length;
        var view;
        if (selectedIndex === -1) {
            view = items.slice(0, 7);
            selectedItem = items[3];
        }
        else if (isListLoop) {
            if (selectedIndex < 2) {
                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);
                view = view.concat(items.slice(0, selectedIndex + 5));
            }
            else if (selectedIndex + 4 >= itemsCount) {
                view = items.slice(selectedIndex - 2, itemsCount);
                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));
            }
            else {
                view = items.slice(selectedIndex - 2, selectedIndex + 5);
            }
            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];
        }
        else if (selectedIndex + 1 < itemsCount - 3) {
            view = items.slice(selectedIndex - 2, selectedIndex + 5);
            selectedItem = items[selectedIndex + 1];
        }
        else if (selectedIndex === itemsCount - 4) {
            view = items.slice(selectedIndex - 3, itemsCount);
        }
        view = this._viewToString(view, viewType);
        selectedItem = this._itemToString(selectedItem, viewType);
        return {
            selectedItem: selectedItem,
            view: view
        };
    };
    IgxTimePickerComponent.prototype._formatTime = function (value, format) {
        if (!value) {
            return "";
        }
        else {
            var hour = value.getHours();
            var minute = value.getMinutes();
            var formattedMinute = void 0;
            var formattedHour = void 0;
            var amPM = void 0;
            if (format.indexOf("h") !== -1) {
                amPM = (hour > 11) ? "PM" : "AM";
                if (hour > 12) {
                    hour -= 12;
                    formattedHour = hour < 10 && format.indexOf("hh") !== -1 ? "0" + hour : "" + hour;
                }
                else if (hour === 0) {
                    formattedHour = "12";
                }
                else if (hour < 10 && format.indexOf("hh") !== -1) {
                    formattedHour = "0" + hour;
                }
                else {
                    formattedHour = "" + hour;
                }
            }
            else {
                if (hour < 10 && format.indexOf("HH") !== -1) {
                    formattedHour = "0" + hour;
                }
                else {
                    formattedHour = "" + hour;
                }
            }
            formattedMinute = minute < 10 && format.indexOf("mm") !== -1 ? "0" + minute : "" + minute;
            return format.replace("hh", formattedHour).replace("h", formattedHour)
                .replace("HH", formattedHour).replace("H", formattedHour)
                .replace("mm", formattedMinute).replace("m", formattedMinute)
                .replace("tt", amPM);
        }
    };
    IgxTimePickerComponent.prototype._updateHourView = function (start, end) {
        this._hourView = this._viewToString(this._hourItems.slice(start, end), "hour");
    };
    IgxTimePickerComponent.prototype._updateMinuteView = function (start, end) {
        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), "minute");
    };
    IgxTimePickerComponent.prototype._updateAmPmView = function (start, end) {
        this._ampmView = this._ampmItems.slice(start, end);
    };
    IgxTimePickerComponent.prototype._addEmptyItems = function (items) {
        for (var i = 0; i < 3; i++) {
            items.push(null);
        }
    };
    IgxTimePickerComponent.prototype._generateHours = function () {
        var hourItemsCount = 24;
        if (this.format.indexOf("h") !== -1) {
            hourItemsCount = 13;
        }
        hourItemsCount /= this.itemsDelta.hours;
        var i = this.format.indexOf("H") !== -1 ? 0 : 1;
        if (hourItemsCount < 7 || !this.isSpinLoop) {
            this._addEmptyItems(this._hourItems);
            this._isHourListLoop = false;
        }
        if (hourItemsCount > 1) {
            for (i; i < hourItemsCount; i++) {
                this._hourItems.push(i * this.itemsDelta.hours);
            }
        }
        else {
            this._hourItems.push(0);
        }
        if (hourItemsCount < 7 || !this.isSpinLoop) {
            this._addEmptyItems(this._hourItems);
        }
    };
    IgxTimePickerComponent.prototype._generateMinutes = function () {
        var minuteItemsCount = 60 / this.itemsDelta.minutes;
        if (minuteItemsCount < 7 || !this.isSpinLoop) {
            this._addEmptyItems(this._minuteItems);
            this._isMinuteListLoop = false;
        }
        for (var i = 0; i < minuteItemsCount; i++) {
            this._minuteItems.push(i * this.itemsDelta.minutes);
        }
        if (minuteItemsCount < 7 || !this.isSpinLoop) {
            this._addEmptyItems(this._minuteItems);
        }
    };
    IgxTimePickerComponent.prototype._generateAmPm = function () {
        this._addEmptyItems(this._ampmItems);
        this._ampmItems.push("AM");
        this._ampmItems.push("PM");
        this._addEmptyItems(this._ampmItems);
    };
    IgxTimePickerComponent.prototype._getSelectedTime = function () {
        var date = new Date();
        date.setHours(parseInt(this.selectedHour, 10));
        date.setMinutes(parseInt(this.selectedMinute, 10));
        date.setSeconds(0);
        if (this.selectedAmPm === "PM" && this.selectedHour !== "12") {
            date.setHours(date.getHours() + 12);
        }
        if (this.selectedAmPm === "AM" && this.selectedHour === "12") {
            date.setHours(0);
        }
        return date;
    };
    IgxTimePickerComponent.prototype._convertMinMaxValue = function (value) {
        var date = new Date();
        var sections = value.split(/[\s:]+/);
        date.setHours(parseInt(sections[0], 10));
        date.setMinutes(parseInt(sections[1], 10));
        date.setSeconds(0);
        if (sections[2] && sections[2] === "PM" && sections[0] !== "12") {
            date.setHours(date.getHours() + 12);
        }
        if (sections[2] && sections[2] && sections[0] === "12") {
            date.setHours(0);
        }
        return date;
    };
    IgxTimePickerComponent.prototype._isValueValid = function (value) {
        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {
            return false;
        }
        else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {
            return false;
        }
        else {
            return true;
        }
    };
    IgxTimePickerComponent.prototype.scrollHourIntoView = function (item) {
        var hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, "hour");
        if (hourIntoView) {
            this._hourView = hourIntoView.view;
            this.selectedHour = hourIntoView.selectedItem;
        }
    };
    IgxTimePickerComponent.prototype.scrollMinuteIntoView = function (item) {
        var minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, "minute");
        if (minuteIntoView) {
            this._minuteView = minuteIntoView.view;
            this.selectedMinute = minuteIntoView.selectedItem;
        }
    };
    IgxTimePickerComponent.prototype.scrollAmPmIntoView = function (item) {
        var ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);
        if (ampmIntoView) {
            this._ampmView = ampmIntoView.view;
            this.selectedAmPm = ampmIntoView.selectedItem;
        }
    };
    IgxTimePickerComponent.prototype.nextHour = function () {
        var nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, "hour");
        this._hourView = nextHour.view;
        this.selectedHour = nextHour.selectedItem;
    };
    IgxTimePickerComponent.prototype.prevHour = function () {
        var prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, "hour");
        this._hourView = prevHour.view;
        this.selectedHour = prevHour.selectedItem;
    };
    IgxTimePickerComponent.prototype.nextMinute = function () {
        var nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, "minute");
        this._minuteView = nextMinute.view;
        this.selectedMinute = nextMinute.selectedItem;
    };
    IgxTimePickerComponent.prototype.prevMinute = function () {
        var prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, "minute");
        this._minuteView = prevMinute.view;
        this.selectedMinute = prevMinute.selectedItem;
    };
    IgxTimePickerComponent.prototype.nextAmPm = function () {
        var selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);
        if (selectedIndex + 1 < this._ampmItems.length - 3) {
            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);
            this.selectedAmPm = this._ampmItems[selectedIndex + 1];
        }
    };
    IgxTimePickerComponent.prototype.prevAmPm = function () {
        var selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);
        if (selectedIndex > 3) {
            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);
            this.selectedAmPm = this._ampmItems[selectedIndex - 1];
        }
    };
    IgxTimePickerComponent.prototype.okButtonClick = function () {
        if (this._isValueValid(this._getSelectedTime())) {
            this._alert.close();
            var oldValue = this.value;
            this.value = this._getSelectedTime();
            var args = {
                oldValue: oldValue,
                newValue: this.value
            };
            this.onValueChanged.emit(args);
            return true;
        }
        else {
            var args = {
                timePicker: this,
                currentValue: this._getSelectedTime(),
                setThroughUI: true
            };
            this.onValidationFailed.emit(args);
            return false;
        }
    };
    IgxTimePickerComponent.prototype.cancelButtonClick = function () {
        this._alert.close();
        this.selectedHour = this._prevSelectedHour;
        this.selectedMinute = this._prevSelectedMinute;
        this.selectedAmPm = this._prevSelectedAmPm;
    };
    IgxTimePickerComponent.prototype.hoursInView = function () {
        return this._hourView.filter(function (hour) { return hour !== ""; });
    };
    IgxTimePickerComponent.prototype.minutesInView = function () {
        return this._minuteView.filter(function (minute) { return minute !== ""; });
    };
    IgxTimePickerComponent.prototype.ampmInView = function () {
        return this._ampmView.filter(function (ampm) { return ampm !== ""; });
    };
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxTimePickerComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Date),
        __metadata("design:paramtypes", [Date])
    ], IgxTimePickerComponent.prototype, "value", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxTimePickerComponent.prototype, "isDisabled", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxTimePickerComponent.prototype, "okButtonLabel", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxTimePickerComponent.prototype, "cancelButtonLabel", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxTimePickerComponent.prototype, "itemsDelta", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxTimePickerComponent.prototype, "minValue", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxTimePickerComponent.prototype, "maxValue", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxTimePickerComponent.prototype, "isSpinLoop", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxTimePickerComponent.prototype, "vertical", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxTimePickerComponent.prototype, "format", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxTimePickerComponent.prototype, "onValueChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxTimePickerComponent.prototype, "onValidationFailed", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxTimePickerComponent.prototype, "onOpen", void 0);
    __decorate([
        core_1.ViewChild("hourList"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxTimePickerComponent.prototype, "hourList", void 0);
    __decorate([
        core_1.ViewChild("minuteList"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxTimePickerComponent.prototype, "minuteList", void 0);
    __decorate([
        core_1.ViewChild("ampmList"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxTimePickerComponent.prototype, "ampmList", void 0);
    __decorate([
        core_1.ViewChild(dialog_component_1.IgxDialogComponent),
        __metadata("design:type", dialog_component_1.IgxDialogComponent)
    ], IgxTimePickerComponent.prototype, "_alert", void 0);
    __decorate([
        core_1.HostBinding("class"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxTimePickerComponent.prototype, "styleClass", null);
    IgxTimePickerComponent = IgxTimePickerComponent_1 = __decorate([
        core_1.Component({
            providers: [
                {
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: IgxTimePickerComponent_1,
                    multi: true
                },
                {
                    provide: platform_browser_1.HAMMER_GESTURE_CONFIG,
                    useClass: TimePickerHammerConfig
                }
            ],
            selector: "igx-time-picker",
            template: __webpack_require__(243)
        })
    ], IgxTimePickerComponent);
    return IgxTimePickerComponent;
    var IgxTimePickerComponent_1;
}());
exports.IgxTimePickerComponent = IgxTimePickerComponent;
var IgxTimePickerModule = (function () {
    function IgxTimePickerModule() {
    }
    IgxTimePickerModule = __decorate([
        core_1.NgModule({
            declarations: [
                IgxTimePickerComponent,
                time_picker_directives_1.IgxHourItemDirective,
                time_picker_directives_1.IgxItemListDirective,
                time_picker_directives_1.IgxMinuteItemDirective,
                time_picker_directives_1.IgxAmPmItemDirective
            ],
            exports: [
                IgxTimePickerComponent
            ],
            imports: [
                common_1.CommonModule,
                input_group_component_1.IgxInputGroupModule,
                dialog_component_1.IgxDialogModule,
                icon_1.IgxIconModule
            ],
            providers: []
        })
    ], IgxTimePickerModule);
    return IgxTimePickerModule;
}());
exports.IgxTimePickerModule = IgxTimePickerModule;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var utils_1 = __webpack_require__(27);
var data_util_1 = __webpack_require__(11);
var export_utilities_1 = __webpack_require__(24);
var IgxBaseExporter = (function () {
    function IgxBaseExporter() {
        this._indexOfLastPinnedColumn = -1;
        this._sort = null;
        this.onRowExport = new core_1.EventEmitter();
        this.onColumnExport = new core_1.EventEmitter();
    }
    IgxBaseExporter.prototype.export = function (grid, options) {
        var _this = this;
        if (options === undefined || options === null) {
            throw Error("No options provided!");
        }
        var columns = grid.columnList.toArray();
        this._columnList = new Array(columns.length);
        var hiddenColumns = [];
        var lastVisbleColumnIndex = -1;
        columns.forEach(function (column) {
            var columnHeader = column.header !== "" ? column.header : column.field;
            var exportColumn = !column.hidden || options.ignoreColumnsVisibility;
            var index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;
            var columnInfo = {
                header: columnHeader,
                field: column.field,
                skip: !exportColumn,
                formatter: column.formatter
            };
            if (index !== -1) {
                _this._columnList[index] = columnInfo;
                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);
            }
            else {
                hiddenColumns.push(columnInfo);
            }
            if (column.pinned && exportColumn) {
                _this._indexOfLastPinnedColumn = index;
            }
        });
        hiddenColumns.forEach(function (hiddenColumn) {
            _this._columnList[++lastVisbleColumnIndex] = hiddenColumn;
        });
        var data = this.prepareData(grid, options);
        this.exportData(data, options);
    };
    IgxBaseExporter.prototype.exportData = function (data, options) {
        var _this = this;
        if (options === undefined || options === null) {
            throw Error("No options provided!");
        }
        if (!this._columnList || this._columnList.length === 0) {
            var keys = export_utilities_1.ExportUtilities.getKeysFromData(data);
            this._columnList = keys.map(function (k) { return ({ header: k, field: k, skip: false }); });
        }
        var skippedPinnedColumnsCount = 0;
        this._columnList.forEach(function (column, index) {
            if (!column.skip) {
                var columnExportArgs = {
                    header: column.header,
                    columnIndex: index,
                    cancel: false
                };
                _this.onColumnExport.emit(columnExportArgs);
                column.header = columnExportArgs.header;
                column.skip = columnExportArgs.cancel;
                if (column.skip && index <= _this._indexOfLastPinnedColumn) {
                    skippedPinnedColumnsCount++;
                }
                if (_this._sort && _this._sort.fieldName === column.field) {
                    if (column.skip) {
                        _this._sort = null;
                    }
                    else {
                        _this._sort.fieldName = column.header;
                    }
                }
            }
        });
        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;
        var dataToExport = new Array();
        var isSpecialData = export_utilities_1.ExportUtilities.isSpecialData(data);
        data.forEach(function (row, index) {
            _this.exportRow(dataToExport, row, index, isSpecialData);
        });
        this.exportDataImplementation(dataToExport, options);
        this.resetDefaults();
    };
    IgxBaseExporter.prototype.exportRow = function (data, rowData, index, isSpecialData) {
        var row;
        if (!isSpecialData) {
            row = this._columnList.reduce(function (a, e) {
                if (!e.skip) {
                    var rawValue = rowData[e.field];
                    a[e.header] = e.formatter ? e.formatter(rawValue) : rawValue;
                }
                return a;
            }, {});
        }
        else {
            row = rowData;
        }
        var rowArgs = {
            rowData: row,
            rowIndex: index,
            cancel: false
        };
        this.onRowExport.emit(rowArgs);
        if (!rowArgs.cancel) {
            data.push(rowArgs.rowData);
        }
    };
    IgxBaseExporter.prototype.prepareData = function (grid, options) {
        var data = grid.data;
        if (grid.filteringExpressions &&
            grid.filteringExpressions.length > 0 &&
            !options.ignoreFiltering) {
            var filteringState = {
                expressions: grid.filteringExpressions,
                logic: grid.filteringLogic
            };
            data = data_util_1.DataUtil.filter(data, filteringState);
        }
        if (grid.sortingExpressions &&
            grid.sortingExpressions.length > 0 &&
            !options.ignoreSorting) {
            var sortingState = {
                expressions: grid.sortingExpressions
            };
            this._sort = utils_1.cloneObject(grid.sortingExpressions[0]);
            data = data_util_1.DataUtil.sort(data, sortingState);
        }
        return data;
    };
    IgxBaseExporter.prototype.resetDefaults = function () {
        this._columnList = [];
        this._indexOfLastPinnedColumn = -1;
        this._sort = null;
    };
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxBaseExporter.prototype, "onRowExport", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxBaseExporter.prototype, "onColumnExport", void 0);
    return IgxBaseExporter;
}());
exports.IgxBaseExporter = IgxBaseExporter;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IgxExporterOptionsBase = (function () {
    function IgxExporterOptionsBase(fileName, _fileExtension) {
        this._fileExtension = _fileExtension;
        this.ignoreColumnsVisibility = false;
        this.ignoreFiltering = false;
        this.ignoreColumnsOrder = false;
        this.ignoreSorting = false;
        this.setFileName(fileName);
    }
    IgxExporterOptionsBase.prototype.setFileName = function (fileName) {
        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : "");
    };
    Object.defineProperty(IgxExporterOptionsBase.prototype, "fileName", {
        get: function () {
            return this._fileName;
        },
        set: function (value) {
            this.setFileName(value);
        },
        enumerable: true,
        configurable: true
    });
    return IgxExporterOptionsBase;
}());
exports.IgxExporterOptionsBase = IgxExporterOptionsBase;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ExcelFolderTypes;
(function (ExcelFolderTypes) {
    ExcelFolderTypes[ExcelFolderTypes["RootExcelFolder"] = 0] = "RootExcelFolder";
    ExcelFolderTypes[ExcelFolderTypes["RootRelsExcelFolder"] = 1] = "RootRelsExcelFolder";
    ExcelFolderTypes[ExcelFolderTypes["DocPropsExcelFolder"] = 2] = "DocPropsExcelFolder";
    ExcelFolderTypes[ExcelFolderTypes["XLExcelFolder"] = 3] = "XLExcelFolder";
    ExcelFolderTypes[ExcelFolderTypes["XLRelsExcelFolder"] = 4] = "XLRelsExcelFolder";
    ExcelFolderTypes[ExcelFolderTypes["ThemeExcelFolder"] = 5] = "ThemeExcelFolder";
    ExcelFolderTypes[ExcelFolderTypes["WorksheetsExcelFolder"] = 6] = "WorksheetsExcelFolder";
    ExcelFolderTypes[ExcelFolderTypes["WorksheetsRelsExcelFolder"] = 7] = "WorksheetsRelsExcelFolder";
    ExcelFolderTypes[ExcelFolderTypes["TablesExcelFolder"] = 8] = "TablesExcelFolder";
})(ExcelFolderTypes = exports.ExcelFolderTypes || (exports.ExcelFolderTypes = {}));
var ExcelFileTypes;
(function (ExcelFileTypes) {
    ExcelFileTypes[ExcelFileTypes["RootRelsFile"] = 0] = "RootRelsFile";
    ExcelFileTypes[ExcelFileTypes["AppFile"] = 1] = "AppFile";
    ExcelFileTypes[ExcelFileTypes["CoreFile"] = 2] = "CoreFile";
    ExcelFileTypes[ExcelFileTypes["WorkbookRelsFile"] = 3] = "WorkbookRelsFile";
    ExcelFileTypes[ExcelFileTypes["ThemeFile"] = 4] = "ThemeFile";
    ExcelFileTypes[ExcelFileTypes["WorksheetFile"] = 5] = "WorksheetFile";
    ExcelFileTypes[ExcelFileTypes["StyleFile"] = 6] = "StyleFile";
    ExcelFileTypes[ExcelFileTypes["WorkbookFile"] = 7] = "WorkbookFile";
    ExcelFileTypes[ExcelFileTypes["ContentTypesFile"] = 8] = "ContentTypesFile";
    ExcelFileTypes[ExcelFileTypes["SharedStringsFile"] = 9] = "SharedStringsFile";
    ExcelFileTypes[ExcelFileTypes["WorksheetRelsFile"] = 10] = "WorksheetRelsFile";
    ExcelFileTypes[ExcelFileTypes["TablesFile"] = 11] = "TablesFile";
})(ExcelFileTypes = exports.ExcelFileTypes || (exports.ExcelFileTypes = {}));


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(25));
__export(__webpack_require__(37));
__export(__webpack_require__(46));
__export(__webpack_require__(69));
__export(__webpack_require__(70));
__export(__webpack_require__(26));
__export(__webpack_require__(71));
__export(__webpack_require__(47));
__export(__webpack_require__(114));
__export(__webpack_require__(72));
__export(__webpack_require__(11));
__export(__webpack_require__(115));
__export(__webpack_require__(116));
__export(__webpack_require__(38));
__export(__webpack_require__(121));
__export(__webpack_require__(39));
__export(__webpack_require__(76));
__export(__webpack_require__(138));
__export(__webpack_require__(140));
__export(__webpack_require__(40));
__export(__webpack_require__(78));
__export(__webpack_require__(52));
__export(__webpack_require__(41));
__export(__webpack_require__(153));
__export(__webpack_require__(6));
__export(__webpack_require__(107));
__export(__webpack_require__(108));
__export(__webpack_require__(61));
__export(__webpack_require__(222));
__export(__webpack_require__(224));
__export(__webpack_require__(227));
__export(__webpack_require__(230));
__export(__webpack_require__(232));
__export(__webpack_require__(234));
__export(__webpack_require__(236));
__export(__webpack_require__(238));
__export(__webpack_require__(63));
__export(__webpack_require__(244));
__export(__webpack_require__(17));
__export(__webpack_require__(246));
__export(__webpack_require__(42));
__export(__webpack_require__(247));
__export(__webpack_require__(248));
__export(__webpack_require__(63));
__export(__webpack_require__(12));
__export(__webpack_require__(53));
__export(__webpack_require__(81));
__export(__webpack_require__(79));
__export(__webpack_require__(29));


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IgxNavigationService = (function () {
    function IgxNavigationService() {
        this.navs = {};
    }
    IgxNavigationService.prototype.add = function (id, navItem) {
        this.navs[id] = navItem;
    };
    IgxNavigationService.prototype.remove = function (id) {
        delete this.navs[id];
    };
    IgxNavigationService.prototype.get = function (id) {
        if (id) {
            return this.navs[id];
        }
    };
    IgxNavigationService.prototype.toggle = function (id, fireEvents) {
        if (this.navs[id]) {
            return this.navs[id].toggle(fireEvents);
        }
    };
    IgxNavigationService.prototype.open = function (id, fireEvents) {
        if (this.navs[id]) {
            return this.navs[id].open(fireEvents);
        }
    };
    IgxNavigationService.prototype.close = function (id, fireEvents) {
        if (this.navs[id]) {
            return this.navs[id].close(fireEvents);
        }
    };
    return IgxNavigationService;
}());
exports.IgxNavigationService = IgxNavigationService;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var filtering_expression_interface_1 = __webpack_require__(37);
var filtering_strategy_1 = __webpack_require__(70);
exports.filteringStateDefaults = {
    logic: filtering_expression_interface_1.FilteringLogic.And,
    strategy: new filtering_strategy_1.FilteringStrategy()
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var filtering_expression_interface_1 = __webpack_require__(37);
var FilteringStrategy = (function () {
    function FilteringStrategy() {
    }
    FilteringStrategy.prototype.filter = function (data, expressions, logic) {
        var i;
        var rec;
        var len = data.length;
        var res = [];
        if (!expressions || !expressions.length || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = data[i];
            if (this.matchRecordByExpressions(rec, expressions, i, logic)) {
                res.push(rec);
            }
        }
        return res;
    };
    FilteringStrategy.prototype.findMatch = function (rec, expr, index) {
        var cond = expr.condition;
        var val = rec[expr.fieldName];
        return cond(val, expr.searchVal, expr.ignoreCase);
    };
    FilteringStrategy.prototype.matchRecordByExpressions = function (rec, expressions, index, logic) {
        var i;
        var match = false;
        var and = (logic === filtering_expression_interface_1.FilteringLogic.And);
        var len = expressions.length;
        for (i = 0; i < len; i++) {
            match = this.findMatch(rec, expressions[i], i);
            if (and) {
                if (!match) {
                    return false;
                }
            }
            else {
                if (match) {
                    return true;
                }
            }
        }
        return match;
    };
    return FilteringStrategy;
}());
exports.FilteringStrategy = FilteringStrategy;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sorting_strategy_1 = __webpack_require__(47);
exports.SortingStateDefaults = {
    strategy: new sorting_strategy_1.SortingStrategy()
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PagingError;
(function (PagingError) {
    PagingError[PagingError["None"] = 0] = "None";
    PagingError[PagingError["IncorrectPageIndex"] = 1] = "IncorrectPageIndex";
    PagingError[PagingError["IncorrectRecordsPerPage"] = 2] = "IncorrectRecordsPerPage";
})(PagingError = exports.PagingError || (exports.PagingError = {}));


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxIconService = (function () {
    function IgxIconService() {
        this.fontSet = "material-icons";
        this.fontSetAliases = new Map();
    }
    Object.defineProperty(IgxIconService.prototype, "defaultFontSet", {
        get: function () {
            return this.fontSet;
        },
        set: function (className) {
            this.fontSet = className;
        },
        enumerable: true,
        configurable: true
    });
    IgxIconService.prototype.registerFontSetAlias = function (alias, className) {
        if (className === void 0) { className = alias; }
        this.fontSetAliases.set(alias, className);
        return this;
    };
    IgxIconService.prototype.fontSetClassName = function (alias) {
        return this.fontSetAliases.get(alias) || alias;
    };
    IgxIconService = __decorate([
        core_1.Injectable()
    ], IgxIconService);
    return IgxIconService;
}());
exports.IgxIconService = IgxIconService;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var tabs_component_1 = __webpack_require__(39);
var tabs_directives_1 = __webpack_require__(75);
var IgxTabsGroupComponent = (function () {
    function IgxTabsGroupComponent(_tabs) {
        this._tabs = _tabs;
        this._itemStyle = "igx-tabs-group";
        this.isSelected = false;
        this.role = "tabpanel";
    }
    Object.defineProperty(IgxTabsGroupComponent.prototype, "styleClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "labelledBy", {
        get: function () {
            return "igx-tab-item-" + this.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "id", {
        get: function () {
            return "igx-tabs__group-" + this.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "itemStyle", {
        get: function () {
            return this._itemStyle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "relatedTab", {
        get: function () {
            if (this._tabs.tabs) {
                return this._tabs.tabs.toArray()[this.index];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "index", {
        get: function () {
            return this._tabs.groups.toArray().indexOf(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabsGroupComponent.prototype, "customTabTemplate", {
        get: function () {
            return this._tabTemplate;
        },
        set: function (template) {
            this._tabTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    IgxTabsGroupComponent.prototype.ngAfterContentInit = function () {
        if (this.tabTemplate) {
            this._tabTemplate = this.tabTemplate.template;
        }
    };
    IgxTabsGroupComponent.prototype.select = function (focusDelay, onInit) {
        var _this = this;
        if (focusDelay === void 0) { focusDelay = 50; }
        if (onInit === void 0) { onInit = false; }
        if (this.isDisabled || this._tabs.selectedIndex === this.index) {
            return;
        }
        this.isSelected = true;
        this.relatedTab.tabindex = 0;
        if (!onInit) {
            setTimeout(function () {
                _this.relatedTab.nativeTabItem.nativeElement.focus();
            }, focusDelay);
        }
        this._handleSelection();
        this._tabs.onTabItemSelected.emit({ tab: this._tabs.tabs.toArray()[this.index], group: this });
    };
    IgxTabsGroupComponent.prototype._handleSelection = function () {
        var tabElement = this.relatedTab.nativeTabItem.nativeElement;
        var viewPortOffsetWidth = this._tabs.viewPort.nativeElement.offsetWidth;
        if (tabElement.offsetLeft < this._tabs.offset) {
            this._tabs.scrollElement(tabElement, false);
        }
        else if (tabElement.offsetLeft + tabElement.offsetWidth > viewPortOffsetWidth + this._tabs.offset) {
            this._tabs.scrollElement(tabElement, true);
        }
        var contentOffset = this._tabs.tabsContainer.nativeElement.offsetWidth * this.index;
        this._tabs.contentsContainer.nativeElement.style.transform = "translate(" + -contentOffset + "px)";
        this._tabs.selectedIndicator.nativeElement.style.width = tabElement.offsetWidth + "px";
        this._tabs.selectedIndicator.nativeElement.style.transform = "translate(" + tabElement.offsetLeft + "px)";
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxTabsGroupComponent.prototype, "label", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxTabsGroupComponent.prototype, "icon", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], IgxTabsGroupComponent.prototype, "isDisabled", void 0);
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxTabsGroupComponent.prototype, "role", void 0);
    __decorate([
        core_1.HostBinding("class.igx-tabs__group"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxTabsGroupComponent.prototype, "styleClass", null);
    __decorate([
        core_1.HostBinding("attr.aria-labelledby"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxTabsGroupComponent.prototype, "labelledBy", null);
    __decorate([
        core_1.HostBinding("attr.id"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxTabsGroupComponent.prototype, "id", null);
    __decorate([
        core_1.ContentChild(tabs_directives_1.IgxTabItemTemplateDirective, { read: tabs_directives_1.IgxTabItemTemplateDirective }),
        __metadata("design:type", tabs_directives_1.IgxTabItemTemplateDirective)
    ], IgxTabsGroupComponent.prototype, "tabTemplate", void 0);
    IgxTabsGroupComponent = __decorate([
        core_1.Component({
            selector: "igx-tabs-group",
            template: __webpack_require__(124)
        }),
        __param(0, core_1.Inject(core_1.forwardRef(function () { return tabs_component_1.IgxTabsComponent; }))),
        __metadata("design:paramtypes", [tabs_component_1.IgxTabsComponent])
    ], IgxTabsGroupComponent);
    return IgxTabsGroupComponent;
}());
exports.IgxTabsGroupComponent = IgxTabsGroupComponent;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var tabs_component_1 = __webpack_require__(39);
var ButtonStyle;
(function (ButtonStyle) {
    ButtonStyle["VISIBLE"] = "visible";
    ButtonStyle["HIDDEN"] = "hidden";
    ButtonStyle["NOT_DISPLAYED"] = "not_displayed";
})(ButtonStyle || (ButtonStyle = {}));
var IgxRightButtonStyleDirective = (function () {
    function IgxRightButtonStyleDirective(tabs) {
        this.tabs = tabs;
    }
    IgxRightButtonStyleDirective.prototype.getRightButtonStyle = function () {
        var viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;
        var itemsContainerWidth = this.tabs.itemsContainer.nativeElement.offsetWidth;
        var headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        var offset = this.tabs.offset;
        var total = offset + viewPortWidth;
        if (itemsContainerWidth <= headerContainerWidth && offset === 0) {
            return ButtonStyle.NOT_DISPLAYED;
        }
        if (itemsContainerWidth > total) {
            return ButtonStyle.VISIBLE;
        }
        else {
            return ButtonStyle.HIDDEN;
        }
    };
    Object.defineProperty(IgxRightButtonStyleDirective.prototype, "visibleCSS", {
        get: function () {
            return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRightButtonStyleDirective.prototype, "hiddenCSS", {
        get: function () {
            return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRightButtonStyleDirective.prototype, "notDisplayedCSS", {
        get: function () {
            return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.HostBinding("class.igx-tabs__header-button"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxRightButtonStyleDirective.prototype, "visibleCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-tabs__header-button--hidden"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxRightButtonStyleDirective.prototype, "hiddenCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-tabs__header-button--none"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxRightButtonStyleDirective.prototype, "notDisplayedCSS", null);
    IgxRightButtonStyleDirective = __decorate([
        core_1.Directive({
            selector: "[igxRightButtonStyle]"
        }),
        __param(0, core_1.Host()), __param(0, core_1.Inject(core_1.forwardRef(function () { return tabs_component_1.IgxTabsComponent; }))),
        __metadata("design:paramtypes", [tabs_component_1.IgxTabsComponent])
    ], IgxRightButtonStyleDirective);
    return IgxRightButtonStyleDirective;
}());
exports.IgxRightButtonStyleDirective = IgxRightButtonStyleDirective;
var IgxLeftButtonStyleDirective = (function () {
    function IgxLeftButtonStyleDirective(tabs) {
        this.tabs = tabs;
    }
    IgxLeftButtonStyleDirective.prototype.getLeftButtonStyle = function () {
        var itemsContainerWidth = this.tabs.itemsContainer.nativeElement.offsetWidth;
        var headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        var offset = this.tabs.offset;
        if (offset === 0) {
            if (itemsContainerWidth <= headerContainerWidth) {
                return ButtonStyle.NOT_DISPLAYED;
            }
            return ButtonStyle.HIDDEN;
        }
        else {
            return ButtonStyle.VISIBLE;
        }
    };
    Object.defineProperty(IgxLeftButtonStyleDirective.prototype, "visibleCSS", {
        get: function () {
            return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLeftButtonStyleDirective.prototype, "hiddenCSS", {
        get: function () {
            return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLeftButtonStyleDirective.prototype, "notDisplayedCSS", {
        get: function () {
            return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.HostBinding("class.igx-tabs__header-button"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxLeftButtonStyleDirective.prototype, "visibleCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-tabs__header-button--hidden"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxLeftButtonStyleDirective.prototype, "hiddenCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-tabs__header-button--none"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxLeftButtonStyleDirective.prototype, "notDisplayedCSS", null);
    IgxLeftButtonStyleDirective = __decorate([
        core_1.Directive({
            selector: "[igxLeftButtonStyle]"
        }),
        __param(0, core_1.Host()), __param(0, core_1.Inject(core_1.forwardRef(function () { return tabs_component_1.IgxTabsComponent; }))),
        __metadata("design:paramtypes", [tabs_component_1.IgxTabsComponent])
    ], IgxLeftButtonStyleDirective);
    return IgxLeftButtonStyleDirective;
}());
exports.IgxLeftButtonStyleDirective = IgxLeftButtonStyleDirective;
var IgxTabItemTemplateDirective = (function () {
    function IgxTabItemTemplateDirective(template) {
        this.template = template;
    }
    IgxTabItemTemplateDirective = __decorate([
        core_1.Directive({
            selector: "[igxTab]"
        }),
        __metadata("design:paramtypes", [core_1.TemplateRef])
    ], IgxTabItemTemplateDirective);
    return IgxTabItemTemplateDirective;
}());
exports.IgxTabItemTemplateDirective = IgxTabItemTemplateDirective;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(77));
__export(__webpack_require__(48));
__export(__webpack_require__(49));
__export(__webpack_require__(137));


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var FEBRUARY = 1;
function range(start, stop, step) {
    if (start === void 0) { start = 0; }
    if (step === void 0) { step = 1; }
    var res = [];
    var cur = (stop === undefined) ? 0 : start;
    var max = (stop === undefined) ? start : stop;
    for (var i = cur; step < 0 ? i > max : i < max; i += step) {
        res.push(i);
    }
    return res;
}
exports.range = range;
function isLeap(year) {
    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));
}
exports.isLeap = isLeap;
function weekDay(year, month, day) {
    return new Date(year, month, day).getDay();
}
exports.weekDay = weekDay;
function monthRange(year, month) {
    if ((month < 0) || (month > 11)) {
        throw new Error("Invalid month specified");
    }
    var day = weekDay(year, month, 1);
    var nDays = MDAYS[month];
    if ((month === FEBRUARY) && (isLeap(year))) {
        nDays++;
    }
    return [day, nDays];
}
exports.monthRange = monthRange;
var WEEKDAYS;
(function (WEEKDAYS) {
    WEEKDAYS[WEEKDAYS["SUNDAY"] = 0] = "SUNDAY";
    WEEKDAYS[WEEKDAYS["MONDAY"] = 1] = "MONDAY";
    WEEKDAYS[WEEKDAYS["TUESDAY"] = 2] = "TUESDAY";
    WEEKDAYS[WEEKDAYS["WEDNESDAY"] = 3] = "WEDNESDAY";
    WEEKDAYS[WEEKDAYS["THURSDAY"] = 4] = "THURSDAY";
    WEEKDAYS[WEEKDAYS["FRIDAY"] = 5] = "FRIDAY";
    WEEKDAYS[WEEKDAYS["SATURDAY"] = 6] = "SATURDAY";
})(WEEKDAYS = exports.WEEKDAYS || (exports.WEEKDAYS = {}));
var Calendar = (function () {
    function Calendar(firstWeekDay) {
        if (firstWeekDay === void 0) { firstWeekDay = WEEKDAYS.SUNDAY; }
        this._firstWeekDay = firstWeekDay;
    }
    Object.defineProperty(Calendar.prototype, "firstWeekDay", {
        get: function () {
            return this._firstWeekDay % 7;
        },
        set: function (value) {
            this._firstWeekDay = value;
        },
        enumerable: true,
        configurable: true
    });
    Calendar.prototype.weekdays = function () {
        var res = [];
        for (var _i = 0, _a = range(this.firstWeekDay, this.firstWeekDay + 7); _i < _a.length; _i++) {
            var i = _a[_i];
            res.push(i % 7);
        }
        return res;
    };
    Calendar.prototype.monthdates = function (year, month, extraWeek) {
        if (extraWeek === void 0) { extraWeek = false; }
        var date = new Date(year, month, 1, 12, 0, 0, 0);
        var days = (date.getDay() - this.firstWeekDay) % 7;
        if (days < 0) {
            days = 7 - Math.abs(days);
        }
        date = this.timedelta(date, "day", -days);
        var res = [];
        var value;
        while (true) {
            value = this.generateICalendarDate(date, year, month);
            res.push(value);
            date = this.timedelta(date, "day", 1);
            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {
                if (extraWeek && res.length <= 35) {
                    for (var _i = 0, _a = range(0, 7); _i < _a.length; _i++) {
                        var i = _a[_i];
                        value = this.generateICalendarDate(date, year, month);
                        res.push(value);
                        date = this.timedelta(date, "day", 1);
                    }
                }
                break;
            }
        }
        return res;
    };
    Calendar.prototype.monthdatescalendar = function (year, month, extraWeek) {
        if (extraWeek === void 0) { extraWeek = false; }
        var dates = this.monthdates(year, month, extraWeek);
        var res = [];
        for (var _i = 0, _a = range(0, dates.length, 7); _i < _a.length; _i++) {
            var i = _a[_i];
            res.push(dates.slice(i, i + 7));
        }
        return res;
    };
    Calendar.prototype.timedelta = function (date, interval, units) {
        var ret = new Date(date);
        var checkRollover = function () {
            if (ret.getDate() !== date.getDate()) {
                ret.setDate(0);
            }
        };
        switch (interval.toLowerCase()) {
            case "year":
                ret.setFullYear(ret.getFullYear() + units);
                checkRollover();
                break;
            case "quarter":
                ret.setMonth(ret.getMonth() + 3 * units);
                checkRollover();
                break;
            case "month":
                ret.setMonth(ret.getMonth() + units);
                checkRollover();
                break;
            case "week":
                ret.setDate(ret.getDate() + 7 * units);
                break;
            case "day":
                ret.setDate(ret.getDate() + units);
                break;
            case "hour":
                ret.setTime(ret.getTime() + units * 3600000);
                break;
            case "minute":
                ret.setTime(ret.getTime() + units * 60000);
                break;
            case "second":
                ret.setTime(ret.getTime() + units * 1000);
                break;
            default:
                throw new Error("Invalid interval specifier");
        }
        return ret;
    };
    Calendar.prototype.formatToParts = function (date, locale, options, parts) {
        var formatter = new Intl.DateTimeFormat(locale, options);
        var result = {
            date: date,
            full: formatter.format(date)
        };
        if (formatter.formatToParts) {
            var formattedParts_1 = formatter.formatToParts(date);
            var toType = function (partType) {
                var index = formattedParts_1.findIndex(function (_a) {
                    var type = _a.type;
                    return type === partType;
                });
                var o = { value: "", literal: "", combined: "" };
                if (partType === "era" && index > -1) {
                    o.value = formattedParts_1[index].value;
                    return o;
                }
                else if (partType === "era" && index === -1) {
                    return o;
                }
                o.value = formattedParts_1[index].value;
                o.literal = formattedParts_1[index + 1] ? formattedParts_1[index + 1].value : "";
                o.combined = [o.value, o.literal].join("");
                return o;
            };
            for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
                var each = parts_1[_i];
                result[each] = toType(each);
            }
        }
        else {
            for (var _a = 0, parts_2 = parts; _a < parts_2.length; _a++) {
                var each = parts_2[_a];
                result[each] = { value: "", literal: "", combined: "" };
            }
        }
        return result;
    };
    Calendar.prototype.generateICalendarDate = function (date, year, month) {
        return {
            date: date,
            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,
            isNextMonth: this.isNextMonth(date, year, month),
            isPrevMonth: this.isPreviousMonth(date, year, month)
        };
    };
    Calendar.prototype.isPreviousMonth = function (date, year, month) {
        if (date.getFullYear() === year) {
            return date.getMonth() < month;
        }
        return date.getFullYear() < year;
    };
    Calendar.prototype.isNextMonth = function (date, year, month) {
        if (date.getFullYear() === year) {
            return date.getMonth() > month;
        }
        return date.getFullYear() > year;
    };
    return Calendar;
}());
exports.Calendar = Calendar;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var forms_1 = __webpack_require__(7);
var calendar_1 = __webpack_require__(76);
var dialog_component_1 = __webpack_require__(52);
var icon_1 = __webpack_require__(6);
var input_group_component_1 = __webpack_require__(41);
var NEXT_ID = 0;
var IgxDatePickerComponent = (function () {
    function IgxDatePickerComponent(resolver) {
        this.resolver = resolver;
        this.id = "igx-datePicker-" + NEXT_ID++;
        this.locale = Constants.DEFAULT_LOCALE_DATE;
        this.weekStart = calendar_1.WEEKDAYS.SUNDAY;
        this.vertical = false;
        this.onOpen = new core_1.EventEmitter();
        this.onClose = new core_1.EventEmitter();
        this.onSelection = new core_1.EventEmitter();
        this._formatOptions = {
            day: "numeric",
            month: "short",
            weekday: "short",
            year: "numeric"
        };
        this._formatViews = {
            day: false,
            month: true,
            year: false
        };
        this._onTouchedCallback = function () { };
        this._onChangeCallback = function () { };
    }
    IgxDatePickerComponent_1 = IgxDatePickerComponent;
    Object.defineProperty(IgxDatePickerComponent.prototype, "formatOptions", {
        get: function () {
            return this._formatOptions;
        },
        set: function (formatOptions) {
            this._formatOptions = Object.assign(this._formatOptions, formatOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "formatViews", {
        get: function () {
            return this._formatViews;
        },
        set: function (formatViews) {
            this._formatViews = Object.assign(this._formatViews, formatViews);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "displayData", {
        get: function () {
            if (this.value) {
                return this._customFormatChecker(this.formatter, this.value);
            }
            return "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "calendar", {
        get: function () {
            return this.calendarRef.instance;
        },
        enumerable: true,
        configurable: true
    });
    IgxDatePickerComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    IgxDatePickerComponent.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    IgxDatePickerComponent.prototype.registerOnTouched = function (fn) { this._onTouchedCallback = fn; };
    IgxDatePickerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.alert.onOpen.subscribe(function (ev) { return _this._focusTheDialog(); });
        this.alert.onClose.subscribe(function (ev) { return _this.handleDialogCloseAction(); });
    };
    IgxDatePickerComponent.prototype.ngOnDestroy = function () {
        this.alert.onClose.unsubscribe();
        this.alert.onOpen.unsubscribe();
    };
    IgxDatePickerComponent.prototype.triggerTodaySelection = function () {
        var today = new Date(Date.now());
        this.handleSelection(today);
    };
    IgxDatePickerComponent.prototype.selectDate = function (date) {
        this.value = date;
        this.onSelection.emit(date);
        this._onChangeCallback(date);
    };
    IgxDatePickerComponent.prototype.onOpenEvent = function (event) {
        var factory = this.resolver.resolveComponentFactory(calendar_1.IgxCalendarComponent);
        this.calendarRef = this.container.createComponent(factory);
        this.calendarRef.changeDetectorRef.detach();
        this.updateCalendarInstance();
        this.calendarRef.location.nativeElement.classList.add("igx-date-picker__date--opened");
        this.calendarRef.changeDetectorRef.reattach();
        this.alert.open();
        this._onTouchedCallback();
        this.onOpen.emit(this);
    };
    IgxDatePickerComponent.prototype.handleDialogCloseAction = function () {
        var _this = this;
        this.onClose.emit(this);
        setTimeout(function () { return _this.calendarRef.destroy(); }, 350);
    };
    IgxDatePickerComponent.prototype.handleSelection = function (event) {
        this.value = event;
        this.calendar.viewDate = event;
        this._onChangeCallback(event);
        this.alert.close();
        this.onSelection.emit(event);
    };
    IgxDatePickerComponent.prototype.updateCalendarInstance = function () {
        var _this = this;
        this.calendar.formatOptions = this._formatOptions;
        this.calendar.formatViews = this._formatViews;
        this.calendar.locale = this.locale;
        this.calendar.vertical = this.vertical;
        if (this.headerTemplate) {
            this.calendar.headerTemplate = this.headerTemplate;
        }
        if (this.subheaderTemplate) {
            this.calendar.subheaderTemplate = this.subheaderTemplate;
        }
        if (this.value) {
            this.calendar.value = this.value;
            this.calendar.viewDate = this.value;
        }
        this.calendar.weekStart = this.weekStart;
        this.calendar.onSelection.subscribe(function (ev) { return _this.handleSelection(ev); });
    };
    IgxDatePickerComponent.prototype._focusTheDialog = function () {
        var _this = this;
        requestAnimationFrame(function () { return _this.alert.element.focus(); });
    };
    IgxDatePickerComponent.prototype._setLocaleToDate = function (value, locale) {
        if (locale === void 0) { locale = Constants.DEFAULT_LOCALE_DATE; }
        return value.toLocaleDateString(locale);
    };
    IgxDatePickerComponent.prototype._customFormatChecker = function (formatter, date) {
        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date, this.locale);
    };
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDatePickerComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Function)
    ], IgxDatePickerComponent.prototype, "formatter", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], IgxDatePickerComponent.prototype, "isDisabled", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Date)
    ], IgxDatePickerComponent.prototype, "value", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxDatePickerComponent.prototype, "locale", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxDatePickerComponent.prototype, "weekStart", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxDatePickerComponent.prototype, "formatOptions", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxDatePickerComponent.prototype, "formatViews", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDatePickerComponent.prototype, "vertical", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxDatePickerComponent.prototype, "todayButtonLabel", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxDatePickerComponent.prototype, "cancelButtonLabel", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxDatePickerComponent.prototype, "onOpen", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxDatePickerComponent.prototype, "onClose", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxDatePickerComponent.prototype, "onSelection", void 0);
    __decorate([
        core_1.ContentChild(calendar_1.IgxCalendarHeaderTemplateDirective, { read: calendar_1.IgxCalendarHeaderTemplateDirective }),
        __metadata("design:type", calendar_1.IgxCalendarHeaderTemplateDirective)
    ], IgxDatePickerComponent.prototype, "headerTemplate", void 0);
    __decorate([
        core_1.ContentChild(calendar_1.IgxCalendarSubheaderTemplateDirective, { read: calendar_1.IgxCalendarSubheaderTemplateDirective }),
        __metadata("design:type", calendar_1.IgxCalendarSubheaderTemplateDirective)
    ], IgxDatePickerComponent.prototype, "subheaderTemplate", void 0);
    __decorate([
        core_1.ViewChild("container", { read: core_1.ViewContainerRef }),
        __metadata("design:type", core_1.ViewContainerRef)
    ], IgxDatePickerComponent.prototype, "container", void 0);
    __decorate([
        core_1.ViewChild(dialog_component_1.IgxDialogComponent),
        __metadata("design:type", dialog_component_1.IgxDialogComponent)
    ], IgxDatePickerComponent.prototype, "alert", void 0);
    IgxDatePickerComponent = IgxDatePickerComponent_1 = __decorate([
        core_1.Component({
            providers: [{ provide: forms_1.NG_VALUE_ACCESSOR, useExisting: IgxDatePickerComponent_1, multi: true }],
            selector: "igx-datePicker",
            template: __webpack_require__(152)
        }),
        __metadata("design:paramtypes", [core_1.ComponentFactoryResolver])
    ], IgxDatePickerComponent);
    return IgxDatePickerComponent;
    var IgxDatePickerComponent_1;
}());
exports.IgxDatePickerComponent = IgxDatePickerComponent;
var Constants = (function () {
    function Constants() {
    }
    Constants.DEFAULT_LOCALE_DATE = "en";
    return Constants;
}());
var IgxDatePickerModule = (function () {
    function IgxDatePickerModule() {
    }
    IgxDatePickerModule = __decorate([
        core_1.NgModule({
            declarations: [IgxDatePickerComponent],
            entryComponents: [calendar_1.IgxCalendarComponent],
            exports: [IgxDatePickerComponent],
            imports: [common_1.CommonModule, icon_1.IgxIconModule, input_group_component_1.IgxInputGroupModule, dialog_component_1.IgxDialogModule, calendar_1.IgxCalendarModule]
        })
    ], IgxDatePickerModule);
    return IgxDatePickerModule;
}());
exports.IgxDatePickerModule = IgxDatePickerModule;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxFocusDirective = (function () {
    function IgxFocusDirective(element) {
        this.element = element;
        this.focusState = true;
    }
    Object.defineProperty(IgxFocusDirective.prototype, "focused", {
        get: function () {
            return this.focusState;
        },
        set: function (val) {
            this.focusState = val;
            this.trigger();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxFocusDirective.prototype, "nativeElement", {
        get: function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    IgxFocusDirective.prototype.trigger = function () {
        var _this = this;
        if (this.focusState) {
            requestAnimationFrame(function () { return _this.nativeElement.focus(); });
        }
    };
    __decorate([
        core_1.Input("igxFocus"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxFocusDirective.prototype, "focused", null);
    IgxFocusDirective = __decorate([
        core_1.Directive({
            exportAs: "igxFocus",
            selector: "[igxFocus]"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], IgxFocusDirective);
    return IgxFocusDirective;
}());
exports.IgxFocusDirective = IgxFocusDirective;
var IgxFocusModule = (function () {
    function IgxFocusModule() {
    }
    IgxFocusModule = __decorate([
        core_1.NgModule({
            declarations: [IgxFocusDirective],
            exports: [IgxFocusDirective]
        })
    ], IgxFocusModule);
    return IgxFocusModule;
}());
exports.IgxFocusModule = IgxFocusModule;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function DeprecateClass(message) {
    return function (constructor) {
        console.warn(constructor.name + ": " + message);
    };
}
exports.DeprecateClass = DeprecateClass;
function DeprecateMethod(message) {
    return function (constructor) {
        console.warn(constructor.constructor.name + ": " + message);
    };
}
exports.DeprecateMethod = DeprecateMethod;
function DeprecateProperty(message) {
    return function (constructor) {
        console.warn(constructor.constructor.name + ": " + message);
    };
}
exports.DeprecateProperty = DeprecateProperty;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxTextSelectionDirective = (function () {
    function IgxTextSelectionDirective(element) {
        this.element = element;
        this.selectionState = true;
    }
    Object.defineProperty(IgxTextSelectionDirective.prototype, "selected", {
        get: function () {
            return this.selectionState;
        },
        set: function (val) {
            this.selectionState = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTextSelectionDirective.prototype, "nativeElement", {
        get: function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    IgxTextSelectionDirective.prototype.onFocus = function () {
        this.trigger();
    };
    IgxTextSelectionDirective.prototype.trigger = function () {
        var _this = this;
        if (this.selected && this.nativeElement.value.length) {
            requestAnimationFrame(function () { return _this.nativeElement.setSelectionRange(0, _this.nativeElement.value.length); });
        }
    };
    __decorate([
        core_1.Input("igxTextSelection"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxTextSelectionDirective.prototype, "selected", null);
    __decorate([
        core_1.HostListener("focus"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxTextSelectionDirective.prototype, "onFocus", null);
    IgxTextSelectionDirective = __decorate([
        core_1.Directive({
            exportAs: "igxTextSelection",
            selector: "[igxTextSelection]"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], IgxTextSelectionDirective);
    return IgxTextSelectionDirective;
}());
exports.IgxTextSelectionDirective = IgxTextSelectionDirective;
var IgxTextSelectionModule = (function () {
    function IgxTextSelectionModule() {
    }
    IgxTextSelectionModule = __decorate([
        core_1.NgModule({
            declarations: [IgxTextSelectionDirective],
            exports: [IgxTextSelectionDirective]
        })
    ], IgxTextSelectionModule);
    return IgxTextSelectionModule;
}());
exports.IgxTextSelectionModule = IgxTextSelectionModule;


/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return empty; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_hostReportError__ = __webpack_require__(54);
/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */


var empty = {
    closed: true,
    next: function (value) { },
    error: function (err) {
        if (__WEBPACK_IMPORTED_MODULE_0__config__["a" /* config */].useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            Object(__WEBPACK_IMPORTED_MODULE_1__util_hostReportError__["a" /* hostReportError */])(err);
        }
    },
    complete: function () { }
};
//# sourceMappingURL=Observer.js.map


/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isObject;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isObject(x) {
    return x != null && typeof x === 'object';
}
//# sourceMappingURL=isObject.js.map


/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return errorObject; });
// typeof any so that it we don't have to cast when comparing a result to the error object
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var errorObject = { e: {} };
//# sourceMappingURL=errorObject.js.map


/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UnsubscriptionError; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */

/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        var _this = _super.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '') || this;
        _this.errors = errors;
        _this.name = 'UnsubscriptionError';
        Object.setPrototypeOf(_this, UnsubscriptionError.prototype);
        return _this;
    }
    return UnsubscriptionError;
}(Error));

//# sourceMappingURL=UnsubscriptionError.js.map


/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pipe;
/* harmony export (immutable) */ __webpack_exports__["b"] = pipeFromArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__noop__ = __webpack_require__(56);
/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */

/* tslint:enable:max-line-length */
function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
/* @internal */
function pipeFromArray(fns) {
    if (!fns) {
        return __WEBPACK_IMPORTED_MODULE_0__noop__["a" /* noop */];
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
//# sourceMappingURL=pipe.js.map


/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SubjectSubscription; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        var _this = _super.call(this) || this;
        _this.subject = subject;
        _this.subscriber = subscriber;
        _this.closed = false;
        return _this;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(__WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]));

//# sourceMappingURL=SubjectSubscription.js.map


/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return queue; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__QueueAction__ = __webpack_require__(164);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__QueueScheduler__ = __webpack_require__(166);
/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */


/**
 *
 * Queue Scheduler
 *
 * <span class="informal">Put every next task on a queue, instead of executing it immediately</span>
 *
 * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.
 *
 * When used without delay, it schedules given task synchronously - executes it right when
 * it is scheduled. However when called recursively, that is when inside the scheduled task,
 * another task is scheduled with queue scheduler, instead of executing immediately as well,
 * that task will be put on a queue and wait for current one to finish.
 *
 * This means that when you execute task with `queue` scheduler, you are sure it will end
 * before any other task scheduled with that scheduler will start.
 *
 * @examples <caption>Schedule recursively first, then do something</caption>
 *
 * Rx.Scheduler.queue.schedule(() => {
 *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue
 *
 *   console.log('first');
 * });
 *
 * // Logs:
 * // "first"
 * // "second"
 *
 *
 * @example <caption>Reschedule itself recursively</caption>
 *
 * Rx.Scheduler.queue.schedule(function(state) {
 *   if (state !== 0) {
 *     console.log('before', state);
 *     this.schedule(state - 1); // `this` references currently executing Action,
 *                               // which we reschedule with new state
 *     console.log('after', state);
 *   }
 * }, 0, 3);
 *
 * // In scheduler that runs recursively, you would expect:
 * // "before", 3
 * // "before", 2
 * // "before", 1
 * // "after", 1
 * // "after", 2
 * // "after", 3
 *
 * // But with queue it logs:
 * // "before", 3
 * // "after", 3
 * // "before", 2
 * // "after", 2
 * // "before", 1
 * // "after", 1
 *
 *
 * @static true
 * @name queue
 * @owner Scheduler
 */
var queue = /*@__PURE__*/ new __WEBPACK_IMPORTED_MODULE_1__QueueScheduler__["a" /* QueueScheduler */](__WEBPACK_IMPORTED_MODULE_0__QueueAction__["a" /* QueueAction */]);
//# sourceMappingURL=queue.js.map


/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Scheduler; });
/**
 * An execution context and a data structure to order tasks and schedule their
 * execution. Provides a notion of (potentially virtual) time, through the
 * `now()` getter method.
 *
 * Each unit of work in a Scheduler is called an {@link Action}.
 *
 * ```ts
 * class Scheduler {
 *   now(): number;
 *   schedule(work, delay?, state?): Subscription;
 * }
 * ```
 *
 * @class Scheduler
 * @deprecated Scheduler is an internal implementation detail of RxJS, and
 * should not be used directly. Rather, create your own class and implement
 * {@link SchedulerLike}
 */
var Scheduler = /*@__PURE__*/ (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    /**
     * Schedules a function, `work`, for execution. May happen at some point in
     * the future, according to the `delay` parameter, if specified. May be passed
     * some context object, `state`, which will be passed to the `work` function.
     *
     * The given arguments will be processed an stored as an Action object in a
     * queue of actions.
     *
     * @param {function(state: ?T): ?Subscription} work A function representing a
     * task, or some unit of work to be executed by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler itself.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @return {Subscription} A subscription in order to be able to unsubscribe
     * the scheduled work.
     */
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    /** @nocollapse */
    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
    return Scheduler;
}());

//# sourceMappingURL=Scheduler.js.map


/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Notification; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__observable_empty__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__observable_of__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__observable_throwError__ = __webpack_require__(92);
/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */



/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
var Notification = /*@__PURE__*/ (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param {Observer} observer
     * @return
     */
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    /**
     * Given some {@link Observer} callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param {function(value: T): void} next An Observer `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
     * the `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return {any}
     */
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return Object(__WEBPACK_IMPORTED_MODULE_1__observable_of__["a" /* of */])(this.value);
            case 'E':
                return Object(__WEBPACK_IMPORTED_MODULE_2__observable_throwError__["a" /* throwError */])(this.error);
            case 'C':
                return Object(__WEBPACK_IMPORTED_MODULE_0__observable_empty__["b" /* empty */])();
        }
        throw new Error('unexpected notification kind value');
    };
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param {T} value The `next` value.
     * @return {Notification<T>} The "next" Notification representing the
     * argument.
     * @nocollapse
     */
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param {any} [err] The `error` error.
     * @return {Notification<T>} The "error" Notification representing the
     * argument.
     * @nocollapse
     */
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return {Notification<any>} The valueless "complete" Notification.
     * @nocollapse
     */
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());

//# sourceMappingURL=Notification.js.map


/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return subscribeToArray; });
/**
 * Subscribes to an ArrayLike with a subscriber
 * @param array The array or array-like to subscribe to
 */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var subscribeToArray = function (array) {
    return function (subscriber) {
        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        if (!subscriber.closed) {
            subscriber.complete();
        }
    };
};
//# sourceMappingURL=subscribeToArray.js.map


/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = throwError;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

/**
 * Creates an Observable that emits no items to the Observer and immediately
 * emits an error notification.
 *
 * <span class="informal">Just emits 'error', and nothing else.
 * </span>
 *
 * <img src="./img/throw.png" width="100%">
 *
 * This static operator is useful for creating a simple Observable that only
 * emits the error notification. It can be used for composing with other
 * Observables, such as in a {@link mergeMap}.
 *
 * @example <caption>Emit the number 7, then emit an error.</caption>
 * import { throwError, concat, of } from 'rxjs/create';
 *
 * const result = concat(of(7), throwError(new Error('oops!')));
 * result.subscribe(x => console.log(x), e => console.error(e));
 *
 * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
 * import { throwError, interval, of } from 'rxjs/create';
 * import { mergeMap } from 'rxjs/operators';
 *
 * interval(1000).pipe(
 *   mergeMap(x => x === 13 ?
 *     throwError('Thirteens are bad') :
 *     of('a', 'b', 'c')
 *   )
 * ).subscribe(x => console.log(x), e => console.error(e));
 *
 * @see {@link create}
 * @see {@link empty}
 * @see {@link never}
 * @see {@link of}
 *
 * @param {any} error The particular Error to pass to the error notification.
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emission of the error notification.
 * @return {Observable} An error Observable: emits only the error notification
 * using the given error argument.
 * @static true
 * @name throw
 * @owner Observable
 */
function throwError(error, scheduler) {
    if (!scheduler) {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) { return subscriber.error(error); });
    }
    else {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
    }
}
function dispatch(_a) {
    var error = _a.error, subscriber = _a.subscriber;
    subscriber.error(error);
}
//# sourceMappingURL=throwError.js.map


/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return subscribeTo; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__subscribeToArray__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__subscribeToPromise__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__subscribeToIterable__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__subscribeToObservable__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__isArrayLike__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__isPromise__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__isObject__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__symbol_iterator__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__symbol_observable__ = __webpack_require__(19);
/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */










var subscribeTo = function (result) {
    if (result instanceof __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */]) {
        return function (subscriber) {
            if (result._isScalar) {
                subscriber.next(result.value);
                subscriber.complete();
                return undefined;
            }
            else {
                return result.subscribe(subscriber);
            }
        };
    }
    else if (Object(__WEBPACK_IMPORTED_MODULE_5__isArrayLike__["a" /* isArrayLike */])(result)) {
        return Object(__WEBPACK_IMPORTED_MODULE_1__subscribeToArray__["a" /* subscribeToArray */])(result);
    }
    else if (Object(__WEBPACK_IMPORTED_MODULE_6__isPromise__["a" /* isPromise */])(result)) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__subscribeToPromise__["a" /* subscribeToPromise */])(result);
    }
    else if (result && typeof result[__WEBPACK_IMPORTED_MODULE_8__symbol_iterator__["a" /* iterator */]] === 'function') {
        return Object(__WEBPACK_IMPORTED_MODULE_3__subscribeToIterable__["a" /* subscribeToIterable */])(result);
    }
    else if (result && typeof result[__WEBPACK_IMPORTED_MODULE_9__symbol_observable__["a" /* observable */]] === 'function') {
        return Object(__WEBPACK_IMPORTED_MODULE_4__subscribeToObservable__["a" /* subscribeToObservable */])(result);
    }
    else {
        var value = Object(__WEBPACK_IMPORTED_MODULE_7__isObject__["a" /* isObject */])(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected."
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};
//# sourceMappingURL=subscribeTo.js.map


/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return subscribeToPromise; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__hostReportError__ = __webpack_require__(54);
/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */

var subscribeToPromise = function (promise) {
    return function (subscriber) {
        promise.then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, __WEBPACK_IMPORTED_MODULE_0__hostReportError__["a" /* hostReportError */]);
        return subscriber;
    };
};
//# sourceMappingURL=subscribeToPromise.js.map


/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return subscribeToIterable; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__symbol_iterator__ = __webpack_require__(34);
/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

var subscribeToIterable = function (iterable) {
    return function (subscriber) {
        var iterator = iterable[__WEBPACK_IMPORTED_MODULE_0__symbol_iterator__["a" /* iterator */]]();
        do {
            var item = iterator.next();
            if (item.done) {
                subscriber.complete();
                break;
            }
            subscriber.next(item.value);
            if (subscriber.closed) {
                break;
            }
        } while (true);
        // Finalize the iterator if it happens to be a Generator
        if (typeof iterator.return === 'function') {
            subscriber.add(function () {
                if (iterator.return) {
                    iterator.return();
                }
            });
        }
        return subscriber;
    };
};
//# sourceMappingURL=subscribeToIterable.js.map


/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return subscribeToObservable; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__symbol_observable__ = __webpack_require__(19);
/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

/**
 * Subscribes to an object that implements Symbol.observable with the given
 * Subscriber.
 * @param obj An object that implements Symbol.observable
 */
var subscribeToObservable = function (obj) {
    return function (subscriber) {
        var obs = obj[__WEBPACK_IMPORTED_MODULE_0__symbol_observable__["a" /* observable */]]();
        if (typeof obs.subscribe !== 'function') {
            // Should be caught by observable subscribe function error handling.
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        }
        else {
            return obs.subscribe(subscriber);
        }
    };
};
//# sourceMappingURL=subscribeToObservable.js.map


/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isArrayLike; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
//# sourceMappingURL=isArrayLike.js.map


/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isPromise;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
//# sourceMappingURL=isPromise.js.map


/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = mergeAll;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mergeMap__ = __webpack_require__(192);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_identity__ = __webpack_require__(60);
/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */


/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll(concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    return Object(__WEBPACK_IMPORTED_MODULE_0__mergeMap__["a" /* mergeMap */])(__WEBPACK_IMPORTED_MODULE_1__util_identity__["a" /* identity */], concurrent);
}
//# sourceMappingURL=mergeAll.js.map


/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = defer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__from__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__empty__ = __webpack_require__(13);
/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

 // lol

/**
 * Creates an Observable that, on subscribe, calls an Observable factory to
 * make an Observable for each new Observer.
 *
 * <span class="informal">Creates the Observable lazily, that is, only when it
 * is subscribed.
 * </span>
 *
 * <img src="./img/defer.png" width="100%">
 *
 * `defer` allows you to create the Observable only when the Observer
 * subscribes, and create a fresh Observable for each Observer. It waits until
 * an Observer subscribes to it, and then it generates an Observable,
 * typically with an Observable factory function. It does this afresh for each
 * subscriber, so although each subscriber may think it is subscribing to the
 * same Observable, in fact each subscriber gets its own individual
 * Observable.
 *
 * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>
 * var clicksOrInterval = Rx.Observable.defer(function () {
 *   if (Math.random() > 0.5) {
 *     return Rx.Observable.fromEvent(document, 'click');
 *   } else {
 *     return Rx.Observable.interval(1000);
 *   }
 * });
 * clicksOrInterval.subscribe(x => console.log(x));
 *
 * // Results in the following behavior:
 * // If the result of Math.random() is greater than 0.5 it will listen
 * // for clicks anywhere on the "document"; when document is clicked it
 * // will log a MouseEvent object to the console. If the result is less
 * // than 0.5 it will emit ascending numbers, one every second(1000ms).
 *
 * @see {@link create}
 *
 * @param {function(): SubscribableOrPromise} observableFactory The Observable
 * factory function to invoke for each Observer that subscribes to the output
 * Observable. May also return a Promise, which will be converted on the fly
 * to an Observable.
 * @return {Observable} An Observable whose Observers' subscriptions trigger
 * an invocation of the given Observable factory function.
 * @static true
 * @name defer
 * @owner Observable
 */
function defer(observableFactory) {
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var input;
        try {
            input = observableFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = input ? Object(__WEBPACK_IMPORTED_MODULE_1__from__["a" /* from */])(input) : Object(__WEBPACK_IMPORTED_MODULE_2__empty__["b" /* empty */])();
        return source.subscribe(subscriber);
    });
}
//# sourceMappingURL=defer.js.map


/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isNumeric;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__isArray__ = __webpack_require__(9);
/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */

function isNumeric(val) {
    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    // adding 1 corrects loss of precision from parseFloat (#15100)
    return !Object(__WEBPACK_IMPORTED_MODULE_0__isArray__["a" /* isArray */])(val) && (val - parseFloat(val) + 1) >= 0;
}
//# sourceMappingURL=isNumeric.js.map


/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NEVER; });
/* harmony export (immutable) */ __webpack_exports__["b"] = never;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_noop__ = __webpack_require__(56);
/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */


/**
 * An Observable that emits no items to the Observer and never completes.
 *
 * <img src="./img/never.png" width="100%">
 *
 * A simple Observable that emits neither values nor errors nor the completion
 * notification. It can be used for testing purposes or for composing with other
 * Observables. Please note that by never emitting a complete notification, this
 * Observable keeps the subscription from being disposed automatically.
 * Subscriptions need to be manually disposed.
 *
 * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>
 * function info() {
 *   console.log('Will not be called');
 * }
 * var result = NEVER.startWith(7);
 * result.subscribe(x => console.log(x), info, info);
 *
 * @see {@link create}
 * @see {@link EMPTY}
 * @see {@link of}
 * @see {@link throwError}
 */
var NEVER = /*@__PURE__*/ new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](__WEBPACK_IMPORTED_MODULE_1__util_noop__["a" /* noop */]);
/**
 * @deprecated Deprecated in favor of using NEVER constant.
 */
function never() {
    return NEVER;
}
//# sourceMappingURL=never.js.map


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var selection_1 = __webpack_require__(28);
var data_util_1 = __webpack_require__(11);
var text_highlight_directive_1 = __webpack_require__(29);
var api_service_1 = __webpack_require__(10);
var column_component_1 = __webpack_require__(35);
var grid_common_1 = __webpack_require__(14);
var IgxGridCellComponent = (function () {
    function IgxGridCellComponent(gridAPI, selectionApi, cdr, element) {
        this.gridAPI = gridAPI;
        this.selectionApi = selectionApi;
        this.cdr = cdr;
        this.element = element;
        this.highlightClass = "igx-highlight";
        this.activeHighlightClass = "igx-highlight__active";
        this.tabindex = 0;
        this.role = "gridcell";
        this.defaultCssClass = "igx-grid__td";
        this.isFocused = false;
        this.isSelected = false;
        this._inEditMode = false;
    }
    Object.defineProperty(IgxGridCellComponent.prototype, "formatter", {
        get: function () {
            return this.column.formatter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "context", {
        get: function () {
            return {
                $implicit: this.value,
                cell: this
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "template", {
        get: function () {
            if (this.inEditMode) {
                var inlineEditorTemplate = this.column.inlineEditorTemplate;
                return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;
            }
            if (this.cellTemplate) {
                return this.cellTemplate;
            }
            return this.defaultCellTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "gridID", {
        get: function () {
            return this.row.gridID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "grid", {
        get: function () {
            return this.gridAPI.get(this.gridID);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "rowIndex", {
        get: function () {
            return this.row.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "columnIndex", {
        get: function () {
            return this.column.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "visibleColumnIndex", {
        get: function () {
            return this.column.visibleIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "unpinnedColumnIndex", {
        get: function () {
            return this.grid.unpinnedColumns.indexOf(this.column);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "cellID", {
        get: function () {
            var primaryKey = this.grid.primaryKey;
            var rowID = primaryKey ? this.row.rowData[primaryKey] : this.row.rowData;
            return { rowID: rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "nativeElement", {
        get: function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "inEditMode", {
        get: function () {
            return this._inEditMode;
        },
        set: function (value) {
            var originalValue = this._inEditMode;
            this._inEditMode = value;
            if (this._inEditMode) {
                this.grid.cellInEditMode = this;
            }
            else if (!originalValue) {
                this.grid.cellInEditMode = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "readonly", {
        get: function () {
            return !this.column.editable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "cellInEditMode", {
        get: function () {
            return this.inEditMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "describedby", {
        get: function () {
            return this.row.gridID + "_" + this.column.field;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "styleClasses", {
        get: function () {
            return this.defaultCssClass + " " + this.column.cellClasses;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "width", {
        get: function () {
            var hasVerticalScroll = !this.grid.verticalScrollContainer.dc.instance.notVirtual;
            var isPercentageWidth = this.column.width && typeof this.column.width === "string" && this.column.width.indexOf("%") !== -1;
            return this.isLastUnpinned && hasVerticalScroll && !!this.column.width && !isPercentageWidth ?
                (parseInt(this.column.width, 10) - 18) + "px" : this.column.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "editModeCSS", {
        get: function () {
            return this._inEditMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "focused", {
        get: function () {
            return this.isFocused;
        },
        set: function (val) {
            this.isFocused = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "applyNumberCSSClass", {
        get: function () {
            return this.column.dataType === data_util_1.DataType.Number;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "isPinned", {
        get: function () {
            return this.column.pinned;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "isLastPinned", {
        get: function () {
            var pinnedCols = this.grid.pinnedColumns;
            return pinnedCols[pinnedCols.length - 1] === this.column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "isLastUnpinned", {
        get: function () {
            var unpinnedColumns = this.grid.unpinnedColumns;
            return unpinnedColumns[unpinnedColumns.length - 1] === this.column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCellComponent.prototype, "selected", {
        get: function () {
            return this.isSelected = this.isCellSelected();
        },
        set: function (val) {
            this.isSelected = val;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridCellComponent.prototype._updateCellSelectionStatus = function () {
        this._clearCellSelection();
        this.selectionApi.set_selection(this.cellSelectionID, this.selectionApi.select_item(this.cellSelectionID, this.cellID));
    };
    IgxGridCellComponent.prototype._clearCellSelection = function () {
        var cell = this._getLastSelectedCell();
        if (cell) {
            cell.selected = false;
            cell.focused = false;
        }
        this.selectionApi.set_selection(this.cellSelectionID, []);
    };
    IgxGridCellComponent.prototype._getLastSelectedCell = function () {
        var selection = this.selectionApi.get_selection(this.cellSelectionID);
        if (selection && selection.length > 0) {
            var cellID = selection[0];
            return this.gridAPI.get_cell_by_index(this.gridID, cellID.rowIndex, cellID.columnID);
        }
    };
    IgxGridCellComponent.prototype.isCellSelected = function () {
        var selection = this.selectionApi.get_selection(this.cellSelectionID);
        if (selection && selection.length > 0) {
            var selectedCellID = selection[0];
            return this.cellID.rowID === selectedCellID.rowID &&
                this.cellID.columnID === selectedCellID.columnID;
        }
        return false;
    };
    IgxGridCellComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.cellSelectionID = this.gridID + "-cells";
        this.chunkLoadedHor = this.row.virtDirRow.onChunkLoad.subscribe(function () {
            if (!_this.selected) {
                _this.nativeElement.blur();
            }
            _this.cdr.markForCheck();
        });
        this.chunkLoadedVer = this.grid.verticalScrollContainer.onChunkLoad.subscribe(function () {
            if (!_this.selected) {
                _this.nativeElement.blur();
            }
            _this.cdr.markForCheck();
        });
    };
    IgxGridCellComponent.prototype.ngOnDestroy = function () {
        if (this.chunkLoadedHor) {
            this.chunkLoadedHor.unsubscribe();
        }
        if (this.chunkLoadedVer) {
            this.chunkLoadedVer.unsubscribe();
        }
    };
    IgxGridCellComponent.prototype.ngAfterViewInit = function () {
        if (this.highlight && this.grid.lastSearchInfo.searchText) {
            this.highlight.highlight(this.grid.lastSearchInfo.searchText, this.grid.lastSearchInfo.caseSensitive);
            this.highlight.activateIfNecessary();
        }
    };
    IgxGridCellComponent.prototype.update = function (val) {
        var args = { row: this.row, cell: this, currentValue: this.value, newValue: val };
        this.grid.onEditDone.emit(args);
        this.value = args.newValue;
        this.gridAPI.update(this.gridID, this);
        this.grid.refreshSearch();
    };
    IgxGridCellComponent.prototype.onDoubleClick = function (event) {
        if (this.column.editable) {
            this.inEditMode = true;
        }
        this.grid.onDoubleClick.emit({
            cell: this,
            event: event
        });
    };
    IgxGridCellComponent.prototype.onClick = function (event) {
        this.grid.onCellClick.emit({
            cell: this,
            event: event
        });
    };
    IgxGridCellComponent.prototype.onContextMenu = function (event) {
        this.grid.onContextMenu.emit({
            cell: this,
            event: event
        });
    };
    IgxGridCellComponent.prototype.onFocus = function (event) {
        this.isFocused = true;
        this.selected = true;
        this._updateCellSelectionStatus();
        this.row.focused = true;
        if (this.grid.cellInEditMode && this.grid.cellInEditMode !== this) {
            this.grid.cellInEditMode.inEditMode = false;
        }
        this.grid.onSelection.emit({
            cell: this,
            event: event
        });
    };
    IgxGridCellComponent.prototype.onBlur = function (event) {
        this.isFocused = false;
        this.row.focused = false;
    };
    IgxGridCellComponent.prototype.onKeydownArrowLeft = function (event) {
        if (this.inEditMode) {
            return;
        }
        event.preventDefault();
        var rowIndex = this.rowIndex;
        var columnIndex = this.visibleColumnIndex - 1;
        if (columnIndex >= 0) {
            var target = this.gridAPI.get_cell_by_visible_index(this.gridID, rowIndex, columnIndex);
            var targetUnpinnedIndex = this.unpinnedColumnIndex - 1;
            var horVirtScroll = this.grid.parentVirtDir.getHorizontalScroll();
            var bVirtSubscribe = true;
            if (!horVirtScroll && !target) {
                return;
            }
            if (target) {
                var containerLeftOffset = parseInt(this.row.virtDirRow.dc.instance._viewContainer.element.nativeElement.style.left, 10);
                var targetEndLeftOffset = target.nativeElement.offsetLeft + containerLeftOffset;
                if (!target.isPinned && targetEndLeftOffset < 0) {
                    horVirtScroll.scrollLeft = this.row.virtDirRow.getColumnScrollLeft(targetUnpinnedIndex);
                }
                else {
                    target.nativeElement.focus();
                    bVirtSubscribe = false;
                }
            }
            else {
                if (!this.column.pinned) {
                    this.row.virtDirRow.scrollPrev();
                }
                else {
                    this.row.virtDirRow.scrollTo(this.grid.unpinnedColumns.length - 1);
                }
            }
            if (bVirtSubscribe) {
                this.grid._focusNextCell(this.rowIndex, columnIndex, "left");
            }
        }
    };
    IgxGridCellComponent.prototype.onKeydownCtrlArrowLeft = function () {
        if (this.inEditMode) {
            return;
        }
        var target = this.gridAPI.get_cell_by_visible_index(this.gridID, this.rowIndex, this.row.cells.first.visibleColumnIndex);
        var columnIndex = target.visibleColumnIndex;
        if (target) {
            var containerLeftOffset = parseInt(this.row.virtDirRow.dc.instance._viewContainer.element.nativeElement.style.left, 10);
            var targetEndLeftOffset = target.nativeElement.offsetLeft + containerLeftOffset;
            if (!target.isPinned && targetEndLeftOffset < 0) {
                var horVirtScroll = this.grid.parentVirtDir.getHorizontalScroll();
                horVirtScroll.scrollLeft = this.row.virtDirRow.getColumnScrollLeft(target.unpinnedColumnIndex);
                this.grid._focusNextCell(this.rowIndex, columnIndex, "left");
            }
            else {
                target.nativeElement.focus();
            }
        }
    };
    IgxGridCellComponent.prototype.onKeydownArrowRight = function (event) {
        if (this.inEditMode) {
            return;
        }
        event.preventDefault();
        var visibleColumns = this.grid.visibleColumns;
        var rowIndex = this.rowIndex;
        var columnIndex = this.visibleColumnIndex + 1;
        if (columnIndex > -1 && columnIndex <= visibleColumns.length - 1) {
            var target = this.gridAPI.get_cell_by_visible_index(this.gridID, rowIndex, columnIndex);
            var targetUnpinnedIndex = this.unpinnedColumnIndex + 1;
            var horVirtScroll = this.grid.parentVirtDir.getHorizontalScroll();
            var verticalVirtScroll = this.grid.verticalScrollContainer.getVerticalScroll();
            var verticalVirtScrollWidth = verticalVirtScroll &&
                verticalVirtScroll.offsetHeight < verticalVirtScroll.children[0].offsetHeight ?
                this.grid.verticalScrollContainer.getVerticalScroll().offsetWidth :
                0;
            var virtContainerSize = parseInt(this.row.virtDirRow.igxForContainerSize, 10) - verticalVirtScrollWidth;
            var bVirtSubscribe = true;
            if (!horVirtScroll && !target) {
                return;
            }
            if (target) {
                var containerLeftOffset = parseInt(this.row.virtDirRow.dc.instance._viewContainer.element.nativeElement.style.left, 10);
                var targetStartLeftOffset = target.nativeElement.offsetLeft + containerLeftOffset;
                var targetEndLeftOffset = target.nativeElement.offsetLeft +
                    parseInt(visibleColumns[columnIndex].width, 10) +
                    containerLeftOffset;
                if (!target.isPinned && targetEndLeftOffset > virtContainerSize) {
                    var oldScrollLeft = horVirtScroll.scrollLeft;
                    var targetScrollLeft = this.row.virtDirRow.getColumnScrollLeft(targetUnpinnedIndex + 1) - virtContainerSize;
                    horVirtScroll.scrollLeft = targetScrollLeft;
                    if (oldScrollLeft === horVirtScroll.scrollLeft && oldScrollLeft !== targetScrollLeft) {
                        target.nativeElement.focus();
                        bVirtSubscribe = false;
                    }
                }
                else if (!target.isPinned && targetStartLeftOffset < 0) {
                    horVirtScroll.scrollLeft = 0;
                }
                else {
                    target.nativeElement.focus();
                    bVirtSubscribe = false;
                }
            }
            else {
                horVirtScroll.scrollLeft = this.row.virtDirRow.getColumnScrollLeft(targetUnpinnedIndex + 1) - virtContainerSize;
            }
            if (bVirtSubscribe) {
                this.grid._focusNextCell(this.rowIndex, columnIndex, "right");
            }
        }
    };
    IgxGridCellComponent.prototype.onKeydownCtrlArrowRight = function () {
        if (this.inEditMode) {
            return;
        }
        var target = this.gridAPI.get_cell_by_visible_index(this.gridID, this.rowIndex, this.row.cells.last.visibleColumnIndex);
        var columnIndex = target.visibleColumnIndex;
        if (target) {
            var containerLeftOffset = parseInt(this.row.virtDirRow.dc.instance._viewContainer.element.nativeElement.style.left, 10);
            var targetEndLeftOffset = target.nativeElement.offsetLeft + parseInt(target.column.width, 10) + containerLeftOffset;
            var verticalVirtScroll = this.grid.verticalScrollContainer.getVerticalScroll();
            var verticalVirtScrollWidth = verticalVirtScroll &&
                verticalVirtScroll.offsetHeight < verticalVirtScroll.children[0].offsetHeight ?
                this.grid.verticalScrollContainer.getVerticalScroll().offsetWidth :
                0;
            var virtContainerSize = parseInt(this.row.virtDirRow.igxForContainerSize, 10) - verticalVirtScrollWidth;
            if (targetEndLeftOffset > virtContainerSize) {
                var horVirtScroll = this.grid.parentVirtDir.getHorizontalScroll();
                var oldScrollLeft = horVirtScroll.scrollLeft;
                var targetScrollLeft = this.row.virtDirRow.getColumnScrollLeft(target.unpinnedColumnIndex + 1) - virtContainerSize;
                horVirtScroll.scrollLeft = targetScrollLeft;
                if (oldScrollLeft === horVirtScroll.scrollLeft && oldScrollLeft !== targetScrollLeft) {
                    target.nativeElement.focus();
                }
                else {
                    this.grid._focusNextCell(this.rowIndex, columnIndex, "right");
                }
            }
            else {
                target.nativeElement.focus();
            }
        }
    };
    IgxGridCellComponent.prototype.onKeydownArrowUp = function (event) {
        if (this.inEditMode) {
            return;
        }
        event.preventDefault();
        var lastCell = this._getLastSelectedCell();
        var rowIndex = lastCell ? lastCell.rowIndex - 1 : this.grid.rowList.last.index;
        this._clearCellSelection();
        this.grid.navigateUp(rowIndex, this.visibleColumnIndex);
    };
    IgxGridCellComponent.prototype.onKeydownArrowDown = function (event) {
        if (this.inEditMode) {
            return;
        }
        event.preventDefault();
        var lastCell = this._getLastSelectedCell();
        var rowIndex = lastCell ? lastCell.rowIndex + 1 : this.grid.rowList.first.index;
        this._clearCellSelection();
        this.grid.navigateDown(rowIndex, this.visibleColumnIndex);
    };
    IgxGridCellComponent.prototype.onKeydownEnterEditMode = function () {
        if (this.column.editable) {
            this.inEditMode = !this.inEditMode;
            this.nativeElement.focus();
        }
    };
    IgxGridCellComponent.prototype.onKeydownExitEditMode = function () {
        this.inEditMode = false;
        this.nativeElement.focus();
    };
    IgxGridCellComponent.prototype.highlightText = function (text, caseSensitive) {
        return this.highlight ? this.highlight.highlight(text, caseSensitive) : 0;
    };
    IgxGridCellComponent.prototype.clearHighlight = function () {
        if (this.highlight) {
            this.highlight.clearHighlight();
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", column_component_1.IgxColumnComponent)
    ], IgxGridCellComponent.prototype, "column", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridCellComponent.prototype, "row", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxGridCellComponent.prototype, "cellTemplate", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridCellComponent.prototype, "value", void 0);
    __decorate([
        grid_common_1.autoWire(true),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxGridCellComponent.prototype, "inEditMode", null);
    __decorate([
        core_1.HostBinding("attr.tabindex"),
        __metadata("design:type", Object)
    ], IgxGridCellComponent.prototype, "tabindex", void 0);
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxGridCellComponent.prototype, "role", void 0);
    __decorate([
        core_1.HostBinding("attr.aria-readonly"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxGridCellComponent.prototype, "readonly", null);
    __decorate([
        core_1.HostBinding("class.igx_grid__cell--edit"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridCellComponent.prototype, "cellInEditMode", null);
    __decorate([
        core_1.HostBinding("attr.aria-describedby"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxGridCellComponent.prototype, "describedby", null);
    __decorate([
        core_1.HostBinding("class"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxGridCellComponent.prototype, "styleClasses", null);
    __decorate([
        core_1.HostBinding("style.min-width"),
        core_1.HostBinding("style.flex-basis"),
        core_1.HostBinding("class.igx-grid__td--fw"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridCellComponent.prototype, "width", null);
    __decorate([
        core_1.HostBinding("class.igx-grid__td--editing"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridCellComponent.prototype, "editModeCSS", null);
    __decorate([
        grid_common_1.autoWire(true),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxGridCellComponent.prototype, "focused", null);
    __decorate([
        core_1.HostBinding("class.igx-grid__td--number"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridCellComponent.prototype, "applyNumberCSSClass", null);
    __decorate([
        core_1.HostBinding("class.igx-grid__th--pinned"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridCellComponent.prototype, "isPinned", null);
    __decorate([
        core_1.HostBinding("class.igx-grid__th--pinned-last"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridCellComponent.prototype, "isLastPinned", null);
    __decorate([
        core_1.HostBinding("attr.aria-selected"),
        core_1.HostBinding("class.igx-grid__td--selected"),
        grid_common_1.autoWire(true),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxGridCellComponent.prototype, "selected", null);
    __decorate([
        core_1.ViewChild("defaultCell", { read: core_1.TemplateRef }),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxGridCellComponent.prototype, "defaultCellTemplate", void 0);
    __decorate([
        core_1.ViewChild("inlineEditor", { read: core_1.TemplateRef }),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxGridCellComponent.prototype, "inlineEditorTemplate", void 0);
    __decorate([
        core_1.ViewChild(core_1.forwardRef(function () { return text_highlight_directive_1.IgxTextHighlightDirective; }), { read: text_highlight_directive_1.IgxTextHighlightDirective }),
        __metadata("design:type", text_highlight_directive_1.IgxTextHighlightDirective)
    ], IgxGridCellComponent.prototype, "highlight", void 0);
    __decorate([
        grid_common_1.autoWire(true),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "ngOnInit", null);
    __decorate([
        grid_common_1.autoWire(true),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "update", null);
    __decorate([
        core_1.HostListener("dblclick", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onDoubleClick", null);
    __decorate([
        core_1.HostListener("click", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onClick", null);
    __decorate([
        core_1.HostListener("contextmenu", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onContextMenu", null);
    __decorate([
        core_1.HostListener("focus", ["$event"]),
        grid_common_1.autoWire(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onFocus", null);
    __decorate([
        core_1.HostListener("blur", ["$event"]),
        grid_common_1.autoWire(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onBlur", null);
    __decorate([
        core_1.HostListener("keydown.arrowleft", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onKeydownArrowLeft", null);
    __decorate([
        core_1.HostListener("keydown.control.arrowleft"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onKeydownCtrlArrowLeft", null);
    __decorate([
        core_1.HostListener("keydown.arrowright", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onKeydownArrowRight", null);
    __decorate([
        core_1.HostListener("keydown.control.arrowright"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onKeydownCtrlArrowRight", null);
    __decorate([
        core_1.HostListener("keydown.arrowup", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onKeydownArrowUp", null);
    __decorate([
        core_1.HostListener("keydown.arrowdown", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onKeydownArrowDown", null);
    __decorate([
        core_1.HostListener("keydown.enter"),
        core_1.HostListener("keydown.f2"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onKeydownEnterEditMode", null);
    __decorate([
        core_1.HostListener("keydown.escape"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxGridCellComponent.prototype, "onKeydownExitEditMode", null);
    IgxGridCellComponent = __decorate([
        core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: "igx-grid-cell",
            template: __webpack_require__(208)
        }),
        __metadata("design:paramtypes", [api_service_1.IgxGridAPIService,
            selection_1.IgxSelectionAPIService,
            core_1.ChangeDetectorRef,
            core_1.ElementRef])
    ], IgxGridCellComponent);
    return IgxGridCellComponent;
}());
exports.IgxGridCellComponent = IgxGridCellComponent;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var utils_1 = __webpack_require__(27);
var data_util_1 = __webpack_require__(11);
var api_service_1 = __webpack_require__(10);
var IgxGridSortingPipe = (function () {
    function IgxGridSortingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridSortingPipe.prototype.transform = function (collection, expressions, id, pipeTrigger) {
        var state = { expressions: [] };
        state.expressions = this.gridAPI.get(id).sortingExpressions;
        if (!state.expressions.length) {
            return collection;
        }
        return data_util_1.DataUtil.sort(utils_1.cloneArray(collection), state);
    };
    IgxGridSortingPipe = __decorate([
        core_1.Pipe({
            name: "gridSort",
            pure: true
        }),
        __metadata("design:paramtypes", [api_service_1.IgxGridAPIService])
    ], IgxGridSortingPipe);
    return IgxGridSortingPipe;
}());
exports.IgxGridSortingPipe = IgxGridSortingPipe;
var IgxGridPreGroupingPipe = (function () {
    function IgxGridPreGroupingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridPreGroupingPipe.prototype.transform = function (collection, expression, expansion, defaultExpanded, id, pipeTrigger) {
        var state = { expressions: [], expansion: [], defaultExpanded: defaultExpanded };
        var grid = this.gridAPI.get(id);
        state.expressions = grid.groupingExpressions;
        if (!state.expressions.length) {
            return collection;
        }
        state.expansion = grid.groupingExpansionState;
        state.defaultExpanded = grid.groupByDefaultExpanded;
        return data_util_1.DataUtil.group(utils_1.cloneArray(collection), state);
    };
    IgxGridPreGroupingPipe = __decorate([
        core_1.Pipe({
            name: "gridPreGroupBy",
            pure: true
        }),
        __metadata("design:paramtypes", [api_service_1.IgxGridAPIService])
    ], IgxGridPreGroupingPipe);
    return IgxGridPreGroupingPipe;
}());
exports.IgxGridPreGroupingPipe = IgxGridPreGroupingPipe;
var IgxGridPostGroupingPipe = (function () {
    function IgxGridPostGroupingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridPostGroupingPipe.prototype.transform = function (collection, expression, expansion, defaultExpanded, id, pipeTrigger) {
        var state = { expressions: [], expansion: [], defaultExpanded: defaultExpanded };
        var grid = this.gridAPI.get(id);
        state.expressions = grid.groupingExpressions;
        if (!state.expressions.length) {
            return collection;
        }
        state.expansion = grid.groupingExpansionState;
        state.defaultExpanded = grid.groupByDefaultExpanded;
        return data_util_1.DataUtil.restoreGroups(utils_1.cloneArray(collection), state);
    };
    IgxGridPostGroupingPipe = __decorate([
        core_1.Pipe({
            name: "gridPostGroupBy",
            pure: true
        }),
        __metadata("design:paramtypes", [api_service_1.IgxGridAPIService])
    ], IgxGridPostGroupingPipe);
    return IgxGridPostGroupingPipe;
}());
exports.IgxGridPostGroupingPipe = IgxGridPostGroupingPipe;
var IgxGridPagingPipe = (function () {
    function IgxGridPagingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridPagingPipe.prototype.transform = function (collection, page, perPage, id, pipeTrigger) {
        if (page === void 0) { page = 0; }
        if (perPage === void 0) { perPage = 15; }
        if (!this.gridAPI.get(id).paging) {
            return collection;
        }
        var state = {
            index: page,
            recordsPerPage: perPage
        };
        var result = data_util_1.DataUtil.page(utils_1.cloneArray(collection), state);
        this.gridAPI.get(id).pagingState = state;
        return result;
    };
    IgxGridPagingPipe = __decorate([
        core_1.Pipe({
            name: "gridPaging",
            pure: true
        }),
        __metadata("design:paramtypes", [api_service_1.IgxGridAPIService])
    ], IgxGridPagingPipe);
    return IgxGridPagingPipe;
}());
exports.IgxGridPagingPipe = IgxGridPagingPipe;
var IgxGridFilteringPipe = (function () {
    function IgxGridFilteringPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    IgxGridFilteringPipe.prototype.transform = function (collection, expressions, logic, id, pipeTrigger) {
        var state = { expressions: [], logic: logic };
        state.expressions = this.gridAPI.get(id).filteringExpressions;
        if (!state.expressions.length) {
            return collection;
        }
        var result = data_util_1.DataUtil.filter(utils_1.cloneArray(collection), state);
        this.gridAPI.get(id).filteredData = result;
        return result;
    };
    IgxGridFilteringPipe = __decorate([
        core_1.Pipe({
            name: "gridFiltering",
            pure: true
        }),
        __metadata("design:paramtypes", [api_service_1.IgxGridAPIService])
    ], IgxGridFilteringPipe);
    return IgxGridFilteringPipe;
}());
exports.IgxGridFilteringPipe = IgxGridFilteringPipe;
var IgxGridFilterConditionPipe = (function () {
    function IgxGridFilterConditionPipe() {
    }
    IgxGridFilterConditionPipe.prototype.transform = function (value) {
        return value.split(/(?=[A-Z])/).join(" ");
    };
    IgxGridFilterConditionPipe = __decorate([
        core_1.Pipe({
            name: "filterCondition",
            pure: true
        })
    ], IgxGridFilterConditionPipe);
    return IgxGridFilterConditionPipe;
}());
exports.IgxGridFilterConditionPipe = IgxGridFilterConditionPipe;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var selection_1 = __webpack_require__(28);
var api_service_1 = __webpack_require__(10);
var grid_common_1 = __webpack_require__(14);
var IgxGridGroupByRowComponent = (function () {
    function IgxGridGroupByRowComponent(gridAPI, selectionAPI, element, cdr) {
        this.gridAPI = gridAPI;
        this.selectionAPI = selectionAPI;
        this.element = element;
        this.cdr = cdr;
        this.defaultCssClass = "igx-grid__tr--group";
        this.isFocused = false;
        this.tabindex = 0;
    }
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "focused", {
        get: function () {
            return this.isFocused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "expanded", {
        get: function () {
            return this.grid.isExpandedGroup(this.groupRow);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "describedBy", {
        get: function () {
            return this.gridID + "_" + this.groupRow.expression.fieldName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "padding", {
        get: function () {
            return this.groupRow.level * this.grid.groupByIndentation + "px";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "styleClasses", {
        get: function () {
            return "" + this.defaultCssClass;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridGroupByRowComponent.prototype.toggle = function () {
        this.grid.toggleGroup(this.groupRow);
    };
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "grid", {
        get: function () {
            return this.gridAPI.get(this.gridID);
        },
        enumerable: true,
        configurable: true
    });
    IgxGridGroupByRowComponent.prototype.onKeydownArrowDown = function (event) {
        var colIndex = this._getSelectedColIndex() || this._getPrevSelectedColIndex();
        var visibleColumnIndex = colIndex ? this.grid.columnList.toArray()[colIndex].visibleIndex : 0;
        event.preventDefault();
        var rowIndex = this.index + 1;
        this.grid.navigateDown(rowIndex, visibleColumnIndex);
    };
    IgxGridGroupByRowComponent.prototype.onKeydownArrowUp = function (event) {
        var colIndex = this._getSelectedColIndex() || this._getPrevSelectedColIndex();
        var visibleColumnIndex = colIndex ? this.grid.columnList.toArray()[colIndex].visibleIndex : 0;
        event.preventDefault();
        if (this.index === 0) {
            return;
        }
        var rowIndex = this.index - 1;
        this.grid.navigateUp(rowIndex, visibleColumnIndex);
    };
    IgxGridGroupByRowComponent.prototype.onFocus = function () {
        this.isFocused = true;
    };
    IgxGridGroupByRowComponent.prototype.onBlur = function () {
        this.isFocused = false;
    };
    IgxGridGroupByRowComponent.prototype._getSelectedColIndex = function () {
        var selection = this.selectionAPI.get_selection(this.gridID + "-cells");
        if (selection && selection.length > 0) {
            return selection[0].columnID;
        }
    };
    IgxGridGroupByRowComponent.prototype._getPrevSelectedColIndex = function () {
        var selection = this.selectionAPI.get_prev_selection(this.gridID + "-cells");
        if (selection && selection.length > 0) {
            return selection[0].columnID;
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxGridGroupByRowComponent.prototype, "index", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxGridGroupByRowComponent.prototype, "gridID", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridGroupByRowComponent.prototype, "groupRow", void 0);
    __decorate([
        core_1.ViewChild("groupContent"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxGridGroupByRowComponent.prototype, "groupContent", void 0);
    __decorate([
        core_1.HostBinding("attr.aria-expanded"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxGridGroupByRowComponent.prototype, "expanded", null);
    __decorate([
        core_1.HostBinding("attr.aria-describedby"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxGridGroupByRowComponent.prototype, "describedBy", null);
    __decorate([
        core_1.HostBinding("style.padding-left"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxGridGroupByRowComponent.prototype, "padding", null);
    __decorate([
        core_1.HostBinding("class"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxGridGroupByRowComponent.prototype, "styleClasses", null);
    __decorate([
        core_1.HostListener("keydown.enter"),
        core_1.HostListener("keydown.space"),
        grid_common_1.autoWire(true),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxGridGroupByRowComponent.prototype, "toggle", null);
    __decorate([
        core_1.HostListener("keydown.arrowdown", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridGroupByRowComponent.prototype, "onKeydownArrowDown", null);
    __decorate([
        core_1.HostListener("keydown.arrowup", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridGroupByRowComponent.prototype, "onKeydownArrowUp", null);
    IgxGridGroupByRowComponent = __decorate([
        core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: "igx-grid-groupby-row",
            template: __webpack_require__(217),
            styles: [":host {\n        display: flex;\n        background: inherit;\n        outline-style: none;\n        height: 50px;\n    }"]
        }),
        __metadata("design:paramtypes", [api_service_1.IgxGridAPIService,
            selection_1.IgxSelectionAPIService,
            core_1.ElementRef,
            core_1.ChangeDetectorRef])
    ], IgxGridGroupByRowComponent);
    return IgxGridGroupByRowComponent;
}());
exports.IgxGridGroupByRowComponent = IgxGridGroupByRowComponent;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var checkbox_component_1 = __webpack_require__(40);
var selection_1 = __webpack_require__(28);
var for_of_directive_1 = __webpack_require__(42);
var api_service_1 = __webpack_require__(10);
var cell_component_1 = __webpack_require__(103);
var grid_common_1 = __webpack_require__(14);
var IgxGridRowComponent = (function () {
    function IgxGridRowComponent(gridAPI, selectionAPI, element, cdr) {
        this.gridAPI = gridAPI;
        this.selectionAPI = selectionAPI;
        this.element = element;
        this.cdr = cdr;
        this.tabindex = 0;
        this.role = "row";
        this.defaultCssClass = "igx-grid__tr";
        this._rowSelection = false;
        this.isFocused = false;
    }
    Object.defineProperty(IgxGridRowComponent.prototype, "rowHeight", {
        get: function () {
            return this.grid.rowHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridRowComponent.prototype, "styleClasses", {
        get: function () {
            return this.defaultCssClass + " " + (this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridRowComponent.prototype, "focused", {
        get: function () {
            return this.isFocused;
        },
        set: function (val) {
            this.isFocused = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridRowComponent.prototype, "columns", {
        get: function () {
            return this.grid.visibleColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridRowComponent.prototype, "pinnedColumns", {
        get: function () {
            return this.grid.pinnedColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridRowComponent.prototype, "unpinnedColumns", {
        get: function () {
            return this.grid.unpinnedColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridRowComponent.prototype, "rowSelectable", {
        get: function () {
            return this.grid.rowSelectable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridRowComponent.prototype, "grid", {
        get: function () {
            return this.gridAPI.get(this.gridID);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridRowComponent.prototype, "rowID", {
        get: function () {
            var primaryKey = this.grid.primaryKey;
            return primaryKey ? this.rowData[primaryKey] : this.rowData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridRowComponent.prototype, "nativeElement", {
        get: function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridRowComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.chunkLoaded$ = this.virtDirRow.onChunkLoad.subscribe(function () {
            if (_this.grid.cellInEditMode) {
                _this.grid.cellInEditMode.inEditMode = false;
            }
        });
    };
    IgxGridRowComponent.prototype.ngOnDestroy = function () {
        if (this.chunkLoaded$) {
            this.chunkLoaded$.unsubscribe();
        }
    };
    IgxGridRowComponent.prototype.onFocus = function (event) {
        this.isFocused = true;
    };
    IgxGridRowComponent.prototype.onBlur = function (event) {
        this.isFocused = false;
    };
    IgxGridRowComponent.prototype.onCheckboxClick = function (event) {
        var newSelection = (event.checked) ?
            this.selectionAPI.select_item(this.gridID, this.rowID) :
            this.selectionAPI.deselect_item(this.gridID, this.rowID);
        this.grid.triggerRowSelectionChange(newSelection, this, event);
    };
    Object.defineProperty(IgxGridRowComponent.prototype, "rowCheckboxAriaLabel", {
        get: function () {
            return this.grid.primaryKey ?
                this.isSelected ? "Deselect row with key " + this.rowID : "Select row with key " + this.rowID :
                this.isSelected ? "Deselect row" : "Select row";
        },
        enumerable: true,
        configurable: true
    });
    IgxGridRowComponent.prototype.ngDoCheck = function () {
        this.isSelected = this.rowSelectable ?
            this.grid.allRowsSelected ? true : this.selectionAPI.is_item_selected(this.gridID, this.rowID) :
            this.selectionAPI.is_item_selected(this.gridID, this.rowID);
        this.cdr.markForCheck();
        if (this.checkboxElement) {
            this.checkboxElement.checked = this.isSelected;
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridRowComponent.prototype, "rowData", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxGridRowComponent.prototype, "index", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxGridRowComponent.prototype, "gridID", void 0);
    __decorate([
        core_1.ViewChild("igxDirRef", { read: for_of_directive_1.IgxForOfDirective }),
        __metadata("design:type", for_of_directive_1.IgxForOfDirective)
    ], IgxGridRowComponent.prototype, "virtDirRow", void 0);
    __decorate([
        core_1.ViewChild(core_1.forwardRef(function () { return checkbox_component_1.IgxCheckboxComponent; }), { read: checkbox_component_1.IgxCheckboxComponent }),
        __metadata("design:type", checkbox_component_1.IgxCheckboxComponent)
    ], IgxGridRowComponent.prototype, "checkboxElement", void 0);
    __decorate([
        core_1.ViewChildren(core_1.forwardRef(function () { return cell_component_1.IgxGridCellComponent; }), { read: cell_component_1.IgxGridCellComponent }),
        __metadata("design:type", core_1.QueryList)
    ], IgxGridRowComponent.prototype, "cells", void 0);
    __decorate([
        core_1.HostBinding("style.height.px"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridRowComponent.prototype, "rowHeight", null);
    __decorate([
        core_1.HostBinding("attr.tabindex"),
        __metadata("design:type", Object)
    ], IgxGridRowComponent.prototype, "tabindex", void 0);
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxGridRowComponent.prototype, "role", void 0);
    __decorate([
        core_1.HostBinding("class"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxGridRowComponent.prototype, "styleClasses", null);
    __decorate([
        core_1.HostBinding("attr.aria-selected"),
        core_1.HostBinding("class.igx-grid__tr--selected"),
        __metadata("design:type", Boolean)
    ], IgxGridRowComponent.prototype, "isSelected", void 0);
    __decorate([
        grid_common_1.autoWire(true),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxGridRowComponent.prototype, "ngOnInit", null);
    __decorate([
        core_1.HostListener("focus", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridRowComponent.prototype, "onFocus", null);
    __decorate([
        core_1.HostListener("blur", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridRowComponent.prototype, "onBlur", null);
    IgxGridRowComponent = __decorate([
        core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: "igx-grid-row",
            template: __webpack_require__(218)
        }),
        __metadata("design:paramtypes", [api_service_1.IgxGridAPIService,
            selection_1.IgxSelectionAPIService,
            core_1.ElementRef,
            core_1.ChangeDetectorRef])
    ], IgxGridRowComponent);
    return IgxGridRowComponent;
}());
exports.IgxGridRowComponent = IgxGridRowComponent;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var ripple_directive_1 = __webpack_require__(12);
var list_item_component_1 = __webpack_require__(108);
var list_common_1 = __webpack_require__(61);
var NEXT_ID = 0;
var IgxListComponent = (function () {
    function IgxListComponent(element) {
        this.element = element;
        this.id = "igx-list-" + NEXT_ID++;
        this.allowLeftPanning = false;
        this.allowRightPanning = false;
        this.onLeftPan = new core_1.EventEmitter();
        this.onRightPan = new core_1.EventEmitter();
        this.onPanStateChange = new core_1.EventEmitter();
        this.onItemClicked = new core_1.EventEmitter();
    }
    Object.defineProperty(IgxListComponent.prototype, "role", {
        get: function () {
            return "list";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "isListEmpty", {
        get: function () {
            return !this.children || this.children.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "cssClass", {
        get: function () {
            return this.children && this.children.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "items", {
        get: function () {
            var items = [];
            if (this.children !== undefined) {
                for (var _i = 0, _a = this.children.toArray(); _i < _a.length; _i++) {
                    var child = _a[_i];
                    if (!child.isHeader) {
                        items.push(child);
                    }
                }
            }
            return items;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "headers", {
        get: function () {
            var headers = [];
            if (this.children !== undefined) {
                for (var _i = 0, _a = this.children.toArray(); _i < _a.length; _i++) {
                    var child = _a[_i];
                    if (child.isHeader) {
                        headers.push(child);
                    }
                }
            }
            return headers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "context", {
        get: function () {
            return {
                $implicit: this
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "template", {
        get: function () {
            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.ContentChildren(core_1.forwardRef(function () { return list_item_component_1.IgxListItemComponent; })),
        __metadata("design:type", core_1.QueryList)
    ], IgxListComponent.prototype, "children", void 0);
    __decorate([
        core_1.ContentChild(list_common_1.IgxEmptyListTemplateDirective, { read: list_common_1.IgxEmptyListTemplateDirective }),
        __metadata("design:type", list_common_1.IgxEmptyListTemplateDirective)
    ], IgxListComponent.prototype, "emptyListTemplate", void 0);
    __decorate([
        core_1.ViewChild("defaultEmptyList", { read: core_1.TemplateRef }),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxListComponent.prototype, "defaultEmptyListTemplate", void 0);
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxListComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxListComponent.prototype, "allowLeftPanning", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxListComponent.prototype, "allowRightPanning", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxListComponent.prototype, "onLeftPan", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxListComponent.prototype, "onRightPan", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxListComponent.prototype, "onPanStateChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxListComponent.prototype, "onItemClicked", void 0);
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxListComponent.prototype, "role", null);
    __decorate([
        core_1.HostBinding("class.igx-list-empty"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxListComponent.prototype, "isListEmpty", null);
    __decorate([
        core_1.HostBinding("class.igx-list"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxListComponent.prototype, "cssClass", null);
    IgxListComponent = __decorate([
        core_1.Component({
            selector: "igx-list",
            template: __webpack_require__(221)
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], IgxListComponent);
    return IgxListComponent;
}());
exports.IgxListComponent = IgxListComponent;
var IgxListModule = (function () {
    function IgxListModule() {
    }
    IgxListModule = __decorate([
        core_1.NgModule({
            declarations: [IgxListComponent, list_item_component_1.IgxListItemComponent, list_common_1.IgxEmptyListTemplateDirective],
            exports: [IgxListComponent, list_item_component_1.IgxListItemComponent, list_common_1.IgxEmptyListTemplateDirective],
            imports: [common_1.CommonModule, ripple_directive_1.IgxRippleModule]
        })
    ], IgxListModule);
    return IgxListModule;
}());
exports.IgxListModule = IgxListModule;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var list_common_1 = __webpack_require__(61);
var touch_1 = __webpack_require__(109);
var list_component_1 = __webpack_require__(107);
var IgxListItemComponent = (function () {
    function IgxListItemComponent(list, elementRef, _renderer) {
        this.list = list;
        this.elementRef = elementRef;
        this._renderer = _renderer;
        this._panState = list_common_1.IgxListPanState.NONE;
        this._FRACTION_OF_WIDTH_TO_TRIGGER_GRIP = 0.5;
        this._currentLeft = 0;
        this.hidden = false;
        this.touchAction = "pan-y";
    }
    Object.defineProperty(IgxListItemComponent.prototype, "role", {
        get: function () {
            return this.isHeader ? "separator" : "listitem";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "headerStyle", {
        get: function () {
            return this.isHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "innerStyle", {
        get: function () {
            return !this.isHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "display", {
        get: function () {
            return this.hidden ? "none" : "";
        },
        enumerable: true,
        configurable: true
    });
    IgxListItemComponent.prototype.clicked = function (evt) {
        this.list.onItemClicked.emit({ item: this, event: evt });
    };
    IgxListItemComponent.prototype.panStart = function (ev) {
        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {
            return;
        }
        this._currentLeft = this.left;
    };
    IgxListItemComponent.prototype.panMove = function (ev) {
        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {
            return;
        }
        var isPanningToLeft = ev.deltaX < 0;
        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {
            this.left = Math.max(this.maxLeft, this.left + ev.deltaX);
        }
        else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {
            this.left = Math.min(this.maxRight, this.left + ev.deltaX);
        }
    };
    IgxListItemComponent.prototype.panEnd = function (ev) {
        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {
            return;
        }
        var oldPanState = this._panState;
        this.performMagneticGrip();
        if (oldPanState !== this._panState) {
            this.list.onPanStateChange.emit({ oldState: oldPanState, newState: this._panState, item: this });
            if (this._panState === list_common_1.IgxListPanState.LEFT) {
                this.list.onLeftPan.emit(this);
            }
            else if (this._panState === list_common_1.IgxListPanState.RIGHT) {
                this.list.onRightPan.emit(this);
            }
        }
    };
    Object.defineProperty(IgxListItemComponent.prototype, "panState", {
        get: function () {
            return this._panState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "index", {
        get: function () {
            return this.list.children.toArray().indexOf(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "element", {
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "width", {
        get: function () {
            if (this.element) {
                return this.element.offsetWidth;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "maxLeft", {
        get: function () {
            return -this.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "maxRight", {
        get: function () {
            return this.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "left", {
        get: function () {
            return this.element.offsetLeft;
        },
        set: function (value) {
            var val = value + "";
            if (val.indexOf("px") === -1) {
                val += "px";
            }
            this.element.style.left = val;
        },
        enumerable: true,
        configurable: true
    });
    IgxListItemComponent.prototype.performMagneticGrip = function () {
        var widthTriggeringGrip = this.width * this._FRACTION_OF_WIDTH_TO_TRIGGER_GRIP;
        if (this.left > 0) {
            if (this.left > widthTriggeringGrip) {
                this.left = this.maxRight;
                this._panState = list_common_1.IgxListPanState.RIGHT;
            }
            else {
                this.left = 0;
                this._panState = list_common_1.IgxListPanState.NONE;
            }
        }
        else {
            if (-this.left > widthTriggeringGrip) {
                this.left = this.maxLeft;
                this._panState = list_common_1.IgxListPanState.LEFT;
            }
            else {
                this.left = 0;
                this._panState = list_common_1.IgxListPanState.NONE;
            }
        }
    };
    IgxListItemComponent.prototype.isTrue = function (value) {
        if (typeof (value) === "boolean") {
            return value;
        }
        else {
            return value === "true";
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], IgxListItemComponent.prototype, "isHeader", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxListItemComponent.prototype, "hidden", void 0);
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxListItemComponent.prototype, "role", null);
    __decorate([
        core_1.HostBinding("attr.aria-label"),
        __metadata("design:type", String)
    ], IgxListItemComponent.prototype, "ariaLabel", void 0);
    __decorate([
        core_1.HostBinding("style.touch-action"),
        __metadata("design:type", Object)
    ], IgxListItemComponent.prototype, "touchAction", void 0);
    __decorate([
        core_1.HostBinding("class.igx-list__header"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxListItemComponent.prototype, "headerStyle", null);
    __decorate([
        core_1.HostBinding("class.igx-list__item"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxListItemComponent.prototype, "innerStyle", null);
    __decorate([
        core_1.HostBinding("style.display"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxListItemComponent.prototype, "display", null);
    __decorate([
        core_1.HostListener("click", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxListItemComponent.prototype, "clicked", null);
    __decorate([
        core_1.HostListener("panstart", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxListItemComponent.prototype, "panStart", null);
    __decorate([
        core_1.HostListener("panmove", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxListItemComponent.prototype, "panMove", null);
    __decorate([
        core_1.HostListener("panend", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxListItemComponent.prototype, "panEnd", null);
    IgxListItemComponent = __decorate([
        core_1.Component({
            providers: [touch_1.HammerGesturesManager],
            selector: "igx-list-item",
            template: __webpack_require__(220),
            changeDetection: core_1.ChangeDetectionStrategy.OnPush
        }),
        __param(0, core_1.Inject(core_1.forwardRef(function () { return list_component_1.IgxListComponent; }))),
        __metadata("design:paramtypes", [list_component_1.IgxListComponent,
            core_1.ElementRef,
            core_1.Renderer2])
    ], IgxListItemComponent);
    return IgxListItemComponent;
}());
exports.IgxListItemComponent = IgxListItemComponent;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var platform_browser_1 = __webpack_require__(50);
var EVENT_SUFFIX = "precise";
var HammerGesturesManager = (function () {
    function HammerGesturesManager(_zone, doc) {
        this._zone = _zone;
        this.doc = doc;
        this.hammerOptions = {
            inputClass: Hammer.TouchInput,
            recognizers: [
                [Hammer.Pan, { threshold: 0 }],
                [Hammer.Pinch, { enable: true }],
                [Hammer.Rotate, { enable: true }],
                [Hammer.Swipe, {
                        direction: Hammer.DIRECTION_HORIZONTAL
                    }]
            ]
        };
        this._hammerManagers = [];
    }
    HammerGesturesManager.prototype.supports = function (eventName) {
        return eventName.toLowerCase().endsWith("." + EVENT_SUFFIX);
    };
    HammerGesturesManager.prototype.addEventListener = function (element, eventName, eventHandler, options) {
        var _this = this;
        if (options === void 0) { options = null; }
        return this._zone.runOutsideAngular(function () {
            var mc = _this.getManagerForElement(element);
            if (mc === null) {
                mc = new Hammer(element, _this.hammerOptions);
                _this.addManagerForElement(element, mc);
            }
            var handler = function (eventObj) { _this._zone.run(function () { eventHandler(eventObj); }); };
            mc.on(eventName, handler);
            return function () { mc.off(eventName, handler); };
        });
    };
    HammerGesturesManager.prototype.addGlobalEventListener = function (target, eventName, eventHandler) {
        var element = this.getGlobalEventTarget(target);
        return this.addEventListener(element, eventName, eventHandler);
    };
    HammerGesturesManager.prototype.getGlobalEventTarget = function (target) {
        return platform_browser_1.ɵgetDOM().getGlobalEventTarget(this.doc, target);
    };
    HammerGesturesManager.prototype.setManagerOption = function (element, event, options) {
        var manager = this.getManagerForElement(element);
        manager.get(event).set(options);
    };
    HammerGesturesManager.prototype.addManagerForElement = function (element, manager) {
        this._hammerManagers.push({ element: element, manager: manager });
    };
    HammerGesturesManager.prototype.getManagerForElement = function (element) {
        var result = this._hammerManagers.filter(function (value, index, array) {
            return value.element === element;
        });
        return result.length ? result[0].manager : null;
    };
    HammerGesturesManager.prototype.removeManagerForElement = function (element) {
        var index = null;
        for (var i = 0; i < this._hammerManagers.length; i++) {
            if (element === this._hammerManagers[i].element) {
                index = i;
                break;
            }
        }
        if (index !== null) {
            var item = this._hammerManagers.splice(index, 1)[0];
            item.manager.destroy();
        }
    };
    HammerGesturesManager.prototype.destroy = function () {
        for (var _i = 0, _a = this._hammerManagers; _i < _a.length; _i++) {
            var item = _a[_i];
            item.manager.destroy();
        }
        this._hammerManagers = [];
    };
    HammerGesturesManager = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Inject(platform_browser_1.DOCUMENT)),
        __metadata("design:paramtypes", [core_1.NgZone, Object])
    ], HammerGesturesManager);
    return HammerGesturesManager;
}());
exports.HammerGesturesManager = HammerGesturesManager;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var rxjs_1 = __webpack_require__(18);
var operators_1 = __webpack_require__(36);
var navigation_1 = __webpack_require__(25);
var touch_1 = __webpack_require__(109);
var navigation_drawer_directives_1 = __webpack_require__(62);
var NEXT_ID = 0;
var IgxNavigationDrawerComponent = (function () {
    function IgxNavigationDrawerComponent(elementRef, _state, renderer, _touchManager) {
        var _this = this;
        this.elementRef = elementRef;
        this._state = _state;
        this.renderer = renderer;
        this._touchManager = _touchManager;
        this.cssClass = "igx-nav-drawer";
        this.id = "igx-nav-drawer-" + NEXT_ID++;
        this.position = "left";
        this.enableGestures = true;
        this.isOpen = false;
        this.pin = false;
        this.pinThreshold = 1024;
        this.width = "280px";
        this.miniWidth = "60px";
        this.pinChange = new core_1.EventEmitter(true);
        this.opening = new core_1.EventEmitter();
        this.opened = new core_1.EventEmitter();
        this.closing = new core_1.EventEmitter();
        this.closed = new core_1.EventEmitter();
        this._gesturesAttached = false;
        this._widthCache = { width: null, miniWidth: null };
        this.css = {
            drawer: "igx-nav-drawer__aside",
            mini: "igx-nav-drawer__aside--mini",
            overlay: "igx-nav-drawer__overlay",
            styleDummy: "igx-nav-drawer__style-dummy"
        };
        this._panning = false;
        this._maxEdgeZone = 50;
        this.checkPinThreshold = function (evt) {
            var windowWidth;
            if (_this.pinThreshold) {
                windowWidth = _this.getWindowWidth();
                if (!_this.pin && windowWidth >= _this.pinThreshold) {
                    _this.pin = true;
                    _this.pinChange.emit(true);
                }
                else if (_this.pin && windowWidth < _this.pinThreshold) {
                    _this.pin = false;
                    _this.pinChange.emit(false);
                }
            }
        };
        this.swipe = function (evt) {
            if (!_this.enableGestures || evt.pointerType !== "touch") {
                return;
            }
            var deltaX;
            var startPosition;
            if (_this.position === "right") {
                deltaX = -evt.deltaX;
                startPosition = _this.getWindowWidth() - (evt.center.x + evt.distance);
            }
            else {
                deltaX = evt.deltaX;
                startPosition = evt.center.x - evt.distance;
            }
            if ((_this.isOpen && deltaX < 0) ||
                (deltaX > 0 && startPosition < _this.maxEdgeZone)) {
                _this.toggle(true);
            }
        };
        this.panstart = function (evt) {
            if (!_this.enableGestures || _this.pin || evt.pointerType !== "touch") {
                return;
            }
            var startPosition = _this.position === "right" ? _this.getWindowWidth() - (evt.center.x + evt.distance)
                : evt.center.x - evt.distance;
            if (_this.isOpen || (startPosition < _this.maxEdgeZone)) {
                _this._panning = true;
                _this._panStartWidth = _this.getExpectedWidth(!_this.isOpen);
                _this._panLimit = _this.getExpectedWidth(_this.isOpen);
                _this.renderer.setElementClass(_this.overlay, "panning", true);
                _this.renderer.setElementClass(_this.drawer, "panning", true);
            }
        };
        this.pan = function (evt) {
            if (!_this._panning) {
                return;
            }
            var right = _this.position === "right";
            var deltaX = right ? -evt.deltaX : evt.deltaX;
            var visibleWidth;
            var newX;
            var percent;
            visibleWidth = _this._panStartWidth + deltaX;
            if (_this.isOpen && deltaX < 0) {
                if (visibleWidth <= _this._panLimit) {
                    return;
                }
                if (_this.hasAnimateWidth) {
                    percent = (visibleWidth - _this._panLimit) / (_this._panStartWidth - _this._panLimit);
                    newX = visibleWidth;
                }
                else {
                    percent = visibleWidth / _this._panStartWidth;
                    newX = evt.deltaX;
                }
                _this.setXSize(newX, percent.toPrecision(2));
            }
            else if (!_this.isOpen && deltaX > 0) {
                if (visibleWidth >= _this._panLimit) {
                    return;
                }
                if (_this.hasAnimateWidth) {
                    percent = (visibleWidth - _this._panStartWidth) / (_this._panLimit - _this._panStartWidth);
                    newX = visibleWidth;
                }
                else {
                    percent = visibleWidth / _this._panLimit;
                    newX = (_this._panLimit - visibleWidth) * (right ? 1 : -1);
                }
                _this.setXSize(newX, percent.toPrecision(2));
            }
        };
        this.panEnd = function (evt) {
            if (_this._panning) {
                var deltaX = _this.position === "right" ? -evt.deltaX : evt.deltaX;
                var visibleWidth = _this._panStartWidth + deltaX;
                _this.resetPan();
                if (_this.isOpen && visibleWidth <= _this._panStartWidth / 2) {
                    _this.close(true);
                }
                else if (!_this.isOpen && visibleWidth >= _this._panLimit / 2) {
                    _this.open(true);
                }
                _this._panStartWidth = null;
            }
        };
        this.toggleOpenedEvent = function (evt, fireEvents) {
            _this.elementRef.nativeElement.removeEventListener("transitionend", _this.toggleOpenedEvent, false);
            _this.opened.emit();
        };
        this.toggleClosedEvent = function (evt) {
            _this.elementRef.nativeElement.removeEventListener("transitionend", _this.toggleClosedEvent, false);
            _this.closed.emit();
        };
    }
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "element", {
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "template", {
        get: function () {
            if (this.miniTemplate && !this.isOpen) {
                return this.miniTemplate.template;
            }
            else if (this.contentTemplate) {
                return this.contentTemplate.template;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "miniTemplate", {
        get: function () {
            return this._miniTemplate;
        },
        set: function (v) {
            if (!this.isOpen) {
                this.setDrawerWidth(v ? this.miniWidth : "");
            }
            this._miniTemplate = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "flexWidth", {
        get: function () {
            if (!this.pin) {
                return "0px";
            }
            if (this.isOpen) {
                return this.width;
            }
            if (this.miniTemplate && this.miniWidth) {
                return this.miniWidth;
            }
            return "0px";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "drawer", {
        get: function () {
            return this._drawer.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "overlay", {
        get: function () {
            return this._overlay.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "styleDummy", {
        get: function () {
            return this._styleDummy.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "hasAnimateWidth", {
        get: function () {
            return this.pin || !!this.miniTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "maxEdgeZone", {
        get: function () {
            return this._maxEdgeZone;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "expectedWidth", {
        get: function () {
            return this.getExpectedWidth(false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "expectedMiniWidth", {
        get: function () {
            return this.getExpectedWidth(true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "touchManager", {
        get: function () {
            return this._touchManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxNavigationDrawerComponent.prototype, "state", {
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    IgxNavigationDrawerComponent.prototype.ngOnInit = function () {
        if (this._state) {
            this._state.add(this.id, this);
        }
        if (this.isOpen) {
            this.setDrawerWidth(this.width);
        }
    };
    IgxNavigationDrawerComponent.prototype.ngAfterContentInit = function () {
        this.updateEdgeZone();
        this.checkPinThreshold();
        this.ensureDrawerHeight();
        this.ensureEvents();
    };
    IgxNavigationDrawerComponent.prototype.ngOnDestroy = function () {
        this._touchManager.destroy();
        if (this._state) {
            this._state.remove(this.id);
        }
        if (this._resizeObserver) {
            this._resizeObserver.unsubscribe();
        }
    };
    IgxNavigationDrawerComponent.prototype.ngOnChanges = function (changes) {
        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {
            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === "true");
            this.ensureEvents();
        }
        if (changes.pin && changes.pin.currentValue !== undefined) {
            this.pin = !!(this.pin && this.pin.toString() === "true");
            this.ensureDrawerHeight();
            if (this.pin) {
                this._touchManager.destroy();
                this._gesturesAttached = false;
            }
            else {
                this.ensureEvents();
            }
        }
        if (changes.pinThreshold) {
            if (this.pinThreshold) {
                this.ensureEvents();
                this.checkPinThreshold();
            }
            else if (this._resizeObserver) {
                this._resizeObserver.unsubscribe();
                this._resizeObserver = null;
            }
        }
        if (changes.width && this.isOpen) {
            this.setDrawerWidth(changes.width.currentValue);
        }
        if (changes.miniWidth) {
            if (!this.isOpen) {
                this.setDrawerWidth(changes.miniWidth.currentValue);
            }
            this.updateEdgeZone();
        }
    };
    IgxNavigationDrawerComponent.prototype.toggle = function (fireEvents) {
        if (this.isOpen) {
            this.close(fireEvents);
        }
        else {
            this.open(fireEvents);
        }
    };
    IgxNavigationDrawerComponent.prototype.open = function (fireEvents) {
        if (this._panning) {
            this.resetPan();
        }
        if (this.isOpen) {
            return;
        }
        if (fireEvents) {
            this.opening.emit();
        }
        this.isOpen = true;
        this.elementRef.nativeElement.addEventListener("transitionend", this.toggleOpenedEvent, false);
        this.setDrawerWidth(this.width);
    };
    IgxNavigationDrawerComponent.prototype.close = function (fireEvents) {
        if (this._panning) {
            this.resetPan();
        }
        if (!this.isOpen) {
            return;
        }
        if (fireEvents) {
            this.closing.emit();
        }
        this.isOpen = false;
        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : "");
        this.elementRef.nativeElement.addEventListener("transitionend", this.toggleClosedEvent, false);
    };
    IgxNavigationDrawerComponent.prototype.set_maxEdgeZone = function (value) {
        this._maxEdgeZone = value;
    };
    IgxNavigationDrawerComponent.prototype.ensureDrawerHeight = function () {
        if (this.pin) {
            this.renderer.setElementStyle(this.drawer, "height", window.innerHeight + "px");
        }
    };
    IgxNavigationDrawerComponent.prototype.getExpectedWidth = function (mini) {
        if (mini) {
            if (!this.miniTemplate) {
                return 0;
            }
            if (this.miniWidth) {
                return parseFloat(this.miniWidth);
            }
            else {
                if (this._widthCache.miniWidth === null) {
                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);
                    this.renderer.setElementClass(this.styleDummy, this.css.mini, true);
                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;
                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);
                    this.renderer.setElementClass(this.styleDummy, this.css.mini, false);
                }
                return this._widthCache.miniWidth;
            }
        }
        else {
            if (this.width) {
                return parseFloat(this.width);
            }
            else {
                if (this._widthCache.width === null) {
                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);
                    this._widthCache.width = this.styleDummy.offsetWidth;
                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);
                }
                return this._widthCache.width;
            }
        }
    };
    IgxNavigationDrawerComponent.prototype.getWindowWidth = function () {
        return (window.innerWidth > 0) ? window.innerWidth : screen.width;
    };
    IgxNavigationDrawerComponent.prototype.setDrawerWidth = function (width) {
        var _this = this;
        window.requestAnimationFrame(function () {
            if (_this.drawer) {
                _this.renderer.setElementStyle(_this.drawer, "width", width);
            }
        });
    };
    IgxNavigationDrawerComponent.prototype.getDrawerWidth = function () {
        return this.drawer.offsetWidth;
    };
    IgxNavigationDrawerComponent.prototype.ensureEvents = function () {
        var _this = this;
        if (this.enableGestures && !this.pin && !this._gesturesAttached) {
            this._touchManager.addGlobalEventListener("document", "swipe", this.swipe);
            this._gesturesAttached = true;
            this._touchManager.addGlobalEventListener("document", "panstart", this.panstart);
            this._touchManager.addGlobalEventListener("document", "panmove", this.pan);
            this._touchManager.addGlobalEventListener("document", "panend", this.panEnd);
        }
        if (this.pinThreshold && !this._resizeObserver) {
            this._resizeObserver = rxjs_1.fromEvent(window, "resize").pipe(operators_1.debounce(function () { return rxjs_1.interval(150); }))
                .subscribe(function (value) { _this.checkPinThreshold(); });
        }
    };
    IgxNavigationDrawerComponent.prototype.updateEdgeZone = function () {
        var maxValue;
        if (this.miniTemplate) {
            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);
            this.set_maxEdgeZone(maxValue);
        }
    };
    IgxNavigationDrawerComponent.prototype.resetPan = function () {
        this._panning = false;
        this.renderer.setElementClass(this.overlay, "panning", false);
        this.renderer.setElementClass(this.drawer, "panning", false);
        this.setXSize(0, "");
    };
    IgxNavigationDrawerComponent.prototype.setXSize = function (x, opacity) {
        var _this = this;
        window.requestAnimationFrame(function () {
            if (_this.hasAnimateWidth) {
                _this.renderer.setElementStyle(_this.drawer, "width", x ? Math.abs(x) + "px" : "");
            }
            else {
                _this.renderer.setElementStyle(_this.drawer, "transform", x ? "translate3d(" + x + "px,0,0)" : "");
                _this.renderer.setElementStyle(_this.drawer, "-webkit-transform", x ? "translate3d(" + x + "px,0,0)" : "");
            }
            if (opacity !== undefined) {
                _this.renderer.setElementStyle(_this.overlay, "opacity", opacity);
            }
        });
    };
    __decorate([
        core_1.HostBinding("class"),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "cssClass", void 0);
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "position", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "enableGestures", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "isOpen", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "pin", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "pinThreshold", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "width", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "miniWidth", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "pinChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "opening", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "opened", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "closing", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxNavigationDrawerComponent.prototype, "closed", void 0);
    __decorate([
        core_1.ContentChild(navigation_drawer_directives_1.IgxNavDrawerMiniTemplateDirective, { read: navigation_drawer_directives_1.IgxNavDrawerMiniTemplateDirective }),
        __metadata("design:type", navigation_drawer_directives_1.IgxNavDrawerMiniTemplateDirective),
        __metadata("design:paramtypes", [navigation_drawer_directives_1.IgxNavDrawerMiniTemplateDirective])
    ], IgxNavigationDrawerComponent.prototype, "miniTemplate", null);
    __decorate([
        core_1.ContentChild(navigation_drawer_directives_1.IgxNavDrawerTemplateDirective, { read: navigation_drawer_directives_1.IgxNavDrawerTemplateDirective }),
        __metadata("design:type", navigation_drawer_directives_1.IgxNavDrawerTemplateDirective)
    ], IgxNavigationDrawerComponent.prototype, "contentTemplate", void 0);
    __decorate([
        core_1.HostBinding("style.flexBasis"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxNavigationDrawerComponent.prototype, "flexWidth", null);
    __decorate([
        core_1.ViewChild("aside"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxNavigationDrawerComponent.prototype, "_drawer", void 0);
    __decorate([
        core_1.ViewChild("overlay"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxNavigationDrawerComponent.prototype, "_overlay", void 0);
    __decorate([
        core_1.ViewChild("dummy"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxNavigationDrawerComponent.prototype, "_styleDummy", void 0);
    IgxNavigationDrawerComponent = __decorate([
        core_1.Component({
            providers: [touch_1.HammerGesturesManager],
            selector: "igx-nav-drawer",
            template: __webpack_require__(225)
        }),
        __param(0, core_1.Inject(core_1.ElementRef)),
        __param(1, core_1.Optional()),
        __metadata("design:paramtypes", [core_1.ElementRef,
            navigation_1.IgxNavigationService,
            core_1.Renderer,
            touch_1.HammerGesturesManager])
    ], IgxNavigationDrawerComponent);
    return IgxNavigationDrawerComponent;
}());
exports.IgxNavigationDrawerComponent = IgxNavigationDrawerComponent;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var exporter_options_base_1 = __webpack_require__(65);
var IgxCsvExporterOptions = (function (_super) {
    __extends(IgxCsvExporterOptions, _super);
    function IgxCsvExporterOptions(fileName, fileType) {
        var _this = _super.call(this, fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType)) || this;
        _this.setFileType(fileType);
        _this.setDelimiter();
        return _this;
    }
    IgxCsvExporterOptions.getExtensionFromFileType = function (fType) {
        var extension = "";
        switch (fType) {
            case CsvFileTypes.CSV:
                extension = ".csv";
                break;
            case CsvFileTypes.TSV:
                extension = ".tsv";
                break;
            case CsvFileTypes.TAB:
                extension = ".tab";
                break;
            default:
                throw Error("Unsupported CSV file type!");
        }
        return extension;
    };
    Object.defineProperty(IgxCsvExporterOptions.prototype, "valueDelimiter", {
        get: function () {
            return this._valueDelimiter;
        },
        set: function (value) {
            this.setDelimiter(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCsvExporterOptions.prototype, "fileType", {
        get: function () {
            return this._fileType;
        },
        set: function (value) {
            this.setFileType(value);
        },
        enumerable: true,
        configurable: true
    });
    IgxCsvExporterOptions.prototype.setFileType = function (value) {
        if (value !== undefined && value !== null && value !== this._fileType) {
            this._fileType = value;
            var extension = IgxCsvExporterOptions.getExtensionFromFileType(value);
            if (!this.fileName.endsWith(extension)) {
                var oldExt = "." + this.fileName.split(".").pop();
                var newName = this.fileName.replace(oldExt, extension);
                this._fileExtension = extension;
                this.fileName = newName;
            }
        }
    };
    IgxCsvExporterOptions.prototype.setDelimiter = function (value) {
        if (value !== undefined && value !== "" && value !== null) {
            this._valueDelimiter = value;
        }
        else {
            switch (this.fileType) {
                case CsvFileTypes.CSV:
                    this._valueDelimiter = ",";
                    break;
                case CsvFileTypes.TSV:
                case CsvFileTypes.TAB:
                    this._valueDelimiter = "\t";
                    break;
            }
        }
    };
    return IgxCsvExporterOptions;
}(exporter_options_base_1.IgxExporterOptionsBase));
exports.IgxCsvExporterOptions = IgxCsvExporterOptions;
var CsvFileTypes;
(function (CsvFileTypes) {
    CsvFileTypes[CsvFileTypes["CSV"] = 0] = "CSV";
    CsvFileTypes[CsvFileTypes["TSV"] = 1] = "TSV";
    CsvFileTypes[CsvFileTypes["TAB"] = 2] = "TAB";
})(CsvFileTypes = exports.CsvFileTypes || (exports.CsvFileTypes = {}));


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(67);
module.exports = __webpack_require__(250);


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var nav_service_1 = __webpack_require__(68);
var IgxNavigationToggleDirective = (function () {
    function IgxNavigationToggleDirective(nav) {
        this.state = nav;
    }
    IgxNavigationToggleDirective.prototype.toggleNavigationDrawer = function () {
        this.state.toggle(this.target, true);
    };
    __decorate([
        core_1.Input("igxNavToggle"),
        __metadata("design:type", Object)
    ], IgxNavigationToggleDirective.prototype, "target", void 0);
    __decorate([
        core_1.HostListener("click"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxNavigationToggleDirective.prototype, "toggleNavigationDrawer", null);
    IgxNavigationToggleDirective = __decorate([
        core_1.Directive({ selector: "[igxNavToggle]" }),
        __metadata("design:paramtypes", [nav_service_1.IgxNavigationService])
    ], IgxNavigationToggleDirective);
    return IgxNavigationToggleDirective;
}());
exports.IgxNavigationToggleDirective = IgxNavigationToggleDirective;
var IgxNavigationCloseDirective = (function () {
    function IgxNavigationCloseDirective(nav) {
        this.state = nav;
    }
    IgxNavigationCloseDirective.prototype.closeNavigationDrawer = function () {
        this.state.close(this.target, true);
    };
    __decorate([
        core_1.Input("igxNavClose"),
        __metadata("design:type", Object)
    ], IgxNavigationCloseDirective.prototype, "target", void 0);
    __decorate([
        core_1.HostListener("click"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxNavigationCloseDirective.prototype, "closeNavigationDrawer", null);
    IgxNavigationCloseDirective = __decorate([
        core_1.Directive({ selector: "[igxNavClose]" }),
        __metadata("design:paramtypes", [nav_service_1.IgxNavigationService])
    ], IgxNavigationCloseDirective);
    return IgxNavigationCloseDirective;
}());
exports.IgxNavigationCloseDirective = IgxNavigationCloseDirective;
var IgxNavigationModule = (function () {
    function IgxNavigationModule() {
    }
    IgxNavigationModule = __decorate([
        core_1.NgModule({
            declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],
            exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],
            providers: [nav_service_1.IgxNavigationService]
        })
    ], IgxNavigationModule);
    return IgxNavigationModule;
}());
exports.IgxNavigationModule = IgxNavigationModule;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sorting_strategy_1 = __webpack_require__(47);
var StableSortingStrategy = (function (_super) {
    __extends(StableSortingStrategy, _super);
    function StableSortingStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StableSortingStrategy.prototype.compareObjects = function (obj1, obj2) {
        var res = _super.prototype.compareObjects.apply(this, arguments);
        var replacerFn = function (key, val) {
            if (val === undefined) {
                return null;
            }
            return val;
        };
        if (!res) {
            return JSON.stringify(obj1, replacerFn)
                .localeCompare(JSON.stringify(obj2, replacerFn));
        }
        return res;
    };
    return StableSortingStrategy;
}(sorting_strategy_1.SortingStrategy));
exports.StableSortingStrategy = StableSortingStrategy;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var data_util_1 = __webpack_require__(11);
var DataAccess;
(function (DataAccess) {
    DataAccess[DataAccess["OriginalData"] = 0] = "OriginalData";
    DataAccess[DataAccess["TransformedData"] = 1] = "TransformedData";
})(DataAccess = exports.DataAccess || (exports.DataAccess = {}));
var DataContainer = (function () {
    function DataContainer(data) {
        if (data === void 0) { data = []; }
        this.state = {};
        this.data = data;
        this.transformedData = data;
    }
    DataContainer.prototype.process = function (state) {
        if (state) {
            this.state = state;
        }
        this.transformedData = this.data;
        this.transformedData = data_util_1.DataUtil.process(this.data, this.state);
        return this;
    };
    DataContainer.prototype.getIndexOfRecord = function (record, dataAccess) {
        if (dataAccess === void 0) { dataAccess = DataAccess.OriginalData; }
        var data = this.accessData(dataAccess);
        return data.indexOf(record);
    };
    DataContainer.prototype.getRecordByIndex = function (index, dataAccess) {
        if (dataAccess === void 0) { dataAccess = DataAccess.OriginalData; }
        var data = this.accessData(dataAccess);
        return data[index];
    };
    DataContainer.prototype.getRecordInfoByKeyValue = function (fieldName, value, dataAccess) {
        if (dataAccess === void 0) { dataAccess = DataAccess.OriginalData; }
        var data = this.accessData(dataAccess);
        var len = data.length;
        var res = { index: -1, record: undefined };
        var i;
        for (i = 0; i < len; i++) {
            if (data[i][fieldName] === value) {
                res.index = i;
                res.record = data[i];
                break;
            }
        }
        return res;
    };
    DataContainer.prototype.addRecord = function (record, at) {
        var data = this.accessData(DataAccess.OriginalData);
        if (at === null || at === undefined) {
            data.push(record);
        }
        else {
            data.splice(at, 0, record);
        }
    };
    DataContainer.prototype.deleteRecord = function (record) {
        var index = this.getIndexOfRecord(record, DataAccess.OriginalData);
        return this.deleteRecordByIndex(index);
    };
    DataContainer.prototype.deleteRecordByIndex = function (index) {
        var data = this.accessData(DataAccess.OriginalData);
        return data.splice(index, 1).length === 1;
    };
    DataContainer.prototype.updateRecordByIndex = function (index, newProperties) {
        var dataAccess = DataAccess.OriginalData;
        var foundRec = this.getRecordByIndex(index, dataAccess);
        if (!foundRec) {
            return undefined;
        }
        return Object.assign(foundRec, newProperties);
    };
    DataContainer.prototype.accessData = function (dataAccess) {
        var res;
        switch (dataAccess) {
            case DataAccess.OriginalData:
                res = this.data;
                break;
            case DataAccess.TransformedData:
                res = this.transformedData;
                break;
        }
        return res;
    };
    return DataContainer;
}());
exports.DataContainer = DataContainer;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var icon_1 = __webpack_require__(6);
var NEXT_ID = 0;
var Size;
(function (Size) {
    Size["SMALL"] = "small";
    Size["MEDIUM"] = "medium";
    Size["LARGE"] = "large";
})(Size = exports.Size || (exports.Size = {}));
var IgxAvatarComponent = (function () {
    function IgxAvatarComponent(elementRef) {
        this.elementRef = elementRef;
        this.ariaLabel = "avatar";
        this.role = "img";
        this.cssClass = "igx-avatar";
        this._size = "small";
        this.id = "igx-avatar-" + NEXT_ID++;
        this.roundShape = false;
    }
    Object.defineProperty(IgxAvatarComponent.prototype, "size", {
        get: function () {
            return this._size;
        },
        set: function (value) {
            switch (value) {
                case "small":
                case "medium":
                case "large":
                    this._size = value;
                    break;
                default:
                    this._size = "small";
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAvatarComponent.prototype, "template", {
        get: function () {
            if (this.src) {
                return this.imageTemplate;
            }
            if (this.initials) {
                return this.initialsTemplate;
            }
            return this.iconTemplate;
        },
        enumerable: true,
        configurable: true
    });
    IgxAvatarComponent.prototype.ngOnInit = function () {
        this.roleDescription = this.getRole();
    };
    IgxAvatarComponent.prototype.ngAfterViewInit = function () {
        this.elementRef.nativeElement.classList.add("igx-avatar--" + this._size);
    };
    IgxAvatarComponent.prototype.getRole = function () {
        if (this.initials) {
            return "initials type avatar";
        }
        else if (this.src) {
            return "image type avatar";
        }
        else {
            return "icon type avatar";
        }
    };
    __decorate([
        core_1.ViewChild("image"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxAvatarComponent.prototype, "image", void 0);
    __decorate([
        core_1.ViewChild("imageTemplate", { read: core_1.TemplateRef }),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxAvatarComponent.prototype, "imageTemplate", void 0);
    __decorate([
        core_1.ViewChild("initialsTemplate", { read: core_1.TemplateRef }),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxAvatarComponent.prototype, "initialsTemplate", void 0);
    __decorate([
        core_1.ViewChild("iconTemplate", { read: core_1.TemplateRef }),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxAvatarComponent.prototype, "iconTemplate", void 0);
    __decorate([
        core_1.HostBinding("attr.aria-label"),
        __metadata("design:type", Object)
    ], IgxAvatarComponent.prototype, "ariaLabel", void 0);
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxAvatarComponent.prototype, "role", void 0);
    __decorate([
        core_1.HostBinding("class.igx-avatar"),
        __metadata("design:type", Object)
    ], IgxAvatarComponent.prototype, "cssClass", void 0);
    __decorate([
        core_1.HostBinding("class.igx-avatar--rounded"),
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxAvatarComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxAvatarComponent.prototype, "roundShape", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxAvatarComponent.prototype, "color", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxAvatarComponent.prototype, "bgColor", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxAvatarComponent.prototype, "initials", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxAvatarComponent.prototype, "icon", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxAvatarComponent.prototype, "src", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], IgxAvatarComponent.prototype, "size", null);
    IgxAvatarComponent = __decorate([
        core_1.Component({
            selector: "igx-avatar",
            template: __webpack_require__(119)
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], IgxAvatarComponent);
    return IgxAvatarComponent;
}());
exports.IgxAvatarComponent = IgxAvatarComponent;
var IgxAvatarModule = (function () {
    function IgxAvatarModule() {
    }
    IgxAvatarModule = __decorate([
        core_1.NgModule({
            declarations: [IgxAvatarComponent],
            exports: [IgxAvatarComponent],
            imports: [common_1.CommonModule, icon_1.IgxIconModule]
        })
    ], IgxAvatarModule);
    return IgxAvatarModule;
}());
exports.IgxAvatarModule = IgxAvatarModule;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var icon_service_1 = __webpack_require__(73);
var NEXT_ID = 0;
var IgxIconComponent = (function () {
    function IgxIconComponent(el, iconService) {
        this.el = el;
        this.iconService = iconService;
        this.cssClass = "igx-icon";
        this.ariaHidden = true;
        this.id = "igx-icon-" + NEXT_ID++;
        this.active = true;
        this.font = this.iconService.defaultFontSet;
        this.iconService.registerFontSetAlias("material", "material-icons");
    }
    IgxIconComponent.prototype.ngOnInit = function () {
        this.checkInputProps();
        this.updateIconClass();
    };
    Object.defineProperty(IgxIconComponent.prototype, "getFontSet", {
        get: function () {
            return this.font;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxIconComponent.prototype, "getActive", {
        get: function () {
            return this.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxIconComponent.prototype, "getInactive", {
        get: function () {
            return !this.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxIconComponent.prototype, "getIconColor", {
        get: function () {
            return this.iconColor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxIconComponent.prototype, "getIconName", {
        get: function () {
            return this.iconName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxIconComponent.prototype, "template", {
        get: function () {
            if (this.glyphName) {
                return this.noLigature;
            }
            if (this.iconName) {
                return this.implicitLigature;
            }
            return this.explicitLigature;
        },
        enumerable: true,
        configurable: true
    });
    IgxIconComponent.prototype.checkInputProps = function () {
        if (this.iconName && this.glyphName) {
            throw new Error("You can provide either ligature `name` or glyph `iconName`, but not both at the same time.");
        }
    };
    IgxIconComponent.prototype.updateIconClass = function () {
        var className = this.iconService.fontSetClassName(this.font);
        this.el.nativeElement.classList.add(className);
        if (this.glyphName) {
            this.el.nativeElement.classList.add(this.glyphName);
        }
    };
    __decorate([
        core_1.ViewChild("noLigature", { read: core_1.TemplateRef }),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxIconComponent.prototype, "noLigature", void 0);
    __decorate([
        core_1.ViewChild("implicitLigature", { read: core_1.TemplateRef }),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxIconComponent.prototype, "implicitLigature", void 0);
    __decorate([
        core_1.ViewChild("explicitLigature", { read: core_1.TemplateRef }),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxIconComponent.prototype, "explicitLigature", void 0);
    __decorate([
        core_1.HostBinding("class.igx-icon"),
        __metadata("design:type", Object)
    ], IgxIconComponent.prototype, "cssClass", void 0);
    __decorate([
        core_1.HostBinding("attr.aria-hidden"),
        __metadata("design:type", Object)
    ], IgxIconComponent.prototype, "ariaHidden", void 0);
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxIconComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input("fontSet"),
        __metadata("design:type", String)
    ], IgxIconComponent.prototype, "font", void 0);
    __decorate([
        core_1.Input("isActive"),
        __metadata("design:type", Object)
    ], IgxIconComponent.prototype, "active", void 0);
    __decorate([
        core_1.Input("color"),
        __metadata("design:type", String)
    ], IgxIconComponent.prototype, "iconColor", void 0);
    __decorate([
        core_1.Input("name"),
        __metadata("design:type", String)
    ], IgxIconComponent.prototype, "iconName", void 0);
    __decorate([
        core_1.Input("iconName"),
        __metadata("design:type", String)
    ], IgxIconComponent.prototype, "glyphName", void 0);
    __decorate([
        core_1.HostBinding("class.igx-icon--inactive"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxIconComponent.prototype, "getInactive", null);
    __decorate([
        core_1.HostBinding("style.color"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxIconComponent.prototype, "getIconColor", null);
    IgxIconComponent = __decorate([
        core_1.Component({
            selector: "igx-icon",
            template: __webpack_require__(118)
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, icon_service_1.IgxIconService])
    ], IgxIconComponent);
    return IgxIconComponent;
}());
exports.IgxIconComponent = IgxIconComponent;


/***/ }),
/* 118 */
/***/ (function(module, exports) {

module.exports = "<ng-template #noLigature></ng-template>\r\n\r\n<ng-template #explicitLigature>\r\n    <ng-content></ng-content>\r\n</ng-template>\r\n\r\n<ng-template #implicitLigature>\r\n    {{getIconName}}\r\n</ng-template>\r\n\r\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\r\n"

/***/ }),
/* 119 */
/***/ (function(module, exports) {

module.exports = "<ng-template #imageTemplate>\r\n    <img #image [src]=\"src\" class=\"igx-avatar__image\" [style.backgroundColor]=\"bgColor\" [attr.aria-roledescription]=\"roleDescription\"\r\n    />\r\n</ng-template>\r\n\r\n<ng-template #initialsTemplate>\r\n    <div class=\"igx-avatar__initials\" [style.backgroundColor]=\"bgColor\" [style.color]=\"color\" [attr.aria-roledescription]=\"roleDescription\">\r\n        <span>{{initials.substring(0, 2)}}</span>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #iconTemplate>\r\n    <span class=\"igx-avatar__icon\" [style.backgroundColor]=\"bgColor\" [style.color]=\"color\" [attr.aria-roledescription]=\"roleDescription\">\r\n        <igx-icon [name]=\"icon\"></igx-icon>\r\n    </span>\r\n</ng-template>\r\n\r\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\r\n<ng-content></ng-content>\r\n"

/***/ }),
/* 120 */
/***/ (function(module, exports) {

module.exports = "<div class=\"igx-badge__circle\" [ngClass]=\"setClasses()\" [attr.aria-roledescription]=\"roleDescription\">\n    <span *ngIf=\"!icon\" class=\"igx-badge__circle-value\">{{value}}</span>\n    <igx-icon *ngIf=\"icon\" fontSet=\"material\" [name]=\"icon\"></igx-icon>\n</div>"

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var button_directive_1 = __webpack_require__(17);
var ripple_directive_1 = __webpack_require__(12);
var icon_1 = __webpack_require__(6);
var ButtonGroupAlignment;
(function (ButtonGroupAlignment) {
    ButtonGroupAlignment[ButtonGroupAlignment["horizontal"] = 0] = "horizontal";
    ButtonGroupAlignment[ButtonGroupAlignment["vertical"] = 1] = "vertical";
})(ButtonGroupAlignment = exports.ButtonGroupAlignment || (exports.ButtonGroupAlignment = {}));
var NEXT_ID = 0;
var IgxButtonGroupComponent = (function () {
    function IgxButtonGroupComponent(_el, _renderer, cdr) {
        this._el = _el;
        this._renderer = _renderer;
        this.id = "igx-buttongroup-" + NEXT_ID++;
        this.multiSelection = false;
        this.disabled = false;
        this.selectedIndexes = [];
        this.onSelect = new core_1.EventEmitter();
        this.onUnselect = new core_1.EventEmitter();
    }
    Object.defineProperty(IgxButtonGroupComponent.prototype, "itemContentCssClass", {
        get: function () {
            return this._itemContentCssClass;
        },
        set: function (value) {
            this._itemContentCssClass = value || this._itemContentCssClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "alignment", {
        get: function () {
            return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;
        },
        set: function (value) {
            this._isVertical = value === ButtonGroupAlignment.vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "isVertical", {
        get: function () {
            return this._isVertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "selectedButtons", {
        get: function () {
            var _this = this;
            return this.buttons.filter(function (b, i) {
                return _this.selectedIndexes.indexOf(i) !== -1;
            });
        },
        enumerable: true,
        configurable: true
    });
    IgxButtonGroupComponent.prototype.selectButton = function (index) {
        var _this = this;
        if (this.buttons.toArray()[index]._el.nativeElement.getAttribute("data-togglable") === "false"
            || this.buttons.toArray()[index]._el.nativeElement.classList.contains("igx-button--disabled")) {
            return;
        }
        var buttonElement = this.buttons.toArray()[index]._el.nativeElement;
        this.selectedIndexes.push(index);
        buttonElement.setAttribute("data-selected", true);
        this.onSelect.emit({ button: this.buttons.toArray()[index], index: index });
        this.values[index].selected = true;
        if (!this.multiSelection && this.selectedIndexes.length > 0) {
            this.buttons.forEach(function (b, i) {
                if (i !== index && _this.selectedIndexes.indexOf(i) !== -1) {
                    _this.deselectButton(i);
                }
            });
        }
    };
    IgxButtonGroupComponent.prototype.deselectButton = function (index) {
        if (this.buttons.toArray()[index]._el.nativeElement.getAttribute("data-togglable") === "false"
            || this.buttons.toArray()[index]._el.nativeElement.classList.contains("igx-button--disabled")) {
            return;
        }
        var buttonElement = this.buttons.toArray()[index]._el.nativeElement;
        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);
        buttonElement.setAttribute("data-selected", false);
        this.onUnselect.emit({ button: this.buttons.toArray()[index], index: index });
        this.values[index].selected = false;
    };
    IgxButtonGroupComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.buttons.forEach(function (button, index) {
                if (!button.disabled && button._el.nativeElement.getAttribute("data-selected") === "true") {
                    _this.selectButton(index);
                }
            });
        }, 0);
    };
    IgxButtonGroupComponent.prototype._clickHandler = function (event, i) {
        if (this.selectedIndexes.indexOf(i) !== -1) {
            this.deselectButton(i);
        }
        else {
            this.selectButton(i);
        }
    };
    __decorate([
        core_1.ViewChildren(button_directive_1.IgxButtonDirective),
        __metadata("design:type", core_1.QueryList)
    ], IgxButtonGroupComponent.prototype, "buttons", void 0);
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxButtonGroupComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], IgxButtonGroupComponent.prototype, "itemContentCssClass", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxButtonGroupComponent.prototype, "multiSelection", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxButtonGroupComponent.prototype, "values", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxButtonGroupComponent.prototype, "disabled", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], IgxButtonGroupComponent.prototype, "alignment", null);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxButtonGroupComponent.prototype, "onSelect", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxButtonGroupComponent.prototype, "onUnselect", void 0);
    IgxButtonGroupComponent = __decorate([
        core_1.Component({
            selector: "igx-buttongroup",
            template: __webpack_require__(122)
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer2, core_1.ChangeDetectorRef])
    ], IgxButtonGroupComponent);
    return IgxButtonGroupComponent;
}());
exports.IgxButtonGroupComponent = IgxButtonGroupComponent;
var IgxButtonGroupModule = (function () {
    function IgxButtonGroupModule() {
    }
    IgxButtonGroupModule = __decorate([
        core_1.NgModule({
            declarations: [IgxButtonGroupComponent],
            exports: [IgxButtonGroupComponent],
            imports: [button_directive_1.IgxButtonModule, common_1.CommonModule, ripple_directive_1.IgxRippleModule, icon_1.IgxIconModule]
        })
    ], IgxButtonGroupModule);
    return IgxButtonGroupModule;
}());
exports.IgxButtonGroupModule = IgxButtonGroupModule;


/***/ }),
/* 122 */
/***/ (function(module, exports) {

module.exports = "<div class=\"igx-button-group\" role=\"group\" [class.igx-button-group--vertical]=\"isVertical\">\n\n    <span class=\"igx-button-group__item\" *ngFor=\"let button of values; let i = 'index'\" type=\"button\" (click)=\"_clickHandler($event, i)\"\n        igxButton=\"flat\" [attr.data-selected]=\"button.selected\" [attr.data-togglable]=\"button.togglable\" [attr.aria-pressed]=\"button.selected\"\n        [disabled]=\"disabled || button.disabled\" [igxButtonColor]=\"button.color\" [igxButtonBackground]=\"button.bgcolor\" [igxLabel]=\"button.label\"\n        [igxRipple]=\"button.ripple\" [class.igx-button-group__item--selected]=\"button.selected\">\n        <div class=\"igx-button-group__item-content {{ itemContentCssClass }}\">\n            <igx-icon *ngIf=\"button.icon\" fontSet=\"material\" [name]=\"button.icon\"></igx-icon>\n            <span *ngIf=\"button.label\">{{button.label}}</span>\n</div>\n</span>\n\n</div>\n"

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var tabs_group_component_1 = __webpack_require__(74);
var tabs_component_1 = __webpack_require__(39);
var IgxTabItemComponent = (function () {
    function IgxTabItemComponent(_tabs, _element) {
        this._tabs = _tabs;
        this._element = _element;
        this._changesCount = 0;
        this.role = "tab";
        this._nativeTabItem = _element;
    }
    IgxTabItemComponent.prototype.onClick = function (event) {
        this.select();
    };
    IgxTabItemComponent.prototype.onResize = function (event) {
        if (this.isSelected) {
            this._tabs.selectedIndicator.nativeElement.style.width = this.nativeTabItem.nativeElement.offsetWidth + "px";
            this._tabs.selectedIndicator.nativeElement.style.transform = "translate(" + this.nativeTabItem.nativeElement.offsetLeft + "px)";
        }
    };
    IgxTabItemComponent.prototype.onKeydownArrowRight = function (event) {
        this._onKeyDown(false);
    };
    IgxTabItemComponent.prototype.onKeydownArrowLeft = function (event) {
        this._onKeyDown(true);
    };
    IgxTabItemComponent.prototype.onKeydownHome = function (event) {
        event.preventDefault();
        this._onKeyDown(false, 0);
    };
    IgxTabItemComponent.prototype.onKeydownEnd = function (event) {
        event.preventDefault();
        this._onKeyDown(false, this._tabs.tabs.toArray().length - 1);
    };
    IgxTabItemComponent.prototype._onKeyDown = function (isLeftArrow, index) {
        if (index === void 0) { index = null; }
        var tabsArray = this._tabs.tabs.toArray();
        if (index === null) {
            index = (isLeftArrow)
                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1
                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;
        }
        var tab = tabsArray[index];
        var viewPortWidth = this._tabs.viewPort.nativeElement.offsetWidth;
        var nativeTabElement = tab.nativeTabItem.nativeElement;
        var focusDelay = (nativeTabElement.offsetWidth + nativeTabElement.offsetLeft - this._tabs.offset > viewPortWidth) ? 200 : 50;
        tab.select(focusDelay);
    };
    Object.defineProperty(IgxTabItemComponent.prototype, "changesCount", {
        get: function () {
            return this._changesCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "nativeTabItem", {
        get: function () {
            return this._nativeTabItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "isDisabled", {
        get: function () {
            var group = this.relatedGroup;
            if (group) {
                return group.isDisabled;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "isSelected", {
        get: function () {
            var group = this.relatedGroup;
            if (group) {
                return group.isSelected;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabItemComponent.prototype, "index", {
        get: function () {
            return this._tabs.tabs.toArray().indexOf(this);
        },
        enumerable: true,
        configurable: true
    });
    IgxTabItemComponent.prototype.select = function (focusDelay) {
        if (focusDelay === void 0) { focusDelay = 50; }
        this.relatedGroup.select(focusDelay);
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", tabs_group_component_1.IgxTabsGroupComponent)
    ], IgxTabItemComponent.prototype, "relatedGroup", void 0);
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxTabItemComponent.prototype, "role", void 0);
    __decorate([
        core_1.HostBinding("attr.tabindex"),
        __metadata("design:type", Object)
    ], IgxTabItemComponent.prototype, "tabindex", void 0);
    __decorate([
        core_1.HostListener("click", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxTabItemComponent.prototype, "onClick", null);
    __decorate([
        core_1.HostListener("window:resize", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxTabItemComponent.prototype, "onResize", null);
    __decorate([
        core_1.HostListener("keydown.arrowright", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxTabItemComponent.prototype, "onKeydownArrowRight", null);
    __decorate([
        core_1.HostListener("keydown.arrowleft", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxTabItemComponent.prototype, "onKeydownArrowLeft", null);
    __decorate([
        core_1.HostListener("keydown.home", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxTabItemComponent.prototype, "onKeydownHome", null);
    __decorate([
        core_1.HostListener("keydown.end", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxTabItemComponent.prototype, "onKeydownEnd", null);
    IgxTabItemComponent = __decorate([
        core_1.Component({
            selector: "igx-tab-item",
            template: __webpack_require__(125)
        }),
        __param(0, core_1.Inject(core_1.forwardRef(function () { return tabs_component_1.IgxTabsComponent; }))),
        __metadata("design:paramtypes", [tabs_component_1.IgxTabsComponent, core_1.ElementRef])
    ], IgxTabItemComponent);
    return IgxTabItemComponent;
}());
exports.IgxTabItemComponent = IgxTabItemComponent;


/***/ }),
/* 124 */
/***/ (function(module, exports) {

module.exports = "<ng-content></ng-content>\r\n"

/***/ }),
/* 125 */
/***/ (function(module, exports) {

module.exports = "<ng-template #defaultTabTemplate>\r\n    <div *ngIf=\"relatedGroup.icon\" class=\"igx-tabs__header-menu-item-icon\">\r\n        <igx-icon fontSet=\"material\" [name]=\"relatedGroup.icon\"></igx-icon>\r\n        <igx-badge [value]=\"changesCount\" [hidden]=\"changesCount === 0\"></igx-badge>\r\n    </div>\r\n    <div *ngIf=\"relatedGroup.label\" ngClass=\"igx-tabs__item-label\">{{relatedGroup.label}}</div>\r\n\r\n</ng-template>\r\n<ng-container *ngTemplateOutlet=\"relatedGroup.customTabTemplate ? relatedGroup.customTabTemplate : defaultTabTemplate; context: { $implicit: relatedGroup }\">\r\n</ng-container>"

/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = "<!-- TODO Remove tab container from here -->\r\n<div #tabsContainer>\r\n    <div class=\"igx-tabs__header\" #headerContainer>\r\n        <button igxRipple class=\"igx-tabs__header-button\" igxButton=\"icon\" (click)=\"scrollLeft($event)\" igxLeftButtonStyle>\r\n            <igx-icon fontSet=\"material\" name=\"navigate_before\"></igx-icon>\r\n        </button>\r\n        <div class=\"igx-tabs__header-wrapper-fixed\" #viewPort>\r\n            <div #itemsContainer class=\"igx-tabs__header-wrapper-fluid\">\r\n                <igx-tab-item igxRipple *ngFor=\"let group of groups\" [id]=\"'igx-tab-item-' + group.index\" [attr.aria-label]=\"group.label\"\r\n                    [attr.aria-disabled]=\"group.isDisabled\" [attr.aria-selected]=\"group.isSelected\" [attr.aria-controls]=\"'igx-tab-item-group-'+ group.index\"\r\n                    [ngClass]=\"{\r\n                'igx-tabs__header-menu-item': !group.isSelected && !group.isDisabled,\r\n                'igx-tabs__header-menu-item--selected': group.isSelected,\r\n                'igx-tabs__header-menu-item--disabled': group.isDisabled }\" [relatedGroup]=\"group\" role=\"tab\">\r\n                </igx-tab-item>\r\n                <div #selectedIndicator class=\"igx-tabs__header-menu-item-indicator\"></div>\r\n            </div>\r\n        </div>\r\n        <button igxRipple class=\"igx-tabs__header-button\" igxButton=\"icon\" (click)=\"scrollRight($event)\" igxRightButtonStyle>\r\n            <igx-icon fontSet=\"material\" name=\"navigate_next\"></igx-icon>\r\n        </button>\r\n    </div>\r\n    <div class=\"igx-tabs__content-fixed\">\r\n        <div #contentsContainer class=\"igx-tabs__content-fluid\">\r\n            <ng-content></ng-content>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var easings_1 = __webpack_require__(16);
var base = [
    animations_1.style({
        opacity: "{{startOpacity}}"
    }),
    animations_1.animate("{{duration}} {{delay}} {{easing}}", animations_1.style({
        opacity: "{{endOpacity}}"
    }))
];
var baseParams = {
    delay: "0s",
    duration: "350ms",
    easing: easings_1.EaseOut.sine,
    endOpacity: 1,
    startOpacity: 0
};
var fadeIn = animations_1.animation(base, {
    params: baseParams
});
exports.fadeIn = fadeIn;
var fadeOut = animations_1.animation(base, {
    params: {
        delay: "0s",
        duration: "350ms",
        easing: easings_1.EaseOut.sine,
        endOpacity: 0,
        startOpacity: 1
    }
});
exports.fadeOut = fadeOut;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var easings_1 = __webpack_require__(16);
var baseRecipe = [
    animations_1.style({
        backfaceVisibility: "hidden",
        transformStyle: "preserve-3d"
    }),
    animations_1.animate("{{duration}} {{delay}} {{easing}}", animations_1.keyframes([
        animations_1.style({
            offset: 0,
            transform: "translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)"
        }),
        animations_1.style({
            offset: 1,
            transform: "translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)"
        })
    ]))
];
var baseParams = {
    delay: "0s",
    duration: "600ms",
    easing: easings_1.EaseOut.quad,
    endAngle: 180,
    endDistance: "0px",
    rotateX: 1,
    rotateY: 0,
    rotateZ: 0,
    startAngle: 0,
    startDistance: "0px"
};
var flipTop = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams)
});
exports.flipTop = flipTop;
var flipBottom = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { endAngle: -180 })
});
exports.flipBottom = flipBottom;
var flipLeft = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { rotateX: 0, rotateY: 1 })
});
exports.flipLeft = flipLeft;
var flipRight = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { endAngle: -180, rotateX: 0, rotateY: 1 })
});
exports.flipRight = flipRight;
var flipHorFwd = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { endDistance: "170px" })
});
exports.flipHorFwd = flipHorFwd;
var flipHorBck = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { endDistance: "-170px" })
});
exports.flipHorBck = flipHorBck;
var flipVerFwd = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { endDistance: "170px", rotateX: 0, rotateY: 1 })
});
exports.flipVerFwd = flipVerFwd;
var flipVerBck = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { endDistance: "-170px", rotateX: 0, rotateY: 1 })
});
exports.flipVerBck = flipVerBck;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var easings_1 = __webpack_require__(16);
var baseRecipe = [
    animations_1.style({
        opacity: "{{startOpacity}}",
        transform: "rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)",
        transformOrigin: "{{xPos}} {{yPos}}"
    }),
    animations_1.animate("{{duration}} {{delay}} {{easing}}", animations_1.style({
        offset: 0,
        opacity: "{{endOpacity}}",
        transform: "rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)",
        transformOrigin: "{{xPos}} {{yPos}}"
    }))
];
var baseInParams = {
    delay: "0s",
    duration: "600ms",
    easing: easings_1.EaseOut.quad,
    endAngle: 0,
    endOpacity: 1,
    rotateX: 0,
    rotateY: 0,
    rotateZ: 1,
    startAngle: -360,
    startOpacity: 0,
    xPos: "center",
    yPos: "center"
};
var baseOutParams = __assign({}, baseInParams, { easing: easings_1.EaseIn.quad, endOpacity: 0, startOpacity: 1 });
var rotateInCenter = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams)
});
exports.rotateInCenter = rotateInCenter;
var rotateOutCenter = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams)
});
exports.rotateOutCenter = rotateOutCenter;
var rotateInTop = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams, { xPos: "top" })
});
exports.rotateInTop = rotateInTop;
var rotateOutTop = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams, { xPos: "top" })
});
exports.rotateOutTop = rotateOutTop;
var rotateInRight = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams, { xPos: "right" })
});
exports.rotateInRight = rotateInRight;
var rotateOutRight = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams, { xPos: "right" })
});
exports.rotateOutRight = rotateOutRight;
var rotateInBottom = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams, { xPos: "bottom" })
});
exports.rotateInBottom = rotateInBottom;
var rotateOutBottom = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams, { xPos: "bottom" })
});
exports.rotateOutBottom = rotateOutBottom;
var rotateInLeft = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams, { xPos: "left" })
});
exports.rotateInLeft = rotateInLeft;
var rotateOutLeft = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams, { xPos: "left" })
});
exports.rotateOutLeft = rotateOutLeft;
var rotateInTr = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams, { xPos: "right", yPos: "top" })
});
exports.rotateInTr = rotateInTr;
var rotateOutTr = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams, { xPos: "right", yPos: "top" })
});
exports.rotateOutTr = rotateOutTr;
var rotateInBr = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams, { xPos: "right", yPos: "bottom" })
});
exports.rotateInBr = rotateInBr;
var rotateOutBr = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams, { xPos: "right", yPos: "bottom" })
});
exports.rotateOutBr = rotateOutBr;
var rotateInBl = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams, { xPos: "left", yPos: "bottom" })
});
exports.rotateInBl = rotateInBl;
var rotateOutBl = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams, { xPos: "left", yPos: "bottom" })
});
exports.rotateOutBl = rotateOutBl;
var rotateInTl = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams, { xPos: "left", yPos: "top" })
});
exports.rotateInTl = rotateInTl;
var rotateOutTl = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams, { xPos: "left", yPos: "top" })
});
exports.rotateOutTl = rotateOutTl;
var rotateInDiagonal1 = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams, { rotateX: 1, rotateY: 1, rotateZ: 0 })
});
exports.rotateInDiagonal1 = rotateInDiagonal1;
var rotateOutDiagonal1 = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams, { rotateX: 1, rotateY: 1, rotateZ: 0 })
});
exports.rotateOutDiagonal1 = rotateOutDiagonal1;
var rotateInDiagonal2 = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams, { rotateX: -1, rotateY: 1, rotateZ: 0 })
});
exports.rotateInDiagonal2 = rotateInDiagonal2;
var rotateOutDiagonal2 = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams, { rotateX: -1, rotateY: 1, rotateZ: 0 })
});
exports.rotateOutDiagonal2 = rotateOutDiagonal2;
var rotateInHor = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams, { rotateX: 0, rotateY: 1, rotateZ: 0 })
});
exports.rotateInHor = rotateInHor;
var rotateOutHor = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams, { rotateX: 0, rotateY: 1, rotateZ: 0 })
});
exports.rotateOutHor = rotateOutHor;
var rotateInVer = animations_1.animation(baseRecipe, {
    params: __assign({}, baseInParams, { rotateX: 1, rotateY: 0, rotateZ: 0 })
});
exports.rotateInVer = rotateInVer;
var rotateOutVer = animations_1.animation(baseRecipe, {
    params: __assign({}, baseOutParams, { rotateX: 1, rotateY: 0, rotateZ: 0 })
});
exports.rotateOutVer = rotateOutVer;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(131));
__export(__webpack_require__(132));


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var easings_1 = __webpack_require__(16);
var baseRecipe = [
    animations_1.animate("{{duration}} {{delay}} {{easing}}", animations_1.keyframes([
        animations_1.style({
            offset: 0,
            transform: "rotate(0deg) translate{{direction}}(0)",
            transformOrigin: "{{xPos}} {{yPos}}"
        }),
        animations_1.style({
            offset: 0.1,
            transform: "rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})"
        }),
        animations_1.style({
            offset: 0.2,
            transform: "rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})"
        }),
        animations_1.style({
            offset: 0.3,
            transform: "rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})"
        }),
        animations_1.style({
            offset: 0.4,
            transform: "rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})"
        }),
        animations_1.style({
            offset: 0.5,
            transform: "rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})"
        }),
        animations_1.style({
            offset: 0.6,
            transform: "rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})"
        }),
        animations_1.style({
            offset: 0.7,
            transform: "rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})"
        }),
        animations_1.style({
            offset: 0.8,
            transform: "rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})"
        }),
        animations_1.style({
            offset: 0.9,
            transform: "rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})"
        }),
        animations_1.style({
            offset: 1,
            transform: "rotate(0deg) translate{{direction}}(0)",
            transformOrigin: "{{xPos}} {{yPos}}"
        })
    ]))
];
var baseParams = {
    delay: "0s",
    direction: "X",
    duration: "800ms",
    easing: easings_1.EaseInOut.quad,
    endAngle: 0,
    endDistance: "8px",
    startAngle: 0,
    startDistance: "10px",
    xPos: "center",
    yPos: "center"
};
var shakeHor = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { direction: "X" })
});
exports.shakeHor = shakeHor;
var shakeVer = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { direction: "Y" })
});
exports.shakeVer = shakeVer;
var shakeTop = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { endAngle: 2, endDistance: "0", startAngle: 4, startDistance: "0", yPos: "top" })
});
exports.shakeTop = shakeTop;
var shakeBottom = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { direction: "Y", endAngle: 2, endDistance: "0", startAngle: 4, startDistance: "0", yPos: "bottom" })
});
exports.shakeBottom = shakeBottom;
var shakeRight = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { direction: "Y", endAngle: 2, endDistance: "0", startAngle: 4, startDistance: "0", xPos: "right", yPos: "center" })
});
exports.shakeRight = shakeRight;
var shakeLeft = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { direction: "Y", endAngle: 2, endDistance: "0", startAngle: 4, startDistance: "0", xPos: "left", yPos: "center" })
});
exports.shakeLeft = shakeLeft;
var shakeCenter = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { direction: "Y", endAngle: 8, endDistance: "0", startAngle: 10, startDistance: "0", xPos: "center", yPos: "center" })
});
exports.shakeCenter = shakeCenter;
var shakeTr = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { direction: "Y", endAngle: 2, endDistance: "0", startAngle: 4, startDistance: "0", xPos: "right", yPos: "top" })
});
exports.shakeTr = shakeTr;
var shakeBr = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { direction: "Y", endAngle: 2, endDistance: "0", startAngle: 4, startDistance: "0", xPos: "right", yPos: "bottom" })
});
exports.shakeBr = shakeBr;
var shakeBl = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { direction: "Y", endAngle: 2, endDistance: "0", startAngle: 4, startDistance: "0", xPos: "left", yPos: "bottom" })
});
exports.shakeBl = shakeBl;
var shakeTl = animations_1.animation(baseRecipe, {
    params: __assign({}, baseParams, { direction: "Y", endAngle: 2, endDistance: "0", startAngle: 4, startDistance: "0", xPos: "left", yPos: "top" })
});
exports.shakeTl = shakeTl;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var heartbeatBase = [
    animations_1.style({
        animationTimingFunction: "ease-out",
        transform: "scale(1)",
        transformOrigin: "center center"
    }),
    animations_1.animate("{{duration}} {{delay}} {{easing}}", animations_1.keyframes([
        animations_1.style({
            animationTimingFunction: "ease-in",
            offset: 0.1,
            transform: "scale(0.91)"
        }),
        animations_1.style({
            animationTimingFunction: "ease-out",
            offset: 0.17,
            transform: "scale(0.98)"
        }),
        animations_1.style({
            animationTimingFunction: "ease-in",
            offset: 0.33,
            transform: "scale(0.87)"
        }),
        animations_1.style({
            animationTimingFunction: "ease-out",
            offset: 0.45,
            transform: "scale(1)"
        })
    ]))
];
var heartbeatParams = {
    delay: "0s",
    duration: "1.5s",
    easing: "ease-in-out"
};
var pulsateBase = [
    animations_1.animate("{{duration}} {{delay}} {{easing}}", animations_1.keyframes([
        animations_1.style({
            offset: 0,
            transform: "scale({{fromScale}})"
        }),
        animations_1.style({
            offset: 0.5,
            transform: "scale({{toScale}})"
        }),
        animations_1.style({
            offset: 1,
            transform: "scale({{fromScale}})"
        })
    ]))
];
var pulsateParams = {
    delay: "0s",
    duration: ".5s",
    easing: "ease-in-out",
    fromScale: 1,
    toScale: 1.1
};
var blinkBase = [
    animations_1.animate("{{duration}} {{delay}} {{easing}}", animations_1.keyframes([
        animations_1.style({
            offset: 0,
            opacity: .8,
            transform: "scale({{fromScale}})"
        }),
        animations_1.style({
            offset: 0.8,
            opacity: 0,
            transform: "scale({{midScale}})"
        }),
        animations_1.style({
            offset: 1,
            opacity: 0,
            transform: "scale({{toScale}})"
        })
    ]))
];
var blinkParams = {
    delay: "0s",
    duration: ".8s",
    easing: "ease-in-out",
    fromScale: .2,
    midScale: 1.2,
    toScale: 2.2
};
var pulsateFwd = animations_1.animation(pulsateBase, {
    params: __assign({}, pulsateParams)
});
exports.pulsateFwd = pulsateFwd;
var pulsateBck = animations_1.animation(pulsateBase, {
    params: __assign({}, pulsateParams, { toScale: .9 })
});
exports.pulsateBck = pulsateBck;
var heartbeat = animations_1.animation(heartbeatBase, {
    params: __assign({}, heartbeatParams)
});
exports.heartbeat = heartbeat;
var blink = animations_1.animation(blinkBase, {
    params: __assign({}, blinkParams)
});
exports.blink = blink;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var easings_1 = __webpack_require__(16);
var base = [
    animations_1.style({
        opacity: "{{startOpacity}}",
        transform: "scale{{direction}}({{fromScale}})",
        transformOrigin: "{{xPos}} {{yPos}}"
    }),
    animations_1.animate("{{duration}} {{delay}} {{easing}}", animations_1.style({
        opacity: "{{endOpacity}}",
        transform: "scale{{direction}}({{toScale}})",
        transformOrigin: "{{xPos}} {{yPos}}"
    }))
];
var baseInParams = {
    delay: "0s",
    direction: "",
    duration: "350ms",
    easing: easings_1.EaseOut.quad,
    endOpacity: 1,
    fromScale: .5,
    startOpacity: 0,
    toScale: 1,
    xPos: "50%",
    yPos: "50%"
};
var baseOutParams = __assign({}, baseInParams, { easing: easings_1.EaseOut.sine, endOpacity: 0, fromScale: 1, startOpacity: 1, toScale: .5 });
var scaleInCenter = animations_1.animation(base, { params: baseInParams });
exports.scaleInCenter = scaleInCenter;
var scaleInBl = animations_1.animation(base, {
    params: __assign({}, baseInParams, { xPos: "0", yPos: "100%" })
});
exports.scaleInBl = scaleInBl;
var scaleInVerCenter = animations_1.animation(base, {
    params: __assign({}, baseInParams, { direction: "Y", fromScale: .4 })
});
exports.scaleInVerCenter = scaleInVerCenter;
var scaleInTop = animations_1.animation(base, {
    params: __assign({}, baseInParams, { xPos: "50%", yPos: "0" })
});
exports.scaleInTop = scaleInTop;
var scaleInLeft = animations_1.animation(base, {
    params: __assign({}, baseInParams, { xPos: "0", yPos: "50%" })
});
exports.scaleInLeft = scaleInLeft;
var scaleInVerTop = animations_1.animation(base, {
    params: __assign({}, baseInParams, { direction: "Y", fromScale: .4, xPos: "100%", yPos: "0" })
});
exports.scaleInVerTop = scaleInVerTop;
var scaleInTr = animations_1.animation(base, {
    params: __assign({}, baseInParams, { xPos: "100%", yPos: "0" })
});
exports.scaleInTr = scaleInTr;
var scaleInTl = animations_1.animation(base, {
    params: __assign({}, baseInParams, { xPos: "0", yPos: "0" })
});
exports.scaleInTl = scaleInTl;
var scaleInVerBottom = animations_1.animation(base, {
    params: __assign({}, baseInParams, { direction: "Y", fromScale: .4, xPos: "0", yPos: "100%" })
});
exports.scaleInVerBottom = scaleInVerBottom;
var scaleInRight = animations_1.animation(base, {
    params: __assign({}, baseInParams, { xPos: "100%", yPos: "50%" })
});
exports.scaleInRight = scaleInRight;
var scaleInHorCenter = animations_1.animation(base, {
    params: __assign({}, baseInParams, { direction: "X", fromScale: .4 })
});
exports.scaleInHorCenter = scaleInHorCenter;
var scaleInBr = animations_1.animation(base, {
    params: __assign({}, baseInParams, { xPos: "100%", yPos: "100%" })
});
exports.scaleInBr = scaleInBr;
var scaleInHorLeft = animations_1.animation(base, {
    params: __assign({}, baseInParams, { direction: "X", fromScale: .4, xPos: "0", yPos: "0" })
});
exports.scaleInHorLeft = scaleInHorLeft;
var scaleInBottom = animations_1.animation(base, {
    params: __assign({}, baseInParams, { xPos: "50%", yPos: "100%" })
});
exports.scaleInBottom = scaleInBottom;
var scaleInHorRight = animations_1.animation(base, {
    params: __assign({}, baseInParams, { direction: "X", fromScale: .4, xPos: "100%", yPos: "100%" })
});
exports.scaleInHorRight = scaleInHorRight;
var scaleOutCenter = animations_1.animation(base, { params: baseOutParams });
exports.scaleOutCenter = scaleOutCenter;
var scaleOutBl = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { xPos: "0", yPos: "100%" })
});
exports.scaleOutBl = scaleOutBl;
var scaleOutBr = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { xPos: "100%", yPos: "100%" })
});
exports.scaleOutBr = scaleOutBr;
var scaleOutVerCenter = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { direction: "Y", toScale: .3 })
});
exports.scaleOutVerCenter = scaleOutVerCenter;
var scaleOutVerTop = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { direction: "Y", toScale: .3, xPos: "100%", yPos: "0" })
});
exports.scaleOutVerTop = scaleOutVerTop;
var scaleOutVerBottom = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { direction: "Y", toScale: .3, xPos: "0", yPos: "100%" })
});
exports.scaleOutVerBottom = scaleOutVerBottom;
var scaleOutTop = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { xPos: "50%", yPos: "0" })
});
exports.scaleOutTop = scaleOutTop;
var scaleOutLeft = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { xPos: "0", yPos: "50%" })
});
exports.scaleOutLeft = scaleOutLeft;
var scaleOutTr = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { xPos: "100%", yPos: "0" })
});
exports.scaleOutTr = scaleOutTr;
var scaleOutTl = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { xPos: "0", yPos: "0" })
});
exports.scaleOutTl = scaleOutTl;
var scaleOutRight = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { xPos: "100%", yPos: "50%" })
});
exports.scaleOutRight = scaleOutRight;
var scaleOutBottom = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { xPos: "50%", yPos: "100%" })
});
exports.scaleOutBottom = scaleOutBottom;
var scaleOutHorCenter = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { direction: "X", toScale: .3 })
});
exports.scaleOutHorCenter = scaleOutHorCenter;
var scaleOutHorLeft = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { direction: "X", toScale: .3, xPos: "0", yPos: "0" })
});
exports.scaleOutHorLeft = scaleOutHorLeft;
var scaleOutHorRight = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { direction: "X", toScale: .3, xPos: "100%", yPos: "100%" })
});
exports.scaleOutHorRight = scaleOutHorRight;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var easings_1 = __webpack_require__(16);
var base = [
    animations_1.style({
        opacity: "{{startOpacity}}",
        transform: "{{fromPosition}}"
    }),
    animations_1.animate("{{duration}} {{delay}} {{easing}}", animations_1.style({
        opacity: "{{endOpacity}}",
        transform: "{{toPosition}}"
    }))
];
var baseInParams = {
    delay: "0s",
    duration: "350ms",
    easing: easings_1.EaseOut.quad,
    endOpacity: 1,
    fromPosition: "translateY(-500px)",
    startOpacity: 0,
    toPosition: "translateY(0)"
};
var baseOutParams = {
    delay: "0s",
    duration: "350ms",
    easing: easings_1.EaseIn.quad,
    endOpacity: 0,
    fromPosition: "translateY(0)",
    startOpacity: 1,
    toPosition: "translateY(-500px)"
};
var slideInTop = animations_1.animation(base, { params: baseInParams });
exports.slideInTop = slideInTop;
var slideInLeft = animations_1.animation(base, {
    params: {
        delay: "0s",
        duration: "350ms",
        easing: easings_1.EaseOut.quad,
        endOpacity: 1,
        fromPosition: "translateX(-500px)",
        startOpacity: 0,
        toPosition: "translateY(0)"
    }
});
exports.slideInLeft = slideInLeft;
var slideInRight = animations_1.animation(base, {
    params: {
        delay: "0s",
        duration: "350ms",
        easing: easings_1.EaseOut.quad,
        endOpacity: 1,
        fromPosition: "translateX(500px)",
        startOpacity: 0,
        toPosition: "translateY(0)"
    }
});
exports.slideInRight = slideInRight;
var slideInBottom = animations_1.animation(base, {
    params: {
        delay: "0s",
        duration: "350ms",
        easing: easings_1.EaseOut.quad,
        endOpacity: 1,
        fromPosition: "translateY(500px)",
        startOpacity: 0,
        toPosition: "translateY(0)"
    }
});
exports.slideInBottom = slideInBottom;
var slideInTr = animations_1.animation(base, {
    params: __assign({}, baseInParams, { fromPosition: "translateY(-500px) translateX(500px)", toPosition: "translateY(0) translateX(0)" })
});
exports.slideInTr = slideInTr;
var slideInTl = animations_1.animation(base, {
    params: __assign({}, baseInParams, { fromPosition: "translateY(-500px) translateX(-500px)", toPosition: "translateY(0) translateX(0)" })
});
exports.slideInTl = slideInTl;
var slideInBr = animations_1.animation(base, {
    params: __assign({}, baseInParams, { fromPosition: "translateY(500px) translateX(500px)", toPosition: "translateY(0) translateX(0)" })
});
exports.slideInBr = slideInBr;
var slideInBl = animations_1.animation(base, {
    params: __assign({}, baseInParams, { fromPosition: "translateY(500px) translateX(-500px)", toPosition: "translateY(0) translateX(0)" })
});
exports.slideInBl = slideInBl;
var slideOutTop = animations_1.animation(base, { params: baseOutParams });
exports.slideOutTop = slideOutTop;
var slideOutRight = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { toPosition: "translateX(500px)" })
});
exports.slideOutRight = slideOutRight;
var slideOutBottom = animations_1.animation(base, {
    params: {
        delay: "0s",
        duration: "350ms",
        easing: easings_1.EaseIn.quad,
        endOpacity: 0,
        fromPosition: "translateY(0)",
        startOpacity: 1,
        toPosition: "translateY(500px)"
    }
});
exports.slideOutBottom = slideOutBottom;
var slideOutLeft = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { toPosition: "translateX(-500px)" })
});
exports.slideOutLeft = slideOutLeft;
var slideOutTr = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { fromPosition: "translateY(0) translateX(0)", toPosition: "translateY(-500px) translateX(500px)" })
});
exports.slideOutTr = slideOutTr;
var slideOutBr = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { fromPosition: "translateY(0) translateX(0)", toPosition: "translateY(500px) translateX(500px)" })
});
exports.slideOutBr = slideOutBr;
var slideOutBl = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { fromPosition: "translateY(0) translateX(0)", toPosition: "translateY(500px) translateX(-500px)" })
});
exports.slideOutBl = slideOutBl;
var slideOutTl = animations_1.animation(base, {
    params: __assign({}, baseOutParams, { fromPosition: "translateY(0) translateX(0)", toPosition: "translateY(-500px) translateX(-500px)" })
});
exports.slideOutTl = slideOutTl;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var easings_1 = __webpack_require__(16);
var swingBase = [
    animations_1.style({
        opacity: "{{startOpacity}}",
        transform: "rotate{{direction}}({{startAngle}}deg)",
        transformOrigin: "{{xPos}} {{yPos}}"
    }),
    animations_1.animate("{{duration}} {{delay}} {{easing}}", animations_1.style({
        opacity: "{{endOpacity}}",
        transform: "rotate{{direction}}({{endAngle}}deg)",
        transformOrigin: "{{xPos}} {{yPos}}"
    }))
];
var swingParams = {
    delay: "0s",
    direction: "X",
    duration: ".5s",
    easing: easings_1.EaseOut.back,
    endAngle: 0,
    endOpacity: 1,
    startAngle: -100,
    startOpacity: 0,
    xPos: "top",
    yPos: "center"
};
var swingOutParams = __assign({}, swingParams, { duration: ".55s", easing: easings_1.EaseIn.back, endAngle: 70, endOpacity: 0, startAngle: 0, startOpacity: 1 });
var swingInTopFwd = animations_1.animation(swingBase, {
    params: __assign({}, swingParams)
});
exports.swingInTopFwd = swingInTopFwd;
var swingInRightFwd = animations_1.animation(swingBase, {
    params: __assign({}, swingParams, { direction: "Y", xPos: "center", yPos: "right" })
});
exports.swingInRightFwd = swingInRightFwd;
var swingInBottomFwd = animations_1.animation(swingBase, {
    params: __assign({}, swingParams, { startAngle: 100, xPos: "bottom" })
});
exports.swingInBottomFwd = swingInBottomFwd;
var swingInLeftFwd = animations_1.animation(swingBase, {
    params: __assign({}, swingParams, { direction: "Y", startAngle: 100, xPos: "center", yPos: "left" })
});
exports.swingInLeftFwd = swingInLeftFwd;
var swingInTopBck = animations_1.animation(swingBase, {
    params: __assign({}, swingParams, { duration: ".6s", startAngle: 70 })
});
exports.swingInTopBck = swingInTopBck;
var swingInRightBck = animations_1.animation(swingBase, {
    params: __assign({}, swingParams, { direction: "Y", duration: ".6s", startAngle: 70, xPos: "center", yPos: "right" })
});
exports.swingInRightBck = swingInRightBck;
var swingInBottomBck = animations_1.animation(swingBase, {
    params: __assign({}, swingParams, { duration: ".6s", startAngle: -70, xPos: "bottom" })
});
exports.swingInBottomBck = swingInBottomBck;
var swingInLeftBck = animations_1.animation(swingBase, {
    params: __assign({}, swingParams, { direction: "Y", duration: ".6s", startAngle: -70, xPos: "center", yPos: "left" })
});
exports.swingInLeftBck = swingInLeftBck;
var swingOutTopFwd = animations_1.animation(swingBase, {
    params: __assign({}, swingOutParams)
});
exports.swingOutTopFwd = swingOutTopFwd;
var swingOutRightFwd = animations_1.animation(swingBase, {
    params: __assign({}, swingOutParams, { direction: "Y", xPos: "center", yPos: "right" })
});
exports.swingOutRightFwd = swingOutRightFwd;
var swingOutBottomFwd = animations_1.animation(swingBase, {
    params: __assign({}, swingOutParams, { endAngle: -70, xPos: "bottom" })
});
exports.swingOutBottomFwd = swingOutBottomFwd;
var swingOutLefttFwd = animations_1.animation(swingBase, {
    params: __assign({}, swingOutParams, { direction: "Y", endAngle: -70, xPos: "center", yPos: "left" })
});
exports.swingOutLefttFwd = swingOutLefttFwd;
var swingOutTopBck = animations_1.animation(swingBase, {
    params: __assign({}, swingOutParams, { duration: ".45s", endAngle: -100 })
});
exports.swingOutTopBck = swingOutTopBck;
var swingOutRightBck = animations_1.animation(swingBase, {
    params: __assign({}, swingOutParams, { direction: "Y", duration: ".45s", endAngle: -100, xPos: "center", yPos: "right" })
});
exports.swingOutRightBck = swingOutRightBck;
var swingOutBottomBck = animations_1.animation(swingBase, {
    params: __assign({}, swingOutParams, { duration: ".45s", endAngle: 100, xPos: "bottom" })
});
exports.swingOutBottomBck = swingOutBottomBck;
var swingOutLeftBck = animations_1.animation(swingBase, {
    params: __assign({}, swingOutParams, { direction: "Y", duration: ".45s", endAngle: 100, xPos: "center", yPos: "left" })
});
exports.swingOutLeftBck = swingOutLeftBck;


/***/ }),
/* 136 */
/***/ (function(module, exports) {

module.exports = "<ng-template let-result #defaultHeader>\r\n    <span class=\"date-text\">{{ getFormattedDate().weekday }},&nbsp;</span>\r\n    <span class=\"date-text\">{{ getFormattedDate().monthday }}</span>\r\n</ng-template>\r\n\r\n<ng-template let-result #defaultMonth>\r\n    <span (click)=\"activeViewYear()\" class=\"date__el\">\r\n        {{ formattedMonth(viewDate) }}\r\n    </span>\r\n    <span (click)=\"activeViewDecade()\" class=\"date__el\">\r\n        {{ formattedYear(viewDate) }}\r\n    </span>\r\n</ng-template>\r\n\r\n<div *ngIf=\"selection === 'single'\" class=\"igx-calendar__header\">\r\n    <h5 class=\"igx-calendar__header-year\">{{ formattedYear(headerDate) }}</h5>\r\n    <h2 class=\"igx-calendar__header-date\">\r\n        <ng-container *ngTemplateOutlet=\"headerTemplate ? headerTemplate : defaultHeader; context: headerContext\">\r\n        </ng-container>\r\n    </h2>\r\n</div>\r\n\r\n<div *ngIf=\"isDefaultView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\" (swiperight)=\"previousMonth()\" (swipeleft)=\"nextMonth()\">\r\n    <div class=\"igx-calendar__body-picker\">\r\n        <div class=\"prev\" (click)=\"previousMonth()\">\r\n            <igx-icon fontSet=\"material\" name=\"keyboard_arrow_left\"></igx-icon>\r\n        </div>\r\n        <div class=\"date\">\r\n            <ng-container *ngTemplateOutlet=\"subheaderTemplate ? subheaderTemplate : defaultMonth; context: context\">\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"next\" (click)=\"nextMonth()\">\r\n            <igx-icon fontSet=\"material\" name=\"keyboard_arrow_right\"></igx-icon>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"igx-calendar__body-row\">\r\n        <span *ngFor=\"let dayName of generateWeekHeader()\" class=\"igx-calendar__label\">\r\n            {{ dayName | titlecase }}\r\n        </span>\r\n    </div>\r\n\r\n    <div *ngFor=\"let week of getCalendarMonth; index as i; trackBy: rowTracker\" class=\"igx-calendar__body-row\" [@animateChange]=\"monthAction\"\r\n        (@animateChange.done)=\"animationDone()\">\r\n        <span [igxCalendarDate]=\"day\" (onDateSelection)=\"childClicked($event)\" *ngFor=\"let day of week; trackBy: dateTracker\">\r\n            {{ formattedDate(day.date) }}\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n<div *ngIf=\"isYearView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\">\r\n    <div class=\"igx-calendar__body-row--wrap\">\r\n        <div (onMonthSelection)=\"changeMonth($event)\" [igxCalendarMonth]=\"month\" [index]=\"i\" *ngFor=\"let month of months; index as i;\">\r\n            {{ formattedMonth(month) | titlecase }}\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div *ngIf=\"isDecadeView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\">\r\n    <div class=\"igx-calendar__body-column\" (wheel)=\"onScroll($event)\" (pan)=\"onPan($event)\">\r\n        <span (onYearSelection)=\"changeYear($event)\" [igxCalendarYear]=\"year\" *ngFor=\"let year of decade\">\r\n            {{ formattedYear(year) }}\r\n        </span>\r\n    </div>\r\n</div>\r\n"

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var forms_1 = __webpack_require__(7);
var icon_1 = __webpack_require__(6);
var calendar_component_1 = __webpack_require__(49);
var calendar_directives_1 = __webpack_require__(48);
var IgxCalendarModule = (function () {
    function IgxCalendarModule() {
    }
    IgxCalendarModule = __decorate([
        core_1.NgModule({
            declarations: [
                calendar_component_1.IgxCalendarComponent,
                calendar_directives_1.IgxCalendarDateDirective,
                calendar_directives_1.IgxCalendarHeaderTemplateDirective,
                calendar_directives_1.IgxCalendarMonthDirective,
                calendar_directives_1.IgxCalendarYearDirective,
                calendar_directives_1.IgxCalendarSubheaderTemplateDirective
            ],
            exports: [
                calendar_component_1.IgxCalendarComponent,
                calendar_directives_1.IgxCalendarDateDirective,
                calendar_directives_1.IgxCalendarHeaderTemplateDirective,
                calendar_directives_1.IgxCalendarMonthDirective,
                calendar_directives_1.IgxCalendarYearDirective,
                calendar_directives_1.IgxCalendarSubheaderTemplateDirective
            ],
            imports: [common_1.CommonModule, forms_1.FormsModule, icon_1.IgxIconModule]
        })
    ], IgxCalendarModule);
    return IgxCalendarModule;
}());
exports.IgxCalendarModule = IgxCalendarModule;


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var button_directive_1 = __webpack_require__(17);
var NEXT_ID = 0;
var IgxCardHeaderDirective = (function () {
    function IgxCardHeaderDirective() {
    }
    IgxCardHeaderDirective = __decorate([
        core_1.Directive({
            selector: "igx-card-header"
        })
    ], IgxCardHeaderDirective);
    return IgxCardHeaderDirective;
}());
exports.IgxCardHeaderDirective = IgxCardHeaderDirective;
var IgxCardContentDirective = (function () {
    function IgxCardContentDirective() {
    }
    IgxCardContentDirective = __decorate([
        core_1.Directive({
            selector: "igx-card-content"
        })
    ], IgxCardContentDirective);
    return IgxCardContentDirective;
}());
exports.IgxCardContentDirective = IgxCardContentDirective;
var IgxCardActionsDirective = (function () {
    function IgxCardActionsDirective() {
    }
    IgxCardActionsDirective = __decorate([
        core_1.Directive({
            selector: "igx-card-actions"
        })
    ], IgxCardActionsDirective);
    return IgxCardActionsDirective;
}());
exports.IgxCardActionsDirective = IgxCardActionsDirective;
var IgxCardFooterDirective = (function () {
    function IgxCardFooterDirective() {
        this.role = "footer";
    }
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCardFooterDirective.prototype, "role", void 0);
    IgxCardFooterDirective = __decorate([
        core_1.Directive({
            selector: "igx-card-footer"
        })
    ], IgxCardFooterDirective);
    return IgxCardFooterDirective;
}());
exports.IgxCardFooterDirective = IgxCardFooterDirective;
var IgxCardComponent = (function () {
    function IgxCardComponent() {
        this.id = "igx-card-" + NEXT_ID++;
    }
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCardComponent.prototype, "id", void 0);
    IgxCardComponent = __decorate([
        core_1.Component({
            selector: "igx-card",
            template: __webpack_require__(139)
        })
    ], IgxCardComponent);
    return IgxCardComponent;
}());
exports.IgxCardComponent = IgxCardComponent;
var IgxCardModule = (function () {
    function IgxCardModule() {
    }
    IgxCardModule = __decorate([
        core_1.NgModule({
            declarations: [IgxCardComponent, IgxCardHeaderDirective,
                IgxCardContentDirective, IgxCardActionsDirective, IgxCardFooterDirective],
            exports: [IgxCardComponent, IgxCardHeaderDirective,
                IgxCardContentDirective, IgxCardActionsDirective, IgxCardFooterDirective],
            imports: [button_directive_1.IgxButtonModule]
        })
    ], IgxCardModule);
    return IgxCardModule;
}());
exports.IgxCardModule = IgxCardModule;


/***/ }),
/* 139 */
/***/ (function(module, exports) {

module.exports = "<div class=\"igx-card\" role=\"group\">\n    <ng-content></ng-content>\n</div>"

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var icon_1 = __webpack_require__(6);
var NEXT_ID = 0;
var Direction;
(function (Direction) {
    Direction[Direction["NONE"] = 0] = "NONE";
    Direction[Direction["NEXT"] = 1] = "NEXT";
    Direction[Direction["PREV"] = 2] = "PREV";
})(Direction = exports.Direction || (exports.Direction = {}));
var IgxCarouselComponent = (function () {
    function IgxCarouselComponent(element) {
        this.element = element;
        this.role = "region";
        this.id = "igx-carousel-" + NEXT_ID++;
        this.loop = true;
        this.pause = true;
        this.navigation = true;
        this.onSlideChanged = new core_1.EventEmitter();
        this.onSlideAdded = new core_1.EventEmitter();
        this.onSlideRemoved = new core_1.EventEmitter();
        this.onCarouselPaused = new core_1.EventEmitter();
        this.onCarouselPlaying = new core_1.EventEmitter();
        this.slides = [];
        this._total = 0;
    }
    Object.defineProperty(IgxCarouselComponent.prototype, "interval", {
        get: function () {
            return this._interval;
        },
        set: function (value) {
            this._interval = +value;
            this._restartInterval();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCarouselComponent.prototype, "tabIndex", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    IgxCarouselComponent.prototype.ngOnDestroy = function () {
        this._destroyed = true;
        if (this._lastInterval) {
            clearInterval(this._lastInterval);
        }
    };
    IgxCarouselComponent.prototype.setAriaLabel = function (slide) {
        return "Item " + (slide.index + 1) + " of " + this.total;
    };
    Object.defineProperty(IgxCarouselComponent.prototype, "total", {
        get: function () {
            return this._total;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCarouselComponent.prototype, "current", {
        get: function () {
            return !this._currentSlide ? 0 : this._currentSlide.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCarouselComponent.prototype, "isPlaying", {
        get: function () {
            return this._playing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCarouselComponent.prototype, "isDestroyed", {
        get: function () {
            return this._destroyed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCarouselComponent.prototype, "nativeElement", {
        get: function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    IgxCarouselComponent.prototype.get = function (index) {
        for (var _i = 0, _a = this.slides; _i < _a.length; _i++) {
            var each = _a[_i];
            if (each.index === index) {
                return each;
            }
        }
    };
    IgxCarouselComponent.prototype.add = function (slide) {
        slide.index = this.total;
        this.slides.push(slide);
        this._total += 1;
        if (this.total === 1 || slide.active) {
            this.select(slide);
            if (this.total === 1) {
                this.play();
            }
        }
        else {
            slide.active = false;
        }
        this.onSlideAdded.emit({ carousel: this, slide: slide });
    };
    IgxCarouselComponent.prototype.remove = function (slide) {
        this.slides.splice(slide.index, 1);
        this._total -= 1;
        if (!this.total) {
            this._currentSlide = null;
            return;
        }
        for (var i = 0; i < this.total; i++) {
            this.slides[i].index = i;
        }
        this.onSlideRemoved.emit({ carousel: this, slide: slide });
    };
    IgxCarouselComponent.prototype.select = function (slide, direction) {
        if (direction === void 0) { direction = Direction.NONE; }
        var newIndex = slide.index;
        if (direction === Direction.NONE) {
            direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;
        }
        if (slide && slide !== this._currentSlide) {
            this._moveTo(slide, direction);
        }
    };
    IgxCarouselComponent.prototype.next = function () {
        var index = (this.current + 1) % this.total;
        if (index === 0 && !this.loop) {
            this.stop();
            return;
        }
        return this.select(this.get(index), Direction.NEXT);
    };
    IgxCarouselComponent.prototype.prev = function () {
        var index = this.current - 1 < 0 ?
            this.total - 1 : this.current - 1;
        if (!this.loop && index === this.total - 1) {
            this.stop();
            return;
        }
        return this.select(this.get(index), Direction.PREV);
    };
    IgxCarouselComponent.prototype.play = function () {
        if (!this._playing) {
            this._playing = true;
            this.onCarouselPlaying.emit(this);
            this._restartInterval();
        }
    };
    IgxCarouselComponent.prototype.stop = function () {
        if (this.pause) {
            this._playing = false;
            this.onCarouselPaused.emit(this);
            this._resetInterval();
        }
    };
    IgxCarouselComponent.prototype._moveTo = function (slide, direction) {
        var _this = this;
        if (this._destroyed) {
            return;
        }
        slide.direction = direction;
        slide.active = true;
        if (this._currentSlide) {
            this._currentSlide.direction = direction;
            this._currentSlide.active = false;
        }
        this._currentSlide = slide;
        this.onSlideChanged.emit({ carousel: this, slide: slide });
        this._restartInterval();
        requestAnimationFrame(function () { return _this.nativeElement.focus(); });
    };
    IgxCarouselComponent.prototype._resetInterval = function () {
        if (this._lastInterval) {
            clearInterval(this._lastInterval);
            this._lastInterval = null;
        }
    };
    IgxCarouselComponent.prototype._restartInterval = function () {
        var _this = this;
        this._resetInterval();
        if (!isNaN(this.interval) && this.interval > 0) {
            this._lastInterval = setInterval(function () {
                var tick = +_this.interval;
                if (_this._playing && _this.total && !isNaN(tick) && tick > 0) {
                    _this.next();
                }
                else {
                    _this.stop();
                }
            }, this.interval);
        }
    };
    IgxCarouselComponent.prototype.onKeydownArrowRight = function () {
        this.next();
    };
    IgxCarouselComponent.prototype.onKeydownArrowLeft = function () {
        this.prev();
    };
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxCarouselComponent.prototype, "role", void 0);
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCarouselComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCarouselComponent.prototype, "loop", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCarouselComponent.prototype, "pause", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], IgxCarouselComponent.prototype, "interval", null);
    __decorate([
        core_1.HostBinding("attr.tabindex"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxCarouselComponent.prototype, "tabIndex", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCarouselComponent.prototype, "navigation", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxCarouselComponent.prototype, "onSlideChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxCarouselComponent.prototype, "onSlideAdded", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxCarouselComponent.prototype, "onSlideRemoved", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxCarouselComponent.prototype, "onCarouselPaused", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxCarouselComponent.prototype, "onCarouselPlaying", void 0);
    __decorate([
        core_1.HostListener("keydown.arrowright"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxCarouselComponent.prototype, "onKeydownArrowRight", null);
    __decorate([
        core_1.HostListener("keydown.arrowleft"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxCarouselComponent.prototype, "onKeydownArrowLeft", null);
    IgxCarouselComponent = __decorate([
        core_1.Component({
            selector: "igx-carousel",
            template: __webpack_require__(141)
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], IgxCarouselComponent);
    return IgxCarouselComponent;
}());
exports.IgxCarouselComponent = IgxCarouselComponent;
var IgxSlideComponent = (function () {
    function IgxSlideComponent(carousel) {
        this.carousel = carousel;
    }
    IgxSlideComponent.prototype.ngOnInit = function () {
        this.carousel.add(this);
    };
    IgxSlideComponent.prototype.ngOnDestroy = function () {
        this.carousel.remove(this);
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxSlideComponent.prototype, "index", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxSlideComponent.prototype, "direction", void 0);
    __decorate([
        core_1.HostBinding("class.active"),
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], IgxSlideComponent.prototype, "active", void 0);
    IgxSlideComponent = __decorate([
        core_1.Component({
            selector: "igx-slide",
            template: __webpack_require__(142)
        }),
        __metadata("design:paramtypes", [IgxCarouselComponent])
    ], IgxSlideComponent);
    return IgxSlideComponent;
}());
exports.IgxSlideComponent = IgxSlideComponent;
var IgxCarouselModule = (function () {
    function IgxCarouselModule() {
    }
    IgxCarouselModule = __decorate([
        core_1.NgModule({
            declarations: [IgxCarouselComponent, IgxSlideComponent],
            exports: [IgxCarouselComponent, IgxSlideComponent],
            imports: [common_1.CommonModule, icon_1.IgxIconModule]
        })
    ], IgxCarouselModule);
    return IgxCarouselModule;
}());
exports.IgxCarouselModule = IgxCarouselModule;


/***/ }),
/* 141 */
/***/ (function(module, exports) {

module.exports = "<div tabindex=\"0\" aria-label=\"carousel\" class=\"igx-carousel\"\r\n        (mouseenter)=\"stop()\"\r\n        (mouseleave)=\"play()\"\r\n        (swipeleft)=\"next()\"\r\n        (swiperight)=\"prev()\"\r\n        (tap)=\"isPlaying ? stop() : play()\">\r\n    <ul class=\"igx-carousel__indicators\" [hidden]=\"slides.length <= 1\">\r\n        <li *ngFor=\"let slide of slides\" [attr.aria-label]=\"setAriaLabel(slide)\" [attr.aria-selected]=\"slide.active\" [class.active]=\"slide.active === true\"\r\n            (click)=\"select(slide)\"></li>\r\n    </ul>\r\n    <div class=\"igx-carousel__inner\" role=\"list\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n    <div *ngIf=\"navigation\">\r\n        <a role=\"button\" tabindex=\"0\" class=\"igx-carousel__arrow--prev\" (click)=\"prev()\" [hidden]=\"!slides.length\">\r\n            <igx-icon fontSet=\"material\" name=\"arrow_back\"></igx-icon>\r\n        </a>\r\n        <a role=\"button\" tabindex=\"0\" class=\"igx-carousel__arrow--next\" (click)=\"next()\" [hidden]=\"!slides.length\">\r\n            <igx-icon fontSet=\"material\" name=\"arrow_forward\"></igx-icon>\r\n        </a>\r\n    </div>\r\n</div>\r\n"

/***/ }),
/* 142 */
/***/ (function(module, exports) {

module.exports = "<div\n    role=\"listitem\"\n    [class.active]=\"active\"\n    class=\"igx-slide\"\n    [attr.aria-selected]=\"active\"\n    [attr.aria-live]=\"active ? 'polite' : null\"\n    [attr.tabIndex]=\"active ? 0 : null\"\n>\n    <ng-content></ng-content>\n</div>\n"

/***/ }),
/* 143 */
/***/ (function(module, exports) {

module.exports = "<input #checkbox class=\"igx-checkbox__input\"\r\n    type=\"checkbox\"\r\n    [id]=\"inputId\"\r\n    [name]=\"name\"\r\n    [value]=\"value\"\r\n    [tabindex]=\"tabindex\"\r\n    [disabled]=\"disabled\"\r\n    [indeterminate]=\"indeterminate\"\r\n    [checked]=\"checked\"\r\n    [required]=\"required\"\r\n    [attr.aria-checked]=\"checked\"\r\n    [attr.aria-labelledby]=\"ariaLabelledBy\"\r\n    [attr.aria-label]=\"ariaLabel\"\r\n    (change)=\"_onCheckboxChange($event)\"\r\n    (click)=\"_onCheckboxClick($event)\"\r\n    (focus)=\"onFocus($event)\"\r\n    (blur)=\"onBlur($event)\" />\r\n\r\n<label #label class=\"igx-checkbox__composite\"\r\n    igxRipple\r\n    igxRippleTarget=\".igx-checkbox__ripple\"\r\n    [igxRippleDisabled]=\"disableRipple\"\r\n    [igxRippleCentered]=\"true\"\r\n    [igxRippleDuration]=\"100\"\r\n    [attr.for]=\"inputId\">\r\n    <svg class=\"igx-checkbox__composite-mark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M4.1,12.7 9,17.6 20.3,6.3\" />\r\n    </svg>\r\n    <div class=\"igx-checkbox__ripple\"></div>\r\n</label>\r\n\r\n<span #placeholderLabel role=\"label\"\r\n    [class]=\"labelClass\"\r\n    [id]=\"labelId\"\r\n    (click)=\"_onLabelClick($event)\">\r\n    <ng-content></ng-content>\r\n</span>\r\n"

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxDialogTitleDirective = (function () {
    function IgxDialogTitleDirective() {
        this.defaultStyle = true;
    }
    __decorate([
        core_1.HostBinding("class.igx-dialog__window-title"),
        __metadata("design:type", Object)
    ], IgxDialogTitleDirective.prototype, "defaultStyle", void 0);
    IgxDialogTitleDirective = __decorate([
        core_1.Directive({
            selector: "igx-dialog-title,[igxDialogTitle]"
        })
    ], IgxDialogTitleDirective);
    return IgxDialogTitleDirective;
}());
exports.IgxDialogTitleDirective = IgxDialogTitleDirective;
var IgxDialogActionsDirective = (function () {
    function IgxDialogActionsDirective() {
        this.defaultClass = true;
    }
    __decorate([
        core_1.HostBinding("class.igx-dialog__window-actions"),
        __metadata("design:type", Object)
    ], IgxDialogActionsDirective.prototype, "defaultClass", void 0);
    IgxDialogActionsDirective = __decorate([
        core_1.Directive({
            selector: "igx-dialog-actions,[igxDialogActions]"
        })
    ], IgxDialogActionsDirective);
    return IgxDialogActionsDirective;
}());
exports.IgxDialogActionsDirective = IgxDialogActionsDirective;


/***/ }),
/* 145 */
/***/ (function(module, exports) {

module.exports = "<div #dialog class=\"igx-dialog\" *ngIf=\"isOpen\" [@fadeInOut]=\"state\" (click)=\"onDialogSelected($event)\">\r\n    <div #dialogWindow class=\"igx-dialog__window\" [@slideIn]=\"state\" [attr.role]=\"role\" [attr.aria-labelledby]=\"titleId\">\r\n\r\n        <div *ngIf=\"title\" [attr.id]=\"titleId\" class=\"igx-dialog__window-title\">\r\n            {{ title }}\r\n        </div>\r\n        <ng-content *ngIf=\"!title\" select=\"igx-dialog-title,[igxDialogTitle]\"></ng-content>\r\n\r\n        <div class=\"igx-dialog__window-content\" *ngIf=\"message\">{{ message }}</div>\r\n        <ng-content *ngIf=\"!message\"></ng-content>\r\n\r\n        <div *ngIf=\"leftButtonLabel || rightButtonLabel\" class=\"igx-dialog__window-actions\">\r\n            <button *ngIf=\"leftButtonLabel\" type=\"button\" igxButton=\"{{ leftButtonType }}\" igxButtonColor=\"{{ leftButtonColor }}\" igxButtonBackground=\"{{ leftButtonBackgroundColor }}\"\r\n                igxRipple=\"{{ leftButtonRipple }}\" (click)=\"onInternalLeftButtonSelect($event)\">\r\n                {{ leftButtonLabel }}\r\n            </button>\r\n            <button *ngIf=\"rightButtonLabel\" type=\"button\" igxButton=\"{{ rightButtonType }}\" igxButtonColor=\"{{ rightButtonColor }}\" igxButtonBackground=\"{{ rightButtonBackgroundColor }}\"\r\n                igxRipple=\"{{ rightButtonRipple }}\" (click)=\"onInternalRightButtonSelect($event)\">\r\n                {{ rightButtonLabel }}\r\n            </button>\r\n        </div>\r\n        <ng-content *ngIf=\"!leftButtonLabel && !rightButtonLabel\" select=\"igx-dialog-actions,[igxDialogActions]\"></ng-content>\r\n\r\n    </div>\r\n</div>\r\n"

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxHintPosition;
(function (IgxHintPosition) {
    IgxHintPosition[IgxHintPosition["START"] = 0] = "START";
    IgxHintPosition[IgxHintPosition["END"] = 1] = "END";
})(IgxHintPosition || (IgxHintPosition = {}));
var IgxHintDirective = (function () {
    function IgxHintDirective(_element) {
        this._element = _element;
        this._position = IgxHintPosition.START;
        this.isPositionStart = false;
        this.isPositionEnd = false;
    }
    Object.defineProperty(IgxHintDirective.prototype, "position", {
        get: function () {
            return this._position.toString();
        },
        set: function (value) {
            var position = IgxHintPosition[value.toUpperCase()];
            if (position !== undefined) {
                this._position = position;
                this._applyPosition(this._position);
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxHintDirective.prototype.ngOnInit = function () {
        this._applyPosition(this._position);
    };
    IgxHintDirective.prototype._applyPosition = function (position) {
        this.isPositionStart = this.isPositionEnd = false;
        switch (position) {
            case IgxHintPosition.START:
                this.isPositionStart = true;
                break;
            case IgxHintPosition.END:
                this.isPositionEnd = true;
                break;
            default: break;
        }
    };
    __decorate([
        core_1.HostBinding("class.igx-input-group__hint-item--start"),
        __metadata("design:type", Object)
    ], IgxHintDirective.prototype, "isPositionStart", void 0);
    __decorate([
        core_1.HostBinding("class.igx-input-group__hint-item--end"),
        __metadata("design:type", Object)
    ], IgxHintDirective.prototype, "isPositionEnd", void 0);
    __decorate([
        core_1.Input("position"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], IgxHintDirective.prototype, "position", null);
    IgxHintDirective = __decorate([
        core_1.Directive({
            selector: "igx-hint,[igxHint]"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], IgxHintDirective);
    return IgxHintDirective;
}());
exports.IgxHintDirective = IgxHintDirective;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var forms_1 = __webpack_require__(7);
var main_1 = __webpack_require__(67);
var nativeValidationAttributes = ["required", "pattern", "minlength", "maxlength", "min", "max", "step"];
var IgxInputState;
(function (IgxInputState) {
    IgxInputState[IgxInputState["INITIAL"] = 0] = "INITIAL";
    IgxInputState[IgxInputState["VALID"] = 1] = "VALID";
    IgxInputState[IgxInputState["INVALID"] = 2] = "INVALID";
})(IgxInputState = exports.IgxInputState || (exports.IgxInputState = {}));
var IgxInputDirective = (function () {
    function IgxInputDirective(inputGroup, ngModel, element, cdr) {
        this.inputGroup = inputGroup;
        this.ngModel = ngModel;
        this.element = element;
        this.cdr = cdr;
        this._valid = IgxInputState.INITIAL;
        this.isInput = false;
        this.isTextArea = false;
    }
    Object.defineProperty(IgxInputDirective.prototype, "value", {
        get: function () {
            return this.nativeElement.value;
        },
        set: function (value) {
            this.nativeElement.value = value;
            this.inputGroup.isFilled = value && value.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputDirective.prototype, "disabled", {
        get: function () {
            return this.nativeElement.hasAttribute("disabled");
        },
        set: function (value) {
            this.nativeElement.disabled = value;
            this.inputGroup.isDisabled = value;
        },
        enumerable: true,
        configurable: true
    });
    IgxInputDirective.prototype.onFocus = function (event) {
        this.inputGroup.isFocused = true;
    };
    IgxInputDirective.prototype.onBlur = function (event) {
        this.inputGroup.isFocused = false;
        this._valid = IgxInputState.INITIAL;
        if (this.ngModel) {
            if (!this.ngModel.valid) {
                this._valid = IgxInputState.INVALID;
            }
        }
        else if (this._hasValidators() && !this.nativeElement.checkValidity()) {
            this._valid = IgxInputState.INVALID;
        }
    };
    IgxInputDirective.prototype.onInput = function (event) {
        var value = this.nativeElement.value;
        this.inputGroup.isFilled = value && value.length > 0;
        if (!this.ngModel && this._hasValidators()) {
            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;
        }
    };
    IgxInputDirective.prototype.ngAfterViewInit = function () {
        if (this.nativeElement.hasAttribute("placeholder")) {
            this.inputGroup.hasPlaceholder = true;
        }
        if (this.nativeElement.hasAttribute("required")) {
            this.inputGroup.isRequired = true;
        }
        if (this.nativeElement.hasAttribute("disabled")) {
            this.inputGroup.isDisabled = true;
        }
        if ((this.nativeElement.value && this.nativeElement.value.length > 0) ||
            (this.ngModel && this.ngModel.model && this.ngModel.model.length > 0)) {
            this.inputGroup.isFilled = true;
        }
        var elTag = this.nativeElement.tagName.toLowerCase();
        if (elTag === "textarea") {
            this.isTextArea = true;
        }
        else {
            this.isInput = true;
        }
        if (this.ngModel) {
            this._statusChanges$ = this.ngModel.statusChanges.subscribe(this.onStatusChanged.bind(this));
        }
        this.cdr.detectChanges();
    };
    IgxInputDirective.prototype.ngOnDestroy = function () {
        if (this._statusChanges$) {
            this._statusChanges$.unsubscribe();
        }
    };
    IgxInputDirective.prototype.focus = function () {
        this.nativeElement.focus();
    };
    Object.defineProperty(IgxInputDirective.prototype, "nativeElement", {
        get: function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    IgxInputDirective.prototype.onStatusChanged = function (status) {
        if (!this.ngModel.control.pristine && (this.ngModel.validator || this.ngModel.asyncValidator)) {
            this._valid = this.ngModel.valid ? IgxInputState.VALID : IgxInputState.INVALID;
        }
    };
    Object.defineProperty(IgxInputDirective.prototype, "required", {
        get: function () {
            return this.nativeElement.hasAttribute("required");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputDirective.prototype, "hasPlaceholder", {
        get: function () {
            return this.nativeElement.hasAttribute("placeholder");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputDirective.prototype, "placeholder", {
        get: function () {
            return this.nativeElement.placeholder;
        },
        enumerable: true,
        configurable: true
    });
    IgxInputDirective.prototype._hasValidators = function () {
        for (var _i = 0, nativeValidationAttributes_1 = nativeValidationAttributes; _i < nativeValidationAttributes_1.length; _i++) {
            var nativeValidationAttribute = nativeValidationAttributes_1[_i];
            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {
                return true;
            }
        }
        return false;
    };
    Object.defineProperty(IgxInputDirective.prototype, "focused", {
        get: function () {
            return this.inputGroup.isFocused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxInputDirective.prototype, "valid", {
        get: function () {
            return this._valid;
        },
        set: function (value) {
            this._valid = value;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input("value"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxInputDirective.prototype, "value", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxInputDirective.prototype, "disabled", null);
    __decorate([
        core_1.HostBinding("class.igx-input-group__input"),
        __metadata("design:type", Object)
    ], IgxInputDirective.prototype, "isInput", void 0);
    __decorate([
        core_1.HostBinding("class.igx-input-group__textarea"),
        __metadata("design:type", Object)
    ], IgxInputDirective.prototype, "isTextArea", void 0);
    __decorate([
        core_1.HostListener("focus", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxInputDirective.prototype, "onFocus", null);
    __decorate([
        core_1.HostListener("blur", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxInputDirective.prototype, "onBlur", null);
    __decorate([
        core_1.HostListener("input", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxInputDirective.prototype, "onInput", null);
    IgxInputDirective = __decorate([
        core_1.Directive({
            selector: "[igxInput]"
        }),
        __param(0, core_1.Inject(core_1.forwardRef(function () { return main_1.IgxInputGroupComponent; }))),
        __param(1, core_1.Optional()), __param(1, core_1.Self()), __param(1, core_1.Inject(forms_1.NgModel)),
        __metadata("design:paramtypes", [main_1.IgxInputGroupComponent,
            forms_1.NgModel,
            core_1.ElementRef,
            core_1.ChangeDetectorRef])
    ], IgxInputDirective);
    return IgxInputDirective;
}());
exports.IgxInputDirective = IgxInputDirective;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxLabelDirective = (function () {
    function IgxLabelDirective() {
        this.defaultClass = true;
    }
    __decorate([
        core_1.HostBinding("class.igx-input-group__label"),
        __metadata("design:type", Object)
    ], IgxLabelDirective.prototype, "defaultClass", void 0);
    IgxLabelDirective = __decorate([
        core_1.Directive({
            selector: "[igxLabel]"
        })
    ], IgxLabelDirective);
    return IgxLabelDirective;
}());
exports.IgxLabelDirective = IgxLabelDirective;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxPrefixDirective = (function () {
    function IgxPrefixDirective() {
        this.defaultClass = true;
    }
    __decorate([
        core_1.HostBinding("class.igx-input-group__bundle-prefix"),
        __metadata("design:type", Object)
    ], IgxPrefixDirective.prototype, "defaultClass", void 0);
    IgxPrefixDirective = __decorate([
        core_1.Directive({
            selector: "igx-prefix,[igxPrefix]"
        })
    ], IgxPrefixDirective);
    return IgxPrefixDirective;
}());
exports.IgxPrefixDirective = IgxPrefixDirective;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxSuffixDirective = (function () {
    function IgxSuffixDirective() {
        this.defaultClass = true;
    }
    __decorate([
        core_1.HostBinding("class.igx-input-group__bundle-suffix"),
        __metadata("design:type", Object)
    ], IgxSuffixDirective.prototype, "defaultClass", void 0);
    IgxSuffixDirective = __decorate([
        core_1.Directive({
            selector: "igx-suffix,[igxSuffix]"
        })
    ], IgxSuffixDirective);
    return IgxSuffixDirective;
}());
exports.IgxSuffixDirective = IgxSuffixDirective;


/***/ }),
/* 151 */
/***/ (function(module, exports) {

module.exports = "<div class=\"igx-input-group__wrapper\" *ngIf=\"isTypeBox; else bundle\">\r\n    <ng-container *ngTemplateOutlet=\"bundle\"></ng-container>\r\n</div>\r\n<div class=\"igx-input-group__hint\" *ngIf=\"hasHints\">\r\n    <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\r\n</div>\r\n<ng-template #bundle>\r\n    <div class=\"igx-input-group__bundle\">\r\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\r\n        <div class=\"igx-input-group__bundle-main\">\r\n            <ng-content select=\"[igxLabel]\"></ng-content>\r\n            <ng-content select=\"[igxInput]\"></ng-content>\r\n        </div>\r\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\r\n    </div>\r\n    <div class=\"igx-input-group__border\" *ngIf=\"hasBorder\"></div>\r\n</ng-template>\r\n"

/***/ }),
/* 152 */
/***/ (function(module, exports) {

module.exports = "<div [ngClass]=\"{'igx-date-picker': !vertical, 'igx-date-picker--vertical': vertical}\">\r\n    <igx-input-group (click)=\"onOpenEvent($event)\">\r\n        <igx-prefix>\r\n            <igx-icon>today</igx-icon>\r\n        </igx-prefix>\r\n        <label igxLabel>Date</label>\r\n        <input class=\"igx-date-picker__input-date\" igxInput [value]=\"displayData\" [disabled]=\"isDisabled\" readonly />\r\n    </igx-input-group>\r\n    <igx-dialog class=\"igx-date-picker__dialog-popup\" closeOnOutsideSelect=\"true\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"alert.close()\"\r\n        [rightButtonLabel]=\"todayButtonLabel\" (onRightButtonSelect)=\"triggerTodaySelection()\">\r\n        <ng-container #container></ng-container>\r\n    </igx-dialog>\r\n</div>\r\n"

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var forms_1 = __webpack_require__(7);
var badge_component_1 = __webpack_require__(38);
var checkbox_component_1 = __webpack_require__(40);
var selection_1 = __webpack_require__(28);
var date_picker_component_1 = __webpack_require__(78);
var button_directive_1 = __webpack_require__(17);
var focus_directive_1 = __webpack_require__(79);
var for_of_directive_1 = __webpack_require__(42);
var ripple_directive_1 = __webpack_require__(12);
var text_highlight_directive_1 = __webpack_require__(29);
var text_selection_directive_1 = __webpack_require__(81);
var toggle_directive_1 = __webpack_require__(53);
var icon_1 = __webpack_require__(6);
var input_group_component_1 = __webpack_require__(41);
var api_service_1 = __webpack_require__(10);
var cell_component_1 = __webpack_require__(103);
var column_component_1 = __webpack_require__(35);
var grid_filtering_component_1 = __webpack_require__(209);
var grid_header_component_1 = __webpack_require__(211);
var grid_summary_component_1 = __webpack_require__(214);
var grid_common_1 = __webpack_require__(14);
var grid_component_1 = __webpack_require__(216);
var grid_pipes_1 = __webpack_require__(104);
var groupby_row_component_1 = __webpack_require__(105);
var row_component_1 = __webpack_require__(106);
var IgxGridModule = (function () {
    function IgxGridModule() {
    }
    IgxGridModule_1 = IgxGridModule;
    IgxGridModule.forRoot = function () {
        return {
            ngModule: IgxGridModule_1,
            providers: [api_service_1.IgxGridAPIService, selection_1.IgxSelectionAPIService]
        };
    };
    IgxGridModule = IgxGridModule_1 = __decorate([
        core_1.NgModule({
            declarations: [
                cell_component_1.IgxGridCellComponent,
                column_component_1.IgxColumnComponent,
                grid_component_1.IgxGridComponent,
                row_component_1.IgxGridRowComponent,
                groupby_row_component_1.IgxGridGroupByRowComponent,
                grid_header_component_1.IgxGridHeaderComponent,
                grid_summary_component_1.IgxGridSummaryComponent,
                grid_common_1.IgxCellFooterTemplateDirective,
                grid_common_1.IgxCellHeaderTemplateDirective,
                grid_common_1.IgxGroupByRowTemplateDirective,
                grid_common_1.IgxCellEditorTemplateDirective,
                grid_common_1.IgxCellTemplateDirective,
                grid_common_1.IgxColumnResizerDirective,
                grid_filtering_component_1.IgxGridFilterComponent,
                grid_pipes_1.IgxGridPreGroupingPipe,
                grid_pipes_1.IgxGridPostGroupingPipe,
                grid_pipes_1.IgxGridSortingPipe,
                grid_pipes_1.IgxGridPagingPipe,
                grid_pipes_1.IgxGridFilteringPipe,
                grid_pipes_1.IgxGridFilterConditionPipe
            ],
            entryComponents: [
                column_component_1.IgxColumnComponent
            ],
            exports: [
                grid_component_1.IgxGridComponent,
                cell_component_1.IgxGridCellComponent,
                groupby_row_component_1.IgxGridGroupByRowComponent,
                row_component_1.IgxGridRowComponent,
                column_component_1.IgxColumnComponent,
                grid_header_component_1.IgxGridHeaderComponent,
                grid_filtering_component_1.IgxGridFilterComponent,
                grid_summary_component_1.IgxGridSummaryComponent,
                grid_common_1.IgxCellFooterTemplateDirective,
                grid_common_1.IgxCellHeaderTemplateDirective,
                grid_common_1.IgxGroupByRowTemplateDirective,
                grid_common_1.IgxCellEditorTemplateDirective,
                grid_common_1.IgxCellTemplateDirective,
                grid_common_1.IgxColumnResizerDirective
            ],
            imports: [
                common_1.CommonModule,
                forms_1.FormsModule,
                button_directive_1.IgxButtonModule,
                date_picker_component_1.IgxDatePickerModule,
                icon_1.IgxIconModule,
                ripple_directive_1.IgxRippleModule,
                input_group_component_1.IgxInputGroupModule,
                toggle_directive_1.IgxToggleModule,
                for_of_directive_1.IgxForOfModule,
                focus_directive_1.IgxFocusModule,
                text_highlight_directive_1.IgxTextHighlightModule,
                text_selection_directive_1.IgxTextSelectionModule,
                checkbox_component_1.IgxCheckboxModule,
                badge_component_1.IgxBadgeModule
            ],
            providers: [api_service_1.IgxGridAPIService, selection_1.IgxSelectionAPIService]
        })
    ], IgxGridModule);
    return IgxGridModule;
    var IgxGridModule_1;
}());
exports.IgxGridModule = IgxGridModule;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var DisplayContainerComponent = (function () {
    function DisplayContainerComponent(cdr, _viewContainer) {
        this.cdr = cdr;
        this._viewContainer = _viewContainer;
        this.cssClass = "igx-display-container";
        this.notVirtual = true;
    }
    __decorate([
        core_1.ViewChild("display_container", { read: core_1.ViewContainerRef }),
        __metadata("design:type", Object)
    ], DisplayContainerComponent.prototype, "_vcr", void 0);
    __decorate([
        core_1.HostBinding("class"),
        __metadata("design:type", Object)
    ], DisplayContainerComponent.prototype, "cssClass", void 0);
    __decorate([
        core_1.HostBinding("class.igx-display-container--inactive"),
        __metadata("design:type", Object)
    ], DisplayContainerComponent.prototype, "notVirtual", void 0);
    DisplayContainerComponent = __decorate([
        core_1.Component({
            selector: "igx-display-container",
            template: "<ng-template #display_container></ng-template>"
        }),
        __metadata("design:paramtypes", [core_1.ChangeDetectorRef, core_1.ViewContainerRef])
    ], DisplayContainerComponent);
    return DisplayContainerComponent;
}());
exports.DisplayContainerComponent = DisplayContainerComponent;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var HVirtualHelperComponent = (function () {
    function HVirtualHelperComponent(elementRef) {
        this.elementRef = elementRef;
        this.cssClasses = "igx-vhelper--horizontal";
    }
    __decorate([
        core_1.ViewChild("horizontal_container", { read: core_1.ViewContainerRef }),
        __metadata("design:type", Object)
    ], HVirtualHelperComponent.prototype, "_vcr", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], HVirtualHelperComponent.prototype, "width", void 0);
    __decorate([
        core_1.HostBinding("class"),
        __metadata("design:type", Object)
    ], HVirtualHelperComponent.prototype, "cssClasses", void 0);
    HVirtualHelperComponent = __decorate([
        core_1.Component({
            selector: "igx-horizontal-virtual-helper",
            template: "<div #horizontal_container class='igx-vhelper__placeholder-content' [style.width.px]='width'></div>"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], HVirtualHelperComponent);
    return HVirtualHelperComponent;
}());
exports.HVirtualHelperComponent = HVirtualHelperComponent;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var VirtualHelperComponent = (function () {
    function VirtualHelperComponent(elementRef) {
        this.elementRef = elementRef;
        this.cssClasses = "igx-vhelper--vertical";
    }
    VirtualHelperComponent.prototype.ngOnInit = function () {
    };
    __decorate([
        core_1.ViewChild("container", { read: core_1.ViewContainerRef }),
        __metadata("design:type", Object)
    ], VirtualHelperComponent.prototype, "_vcr", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], VirtualHelperComponent.prototype, "itemsLength", void 0);
    __decorate([
        core_1.HostBinding("class"),
        __metadata("design:type", Object)
    ], VirtualHelperComponent.prototype, "cssClasses", void 0);
    VirtualHelperComponent = __decorate([
        core_1.Component({
            selector: "igx-virtual-helper",
            template: "<div #container class='igx-vhelper__placeholder-content' [style.height.px]='height'></div>"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], VirtualHelperComponent);
    return VirtualHelperComponent;
}());
exports.VirtualHelperComponent = VirtualHelperComponent;


/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = toSubscriber;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Subscriber__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__symbol_rxSubscriber__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Observer__ = __webpack_require__(82);
/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */



function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof __WEBPACK_IMPORTED_MODULE_0__Subscriber__["a" /* Subscriber */]) {
            return nextOrObserver;
        }
        if (nextOrObserver[__WEBPACK_IMPORTED_MODULE_1__symbol_rxSubscriber__["a" /* rxSubscriber */]]) {
            return nextOrObserver[__WEBPACK_IMPORTED_MODULE_1__symbol_rxSubscriber__["a" /* rxSubscriber */]]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new __WEBPACK_IMPORTED_MODULE_0__Subscriber__["a" /* Subscriber */](__WEBPACK_IMPORTED_MODULE_2__Observer__["a" /* empty */]);
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Subscriber__["a" /* Subscriber */](nextOrObserver, error, complete);
}
//# sourceMappingURL=toSubscriber.js.map


/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = tryCatch;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__errorObject__ = __webpack_require__(84);
/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */

var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        __WEBPACK_IMPORTED_MODULE_0__errorObject__["a" /* errorObject */].e = e;
        return __WEBPACK_IMPORTED_MODULE_0__errorObject__["a" /* errorObject */];
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
//# sourceMappingURL=tryCatch.js.map


/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConnectableObservable; });
/* unused harmony export connectableObservableDescriptor */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Subscriber__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Subscription__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__operators_refCount__ = __webpack_require__(160);
/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */






/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._refCount = 0;
        /** @internal */
        _this._isComplete = false;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new __WEBPACK_IMPORTED_MODULE_4__Subscription__["a" /* Subscription */]();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = __WEBPACK_IMPORTED_MODULE_4__Subscription__["a" /* Subscription */].EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return Object(__WEBPACK_IMPORTED_MODULE_5__operators_refCount__["a" /* refCount */])()(this);
    };
    return ConnectableObservable;
}(__WEBPACK_IMPORTED_MODULE_2__Observable__["a" /* Observable */]));

var connectableProto = ConnectableObservable.prototype;
var connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subject: { value: null, writable: true },
    _connection: { value: null, writable: true },
    _subscribe: { value: connectableProto._subscribe },
    _isComplete: { value: connectableProto._isComplete, writable: true },
    getSubject: { value: connectableProto.getSubject },
    connect: { value: connectableProto.connect },
    refCount: { value: connectableProto.refCount }
};
var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subject__["b" /* SubjectSubscriber */]));
var RefCountOperator = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=ConnectableObservable.js.map


/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = refCount;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(8);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator(source));
    };
}
var RefCountOperator = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=refCount.js.map


/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export groupBy */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GroupedObservable; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Subscription__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Subject__ = __webpack_require__(20);
/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */





/* tslint:enable:max-line-length */
/**
 * Groups the items emitted by an Observable according to a specified criterion,
 * and emits these grouped items as `GroupedObservables`, one
 * {@link GroupedObservable} per group.
 *
 * <img src="./img/groupBy.png" width="100%">
 *
 * @example <caption>Group objects by id and return as array</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs3'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *     )
 *     .groupBy(p => p.id)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // [ { id: 1, name: 'aze1' },
 * //   { id: 1, name: 'erg1' },
 * //   { id: 1, name: 'df1' } ]
 * //
 * // [ { id: 2, name: 'sf2' },
 * //   { id: 2, name: 'dg2' },
 * //   { id: 2, name: 'sfqfb2' },
 * //   { id: 2, name: 'qsgqsfg2' } ]
 * //
 * // [ { id: 3, name: 'qfs3' } ]
 *
 * @example <caption>Pivot data on the id field</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs1'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *                   )
 *     .groupBy(p => p.id, p => p.name)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], ["" + group$.key]))
 *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }
 * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }
 * // { id: 3, values: [ 'qfs1' ] }
 *
 * @param {function(value: T): K} keySelector A function that extracts the key
 * for each item.
 * @param {function(value: T): R} [elementSelector] A function that extracts the
 * return element for each item.
 * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]
 * A function that returns an Observable to determine how long each group should
 * exist.
 * @return {Observable<GroupedObservable<K,R>>} An Observable that emits
 * GroupedObservables, each of which corresponds to a unique key value and each
 * of which emits those items from the source Observable that share that key
 * value.
 * @method groupBy
 * @owner Observable
 */
function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
    return function (source) {
        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
    };
}
var GroupByOperator = /*@__PURE__*/ (function () {
    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    }
    GroupByOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    };
    return GroupByOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupBySubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.elementSelector = elementSelector;
        _this.durationSelector = durationSelector;
        _this.subjectSelector = subjectSelector;
        _this.groups = null;
        _this.attemptedToUnsubscribe = false;
        _this.count = 0;
        return _this;
    }
    GroupBySubscriber.prototype._next = function (value) {
        var key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function (value, key) {
        var groups = this.groups;
        if (!groups) {
            groups = this.groups = new Map();
        }
        var group = groups.get(key);
        var element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = (this.subjectSelector ? this.subjectSelector() : new __WEBPACK_IMPORTED_MODULE_4__Subject__["a" /* Subject */]());
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                var duration = void 0;
                try {
                    duration = this.durationSelector(new GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    };
    GroupBySubscriber.prototype._error = function (err) {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function () {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function (key) {
        this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                _super.prototype.unsubscribe.call(this);
            }
        }
    };
    return GroupBySubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
        var _this = _super.call(this, group) || this;
        _this.key = key;
        _this.group = group;
        _this.parent = parent;
        return _this;
    }
    GroupDurationSubscriber.prototype._next = function (value) {
        this.complete();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    GroupDurationSubscriber.prototype._unsubscribe = function () {
        var _a = this, parent = _a.parent, key = _a.key;
        this.key = this.parent = null;
        if (parent) {
            parent.removeGroup(key);
        }
    };
    return GroupDurationSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
/**
 * An Observable representing values belonging to the same group represented by
 * a common key. The values emitted by a GroupedObservable come from the source
 * Observable. The common key is available as the field `key` on a
 * GroupedObservable instance.
 *
 * @class GroupedObservable<K, T>
 */
var GroupedObservable = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](GroupedObservable, _super);
    /** @deprecated Do not construct this type. Internal use only */
    function GroupedObservable(key, groupSubject, refCountSubscription) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.groupSubject = groupSubject;
        _this.refCountSubscription = refCountSubscription;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    GroupedObservable.prototype._subscribe = function (subscriber) {
        var subscription = new __WEBPACK_IMPORTED_MODULE_2__Subscription__["a" /* Subscription */]();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    };
    return GroupedObservable;
}(__WEBPACK_IMPORTED_MODULE_3__Observable__["a" /* Observable */]));

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        parent.count++;
        return _this;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function () {
        var parent = this.parent;
        if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    };
    return InnerRefCountSubscription;
}(__WEBPACK_IMPORTED_MODULE_2__Subscription__["a" /* Subscription */]));
//# sourceMappingURL=groupBy.js.map


/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BehaviorSubject; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_ObjectUnsubscribedError__ = __webpack_require__(45);
/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */



/**
 * @class BehaviorSubject<T>
 */
var BehaviorSubject = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated This is an internal implementation detail, do not use. */
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_2__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(__WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]));

//# sourceMappingURL=BehaviorSubject.js.map


/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ReplaySubject; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__scheduler_queue__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Subscription__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__operators_observeOn__ = __webpack_require__(167);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_ObjectUnsubscribedError__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__SubjectSubscription__ = __webpack_require__(87);
/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */







/**
 * @class ReplaySubject<T>
 */
var ReplaySubject = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) {
            bufferSize = Number.POSITIVE_INFINITY;
        }
        if (windowTime === void 0) {
            windowTime = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this) || this;
        _this.scheduler = scheduler;
        _this._events = [];
        _this._infiniteTimeWindow = false;
        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        _this._windowTime = windowTime < 1 ? 1 : windowTime;
        if (windowTime === Number.POSITIVE_INFINITY) {
            _this._infiniteTimeWindow = true;
            _this.next = _this.nextInfiniteTimeWindow;
        }
        else {
            _this.next = _this.nextTimeWindow;
        }
        return _this;
    }
    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
        var _events = this._events;
        _events.push(value);
        // Since this method is invoked in every next() call than the buffer
        // can overgrow the max size only by one item
        if (_events.length > this._bufferSize) {
            _events.shift();
        }
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype.nextTimeWindow = function (value) {
        this._events.push(new ReplayEvent(this._getNow(), value));
        this._trimBufferThenGetEvents();
        _super.prototype.next.call(this, value);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    ReplaySubject.prototype._subscribe = function (subscriber) {
        // When `_infiniteTimeWindow === true` then the buffer is already trimmed
        var _infiniteTimeWindow = this._infiniteTimeWindow;
        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var len = _events.length;
        var subscription;
        if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_5__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        else if (this.isStopped || this.hasError) {
            subscription = __WEBPACK_IMPORTED_MODULE_3__Subscription__["a" /* Subscription */].EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new __WEBPACK_IMPORTED_MODULE_6__SubjectSubscription__["a" /* SubjectSubscription */](this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new __WEBPACK_IMPORTED_MODULE_4__operators_observeOn__["a" /* ObserveOnSubscriber */](subscriber, scheduler));
        }
        if (_infiniteTimeWindow) {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
            }
        }
        else {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || __WEBPACK_IMPORTED_MODULE_2__scheduler_queue__["a" /* queue */]).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        // Trim events that fall out of the time window.
        // Start at the front of the list. Break early once
        // we encounter an event that falls within the window.
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(__WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]));

var ReplayEvent = /*@__PURE__*/ (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());
//# sourceMappingURL=ReplaySubject.js.map


/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QueueAction; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncAction__ = __webpack_require__(30);
/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var QueueAction = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](QueueAction, _super);
    function QueueAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Otherwise flush the scheduler starting with this action.
        return scheduler.flush(this);
    };
    return QueueAction;
}(__WEBPACK_IMPORTED_MODULE_1__AsyncAction__["a" /* AsyncAction */]));

//# sourceMappingURL=QueueAction.js.map


/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Action; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */


/**
 * A unit of work to be executed in a {@link Scheduler}. An action is typically
 * created from within a Scheduler and an RxJS user does not need to concern
 * themselves about creating and manipulating an Action.
 *
 * ```ts
 * class Action<T> extends Subscription {
 *   new (scheduler: Scheduler, work: (state?: T) => void);
 *   schedule(state?: T, delay: number = 0): Subscription;
 * }
 * ```
 *
 * @class Action<T>
 */
var Action = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    /**
     * Schedules this action on its parent Scheduler for execution. May be passed
     * some context object, `state`. May happen at some point in the future,
     * according to the `delay` parameter, if specified.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler.
     * @return {void}
     */
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this;
    };
    return Action;
}(__WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]));

//# sourceMappingURL=Action.js.map


/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QueueScheduler; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__ = __webpack_require__(31);
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var QueueScheduler = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](QueueScheduler, _super);
    function QueueScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueueScheduler;
}(__WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__["a" /* AsyncScheduler */]));

//# sourceMappingURL=QueueScheduler.js.map


/***/ }),
/* 167 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export observeOn */
/* unused harmony export ObserveOnOperator */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ObserveOnSubscriber; });
/* unused harmony export ObserveOnMessage */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Notification__ = __webpack_require__(90);
/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */



/**
 *
 * Re-emits all notifications from source Observable with specified scheduler.
 *
 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
 *
 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
 * notifications emitted by the source Observable. It might be useful, if you do not have control over
 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
 *
 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
 * little bit more, to ensure that they are emitted at expected moments.
 *
 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
 * will delay all notifications - including error notifications - while `delay` will pass through error
 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
 * for notification emissions in general.
 *
 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
 *                                               // with async scheduler by default...
 *
 * intervals
 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
 * .subscribe(val => {                           // scheduler to ensure smooth animation.
 *   someDiv.style.height = val + 'px';
 * });
 *
 * @see {@link delay}
 *
 * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.
 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
 * but with provided scheduler.
 *
 * @method observeOn
 * @owner Observable
 */
function observeOn(scheduler, delay) {
    if (delay === void 0) {
        delay = 0;
    }
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
var ObserveOnOperator = /*@__PURE__*/ (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        var _this = _super.call(this, destination) || this;
        _this.scheduler = scheduler;
        _this.delay = delay;
        return _this;
    }
    /** @nocollapse */
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(__WEBPACK_IMPORTED_MODULE_2__Notification__["a" /* Notification */].createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(__WEBPACK_IMPORTED_MODULE_2__Notification__["a" /* Notification */].createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(__WEBPACK_IMPORTED_MODULE_2__Notification__["a" /* Notification */].createComplete());
    };
    return ObserveOnSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));

var ObserveOnMessage = /*@__PURE__*/ (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());

//# sourceMappingURL=observeOn.js.map


/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = scalar;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function scalar(value) {
    var result = new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        subscriber.next(value);
        subscriber.complete();
    });
    result._isScalar = true;
    result.value = value;
    return result;
}
//# sourceMappingURL=scalar.js.map


/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return asap; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AsapAction__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsapScheduler__ = __webpack_require__(172);
/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */


/**
 *
 * Asap Scheduler
 *
 * <span class="informal">Perform task as fast as it can be performed asynchronously</span>
 *
 * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task
 * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing
 * code to end and then it will try to execute given task as fast as possible.
 *
 * `asap` scheduler will do its best to minimize time between end of currently executing code
 * and start of scheduled task. This makes it best candidate for performing so called "deferring".
 * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves
 * some (although minimal) unwanted delay.
 *
 * Note that using `asap` scheduler does not necessarily mean that your task will be first to process
 * after currently executing code. In particular, if some task was also scheduled with `asap` before,
 * that task will execute first. That being said, if you need to schedule task asynchronously, but
 * as soon as possible, `asap` scheduler is your best bet.
 *
 * @example <caption>Compare async and asap scheduler</caption>
 *
 * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...
 * Rx.Scheduler.asap.schedule(() => console.log('asap'));
 *
 * // Logs:
 * // "asap"
 * // "async"
 * // ... but 'asap' goes first!
 *
 * @static true
 * @name asap
 * @owner Scheduler
 */
var asap = /*@__PURE__*/ new __WEBPACK_IMPORTED_MODULE_1__AsapScheduler__["a" /* AsapScheduler */](__WEBPACK_IMPORTED_MODULE_0__AsapAction__["a" /* AsapAction */]);
//# sourceMappingURL=asap.js.map


/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AsapAction; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_Immediate__ = __webpack_require__(171);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AsyncAction__ = __webpack_require__(30);
/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */



/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsapAction = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If a microtask has already been scheduled, don't schedule another
        // one. If a microtask hasn't been scheduled yet, schedule one now. Return
        // the current scheduled microtask id.
        return scheduler.scheduled || (scheduler.scheduled = __WEBPACK_IMPORTED_MODULE_1__util_Immediate__["a" /* Immediate */].setImmediate(scheduler.flush.bind(scheduler, null)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested microtask and
        // set the scheduled flag to undefined so the next AsapAction will schedule
        // its own.
        if (scheduler.actions.length === 0) {
            __WEBPACK_IMPORTED_MODULE_1__util_Immediate__["a" /* Immediate */].clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AsapAction;
}(__WEBPACK_IMPORTED_MODULE_2__AsyncAction__["a" /* AsyncAction */]));

//# sourceMappingURL=AsapAction.js.map


/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Immediate; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var nextHandle = 1;
var tasksByHandle = {};
function runIfPresent(handle) {
    var cb = tasksByHandle[handle];
    if (cb) {
        cb();
    }
}
var Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        tasksByHandle[handle] = cb;
        Promise.resolve().then(function () { return runIfPresent(handle); });
        return handle;
    },
    clearImmediate: function (handle) {
        delete tasksByHandle[handle];
    },
};
//# sourceMappingURL=Immediate.js.map


/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AsapScheduler; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__ = __webpack_require__(31);
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var AsapScheduler = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(__WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__["a" /* AsyncScheduler */]));

//# sourceMappingURL=AsapScheduler.js.map


/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return animationFrame; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AnimationFrameAction__ = __webpack_require__(174);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AnimationFrameScheduler__ = __webpack_require__(175);
/** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */


/**
 *
 * Animation Frame Scheduler
 *
 * <span class="informal">Perform task when `window.requestAnimationFrame` would fire</span>
 *
 * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler
 * behaviour.
 *
 * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.
 * It makes sure scheduled task will happen just before next browser content repaint,
 * thus performing animations as efficiently as possible.
 *
 * @example <caption>Schedule div height animation</caption>
 * const div = document.querySelector('.some-div');
 *
 * Rx.Scheduler.animationFrame.schedule(function(height) {
 *   div.style.height = height + "px";
 *
 *   this.schedule(height + 1);  // `this` references currently executing Action,
 *                               // which we reschedule with new state
 * }, 0, 0);
 *
 * // You will see .some-div element growing in height
 *
 *
 * @static true
 * @name animationFrame
 * @owner Scheduler
 */
var animationFrame = /*@__PURE__*/ new __WEBPACK_IMPORTED_MODULE_1__AnimationFrameScheduler__["a" /* AnimationFrameScheduler */](__WEBPACK_IMPORTED_MODULE_0__AnimationFrameAction__["a" /* AnimationFrameAction */]);
//# sourceMappingURL=animationFrame.js.map


/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AnimationFrameAction; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncAction__ = __webpack_require__(30);
/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AnimationFrameAction = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If an animation frame has already been requested, don't request another
        // one. If an animation frame hasn't been requested yet, request one. Return
        // the current animation frame request id.
        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
    };
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested animation frame and
        // set the scheduled flag to undefined so the next AnimationFrameAction will
        // request its own.
        if (scheduler.actions.length === 0) {
            cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AnimationFrameAction;
}(__WEBPACK_IMPORTED_MODULE_1__AsyncAction__["a" /* AsyncAction */]));

//# sourceMappingURL=AnimationFrameAction.js.map


/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AnimationFrameScheduler; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__ = __webpack_require__(31);
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AnimationFrameScheduler, _super);
    function AnimationFrameScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationFrameScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AnimationFrameScheduler;
}(__WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__["a" /* AsyncScheduler */]));

//# sourceMappingURL=AnimationFrameScheduler.js.map


/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return VirtualTimeScheduler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VirtualAction; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncAction__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AsyncScheduler__ = __webpack_require__(31);
/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */



var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](VirtualTimeScheduler, _super);
    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
        if (SchedulerAction === void 0) {
            SchedulerAction = VirtualAction;
        }
        if (maxFrames === void 0) {
            maxFrames = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
    }
    /**
     * Prompt the Scheduler to execute all of its queued actions, therefore
     * clearing its queue.
     * @return {void}
     */
    VirtualTimeScheduler.prototype.flush = function () {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error, action;
        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        }
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    VirtualTimeScheduler.frameTimeFactor = 10;
    return VirtualTimeScheduler;
}(__WEBPACK_IMPORTED_MODULE_2__AsyncScheduler__["a" /* AsyncScheduler */]));

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var VirtualAction = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](VirtualAction, _super);
    function VirtualAction(scheduler, work, index) {
        if (index === void 0) {
            index = scheduler.index += 1;
        }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
    }
    VirtualAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.active = false;
        // If an action is rescheduled, we save allocations by mutating its state,
        // pushing it to the end of the scheduler queue, and recycling the action.
        // But since the VirtualTimeScheduler is used for testing, VirtualActions
        // must be immutable so they can be inspected later.
        var action = new VirtualAction(this.scheduler, this.work);
        this.add(action);
        return action.schedule(state, delay);
    };
    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return true;
    };
    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return undefined;
    };
    VirtualAction.prototype._execute = function (state, delay) {
        if (this.active === true) {
            return _super.prototype._execute.call(this, state, delay);
        }
    };
    VirtualAction.sortActions = function (a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    };
    return VirtualAction;
}(__WEBPACK_IMPORTED_MODULE_1__AsyncAction__["a" /* AsyncAction */]));

//# sourceMappingURL=VirtualTimeScheduler.js.map


/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isObservable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

/**
 * Tests to see if the object is an RxJS {@link Observable}
 * @param obj the object to test
 */
function isObservable(obj) {
    return obj && obj instanceof __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */] || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function');
}
//# sourceMappingURL=isObservable.js.map


/***/ }),
/* 178 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ArgumentOutOfRangeError; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */

/**
 * An error thrown when an element was queried at a certain index of an
 * Observable, but no such index or position exists in that sequence.
 *
 * @see {@link elementAt}
 * @see {@link take}
 * @see {@link takeLast}
 *
 * @class ArgumentOutOfRangeError
 */
var ArgumentOutOfRangeError = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ArgumentOutOfRangeError, _super);
    function ArgumentOutOfRangeError() {
        var _this = _super.call(this, 'argument out of range') || this;
        _this.name = 'ArgumentOutOfRangeError';
        Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);
        return _this;
    }
    return ArgumentOutOfRangeError;
}(Error));

//# sourceMappingURL=ArgumentOutOfRangeError.js.map


/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EmptyError; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */

/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
var EmptyError = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](EmptyError, _super);
    function EmptyError() {
        var _this = _super.call(this, 'no elements in sequence') || this;
        _this.name = 'EmptyError';
        Object.setPrototypeOf(_this, EmptyError.prototype);
        return _this;
    }
    return EmptyError;
}(Error));

//# sourceMappingURL=EmptyError.js.map


/***/ }),
/* 180 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TimeoutError; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */

/**
 * An error thrown when duetime elapses.
 *
 * @see {@link timeout}
 *
 * @class TimeoutError
 */
var TimeoutError = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](TimeoutError, _super);
    function TimeoutError() {
        var _this = _super.call(this, 'Timeout has occurred') || this;
        Object.setPrototypeOf(_this, TimeoutError.prototype);
        return _this;
    }
    return TimeoutError;
}(Error));

//# sourceMappingURL=TimeoutError.js.map


/***/ }),
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bindCallback;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncSubject__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__operators_map__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_isArray__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_isScheduler__ = __webpack_require__(15);
/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_isArray,_util_isScheduler PURE_IMPORTS_END */





// tslint:enable:max-line-length
/**
 * Converts a callback API to a function that returns an Observable.
 *
 * <span class="informal">Give it a function `f` of type `f(x, callback)` and
 * it will return a function `g` that when called as `g(x)` will output an
 * Observable.</span>
 *
 * `bindCallback` is not an operator because its input and output are not
 * Observables. The input is a function `func` with some parameters, the
 * last parameter must be a callback function that `func` calls when it is
 * done.
 *
 * The output of `bindCallback` is a function that takes the same parameters
 * as `func`, except the last one (the callback). When the output function
 * is called with arguments it will return an Observable. If function `func`
 * calls its callback with one argument the Observable will emit that value.
 * If on the other hand the callback is called with multiple values the resulting
 * Observable will emit an array with said values as arguments.
 *
 * It is very important to remember that input function `func` is not called
 * when the output function is, but rather when the Observable returned by the output
 * function is subscribed. This means if `func` makes an AJAX request, that request
 * will be made every time someone subscribes to the resulting Observable, but not before.
 *
 * The last optional parameter - {@link Scheduler} - can be used to control when the call
 * to `func` happens after someone subscribes to Observable, as well as when results
 * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`
 * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,
 * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler
 * and call `subscribe` on the output Observable all function calls that are currently executing
 * will end before `func` is invoked.
 *
 * By default results passed to the callback are emitted immediately after `func` invokes the callback.
 * In particular, if the callback is called synchronously the subscription of the resulting Observable
 * will call the `next` function synchronously as well.  If you want to defer that call,
 * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can
 * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.
 *
 * Note that the Observable created by the output function will always emit a single value
 * and then complete immediately. If `func` calls the callback multiple times, values from subsequent
 * calls will not appear in the stream. If you need to listen for multiple calls,
 *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.
 *
 * If `func` depends on some context (`this` property) and is not already bound the context of `func`
 * will be the context that the output function has at call time. In particular, if `func`
 * is called as a method of some objec and if `func` is not already bound, in order to preserve the context
 * it is recommended that the context of the output function is set to that object as well.
 *
 * If the input function calls its callback in the "node style" (i.e. first argument to callback is
 * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}
 * provides convenient error handling and probably is a better choice.
 * `bindCallback` will treat such functions the same as any other and error parameters
 * (whether passed or not) will always be interpreted as regular callback argument.
 *
 *
 * @example <caption>Convert jQuery's getJSON to an Observable API</caption>
 * // Suppose we have jQuery.getJSON('/my/url', callback)
 * var getJSONAsObservable = bindCallback(jQuery.getJSON);
 * var result = getJSONAsObservable('/my/url');
 * result.subscribe(x => console.log(x), e => console.error(e));
 *
 *
 * @example <caption>Receive an array of arguments passed to a callback</caption>
 * someFunction((a, b, c) => {
 *   console.log(a); // 5
 *   console.log(b); // 'some string'
 *   console.log(c); // {someProperty: 'someValue'}
 * });
 *
 * const boundSomeFunction = bindCallback(someFunction);
 * boundSomeFunction().subscribe(values => {
 *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]
 * });
 *
 *
 * @example <caption>Compare behaviour with and without async Scheduler</caption>
 * function iCallMyCallbackSynchronously(cb) {
 *   cb();
 * }
 *
 * const boundSyncFn = bindCallback(iCallMyCallbackSynchronously);
 * const boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);
 *
 * boundSyncFn().subscribe(() => console.log('I was sync!'));
 * boundAsyncFn().subscribe(() => console.log('I was async!'));
 * console.log('This happened...');
 *
 * // Logs:
 * // I was sync!
 * // This happened...
 * // I was async!
 *
 *
 * @example <caption>Use bindCallback on an object method</caption>
 * const boundMethod = bindCallback(someObject.methodWithCallback);
 * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject
 * .subscribe(subscriber);
 *
 *
 * @see {@link bindNodeCallback}
 * @see {@link from}
 * @see {@link fromPromise}
 *
 * @param {function} func A function with a callback as the last parameter.
 * @param {Scheduler} [scheduler] The scheduler on which to schedule the
 * callbacks.
 * @return {function(...params: *): Observable} A function which returns the
 * Observable that delivers the same values the callback would deliver.
 * @name bindCallback
 */
function bindCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (Object(__WEBPACK_IMPORTED_MODULE_4__util_isScheduler__["a" /* isScheduler */])(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            // DEPRECATED PATH
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(Object(__WEBPACK_IMPORTED_MODULE_2__operators_map__["a" /* map */])(function (args) { return Object(__WEBPACK_IMPORTED_MODULE_3__util_isArray__["a" /* isArray */])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var context = this;
        var subject;
        var params = {
            context: context,
            subject: subject,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
        };
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            if (!scheduler) {
                if (!subject) {
                    subject = new __WEBPACK_IMPORTED_MODULE_1__AsyncSubject__["a" /* AsyncSubject */]();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        subject.error(err);
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                var state = {
                    args: args, subscriber: subscriber, params: params,
                };
                return scheduler.schedule(dispatch, 0, state);
            }
        });
    };
}
function dispatch(state) {
    var _this = this;
    var self = this;
    var args = state.args, subscriber = state.subscriber, params = state.params;
    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new __WEBPACK_IMPORTED_MODULE_1__AsyncSubject__["a" /* AsyncSubject */]();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
            _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            subject.error(err);
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(state) {
    var value = state.value, subject = state.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(state) {
    var err = state.err, subject = state.subject;
    subject.error(err);
}
//# sourceMappingURL=bindCallback.js.map


/***/ }),
/* 182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bindNodeCallback;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncSubject__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__operators_map__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_isScheduler__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_isArray__ = __webpack_require__(9);
/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_isScheduler,_util_isArray PURE_IMPORTS_END */





/**
 * Converts a Node.js-style callback API to a function that returns an
 * Observable.
 *
 * <span class="informal">It's just like {@link bindCallback}, but the
 * callback is expected to be of type `callback(error, result)`.</span>
 *
 * `bindNodeCallback` is not an operator because its input and output are not
 * Observables. The input is a function `func` with some parameters, but the
 * last parameter must be a callback function that `func` calls when it is
 * done. The callback function is expected to follow Node.js conventions,
 * where the first argument to the callback is an error object, signaling
 * whether call was successful. If that object is passed to callback, it means
 * something went wrong.
 *
 * The output of `bindNodeCallback` is a function that takes the same
 * parameters as `func`, except the last one (the callback). When the output
 * function is called with arguments, it will return an Observable.
 * If `func` calls its callback with error parameter present, Observable will
 * error with that value as well. If error parameter is not passed, Observable will emit
 * second parameter. If there are more parameters (third and so on),
 * Observable will emit an array with all arguments, except first error argument.
 *
 * Note that `func` will not be called at the same time output function is,
 * but rather whenever resulting Observable is subscribed. By default call to
 * `func` will happen synchronously after subscription, but that can be changed
 * with proper {@link Scheduler} provided as optional third parameter. Scheduler
 * can also control when values from callback will be emitted by Observable.
 * To find out more, check out documentation for {@link bindCallback}, where
 * Scheduler works exactly the same.
 *
 * As in {@link bindCallback}, context (`this` property) of input function will be set to context
 * of returned function, when it is called.
 *
 * After Observable emits value, it will complete immediately. This means
 * even if `func` calls callback again, values from second and consecutive
 * calls will never appear on the stream. If you need to handle functions
 * that call callbacks multiple times, check out {@link fromEvent} or
 * {@link fromEventPattern} instead.
 *
 * Note that `bindNodeCallback` can be used in non-Node.js environments as well.
 * "Node.js-style" callbacks are just a convention, so if you write for
 * browsers or any other environment and API you use implements that callback style,
 * `bindNodeCallback` can be safely used on that API functions as well.
 *
 * Remember that Error object passed to callback does not have to be an instance
 * of JavaScript built-in `Error` object. In fact, it does not even have to an object.
 * Error parameter of callback function is interpreted as "present", when value
 * of that parameter is truthy. It could be, for example, non-zero number, non-empty
 * string or boolean `true`. In all of these cases resulting Observable would error
 * with that value. This means usually regular style callbacks will fail very often when
 * `bindNodeCallback` is used. If your Observable errors much more often then you
 * would expect, check if callback really is called in Node.js-style and, if not,
 * switch to {@link bindCallback} instead.
 *
 * Note that even if error parameter is technically present in callback, but its value
 * is falsy, it still won't appear in array emitted by Observable.
 *
 *
 * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>
 * import * as fs from 'fs';
 * var readFileAsObservable = bindNodeCallback(fs.readFile);
 * var result = readFileAsObservable('./roadNames.txt', 'utf8');
 * result.subscribe(x => console.log(x), e => console.error(e));
 *
 *
 * @example <caption>Use on function calling callback with multiple arguments</caption>
 * someFunction((err, a, b) => {
 *   console.log(err); // null
 *   console.log(a); // 5
 *   console.log(b); // "some string"
 * });
 * var boundSomeFunction = bindNodeCallback(someFunction);
 * boundSomeFunction()
 * .subscribe(value => {
 *   console.log(value); // [5, "some string"]
 * });
 *
 * @example <caption>Use on function calling callback in regular style</caption>
 * someFunction(a => {
 *   console.log(a); // 5
 * });
 * var boundSomeFunction = bindNodeCallback(someFunction);
 * boundSomeFunction()
 * .subscribe(
 *   value => {}             // never gets called
 *   err => console.log(err) // 5
 * );
 *
 *
 * @see {@link bindCallback}
 * @see {@link from}
 * @see {@link fromPromise}
 *
 * @param {function} func Function with a Node.js-style callback as the last parameter.
 * @param {Scheduler} [scheduler] The scheduler on which to schedule the
 * callbacks.
 * @return {function(...params: *): Observable} A function which returns the
 * Observable that delivers the same values the Node.js callback would
 * deliver.
 * @name bindNodeCallback
 */
function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (Object(__WEBPACK_IMPORTED_MODULE_3__util_isScheduler__["a" /* isScheduler */])(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            // DEPRECATED PATH
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(Object(__WEBPACK_IMPORTED_MODULE_2__operators_map__["a" /* map */])(function (args) { return Object(__WEBPACK_IMPORTED_MODULE_4__util_isArray__["a" /* isArray */])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var params = {
            subject: undefined,
            args: args,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
            context: this,
        };
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var context = params.context;
            var subject = params.subject;
            if (!scheduler) {
                if (!subject) {
                    subject = params.subject = new __WEBPACK_IMPORTED_MODULE_1__AsyncSubject__["a" /* AsyncSubject */]();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        var err = innerArgs.shift();
                        if (err) {
                            subject.error(err);
                            return;
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        subject.error(err);
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                return scheduler.schedule(dispatch, 0, { params: params, subscriber: subscriber, context: context });
            }
        });
    };
}
function dispatch(state) {
    var _this = this;
    var params = state.params, subscriber = state.subscriber, context = state.context;
    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new __WEBPACK_IMPORTED_MODULE_1__AsyncSubject__["a" /* AsyncSubject */]();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var err = innerArgs.shift();
            if (err) {
                _this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
            }
            else {
                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
            }
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
    var value = arg.value, subject = arg.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(arg) {
    var err = arg.err, subject = arg.subject;
    subject.error(err);
}
//# sourceMappingURL=bindNodeCallback.js.map


/***/ }),
/* 183 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = combineLatest;
/* unused harmony export CombineLatestOperator */
/* unused harmony export CombineLatestSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isScheduler__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isArray__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__fromArray__ = __webpack_require__(21);
/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */






var NONE = {};
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are
 * calculated from the latest values of each of its input Observables.
 *
 * <span class="informal">Whenever any input Observable emits a value, it
 * computes a formula using the latest values from all the inputs, then emits
 * the output of that formula.</span>
 *
 * <img src="./img/combineLatest.png" width="100%">
 *
 * `combineLatest` combines the values from all the Observables passed as
 * arguments. This is done by subscribing to each Observable in order and,
 * whenever any Observable emits, collecting an array of the most recent
 * values from each Observable. So if you pass `n` Observables to operator,
 * returned Observable will always emit an array of `n` values, in order
 * corresponding to order of passed Observables (value from the first Observable
 * on the first place and so on).
 *
 * Static version of `combineLatest` accepts either an array of Observables
 * or each Observable can be put directly as an argument. Note that array of
 * Observables is good choice, if you don't know beforehand how many Observables
 * you will combine. Passing empty array will result in Observable that
 * completes immediately.
 *
 * To ensure output array has always the same length, `combineLatest` will
 * actually wait for all input Observables to emit at least once,
 * before it starts emitting results. This means if some Observable emits
 * values before other Observables started emitting, all that values but last
 * will be lost. On the other hand, is some Observable does not emit value but
 * completes, resulting Observable will complete at the same moment without
 * emitting anything, since it will be now impossible to include value from
 * completed Observable in resulting array. Also, if some input Observable does
 * not emit any value and never completes, `combineLatest` will also never emit
 * and never complete, since, again, it will wait for all streams to emit some
 * value.
 *
 * If at least one Observable was passed to `combineLatest` and all passed Observables
 * emitted something, resulting Observable will complete when all combined
 * streams complete. So even if some Observable completes, result of
 * `combineLatest` will still emit values when other Observables do. In case
 * of completed Observable, its value from now on will always be the last
 * emitted value. On the other hand, if any Observable errors, `combineLatest`
 * will error immediately as well, and all other Observables will be unsubscribed.
 *
 * `combineLatest` accepts as optional parameter `project` function, which takes
 * as arguments all values that would normally be emitted by resulting Observable.
 * `project` can return any kind of value, which will be then emitted by Observable
 * instead of default array. Note that `project` does not take as argument that array
 * of values, but values themselves. That means default `project` can be imagined
 * as function that takes all its arguments and puts them into an array.
 *
 *
 * @example <caption>Combine two timer Observables</caption>
 * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now
 * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now
 * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);
 * combinedTimers.subscribe(value => console.log(value));
 * // Logs
 * // [0, 0] after 0.5s
 * // [1, 0] after 1s
 * // [1, 1] after 1.5s
 * // [2, 1] after 2s
 *
 *
 * @example <caption>Combine an array of Observables</caption>
 * const observables = [1, 5, 10].map(
 *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds
 * );
 * const combined = Rx.Observable.combineLatest(observables);
 * combined.subscribe(value => console.log(value));
 * // Logs
 * // [0, 0, 0] immediately
 * // [1, 0, 0] after 1s
 * // [1, 5, 0] after 5s
 * // [1, 5, 10] after 10s
 *
 *
 * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>
 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
 * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));
 * bmi.subscribe(x => console.log('BMI is ' + x));
 *
 * // With output to console:
 * // BMI is 24.212293388429753
 * // BMI is 23.93948099205209
 * // BMI is 23.671253629592222
 *
 *
 * @see {@link combineAll}
 * @see {@link merge}
 * @see {@link withLatestFrom}
 *
 * @param {ObservableInput} observable1 An input Observable to combine with other Observables.
 * @param {ObservableInput} observable2 An input Observable to combine with other Observables.
 * More than one input Observables may be given as arguments
 * or an array of Observables may be given as the first argument.
 * @param {function} [project] An optional function to project the values from
 * the combined latest values into a new value on the output Observable.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each input Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 */
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = null;
    var scheduler = null;
    if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isScheduler__["a" /* isScheduler */])(observables[observables.length - 1])) {
        scheduler = observables.pop();
    }
    if (typeof observables[observables.length - 1] === 'function') {
        resultSelector = observables.pop();
    }
    // if the first and only other argument besides the resultSelector is an array
    // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`
    if (observables.length === 1 && Object(__WEBPACK_IMPORTED_MODULE_2__util_isArray__["a" /* isArray */])(observables[0])) {
        observables = observables[0];
    }
    return Object(__WEBPACK_IMPORTED_MODULE_5__fromArray__["a" /* fromArray */])(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
}
var CombineLatestOperator = /*@__PURE__*/ (function () {
    function CombineLatestOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    CombineLatestOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
    };
    return CombineLatestOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, resultSelector) {
        var _this = _super.call(this, destination) || this;
        _this.resultSelector = resultSelector;
        _this.active = 0;
        _this.values = [];
        _this.observables = [];
        return _this;
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(NONE);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(Object(__WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__["a" /* subscribeToResult */])(this, observable, observable, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === NONE ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.resultSelector) {
                this._tryResultSelector(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
        var result;
        try {
            result = this.resultSelector.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__["a" /* OuterSubscriber */]));

//# sourceMappingURL=combineLatest.js.map


/***/ }),
/* 184 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InnerSubscriber; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(8);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.outerValue = outerValue;
        _this.outerIndex = outerIndex;
        _this.index = 0;
        return _this;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));

//# sourceMappingURL=InnerSubscriber.js.map


/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = concat;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_isScheduler__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__of__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__from__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__operators_concatAll__ = __webpack_require__(191);
/** PURE_IMPORTS_START _util_isScheduler,_of,_from,_operators_concatAll PURE_IMPORTS_END */




/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from given
 * Observable and then moves on to the next.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * `concat` joins multiple Observables together, by subscribing to them one at a time and
 * merging their results into the output Observable. You can pass either an array of
 * Observables, or put them directly as arguments. Passing an empty array will result
 * in Observable that completes immediately.
 *
 * `concat` will subscribe to first input Observable and emit all its values, without
 * changing or affecting them in any way. When that Observable completes, it will
 * subscribe to then next Observable passed and, again, emit its values. This will be
 * repeated, until the operator runs out of Observables. When last input Observable completes,
 * `concat` will complete as well. At any given moment only one Observable passed to operator
 * emits values. If you would like to emit values from passed Observables concurrently, check out
 * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,
 * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.
 *
 * Note that if some input Observable never completes, `concat` will also never complete
 * and Observables following the one that did not complete will never be subscribed. On the other
 * hand, if some Observable simply completes immediately after it is subscribed, it will be
 * invisible for `concat`, which will just move on to the next Observable.
 *
 * If any Observable in chain errors, instead of passing control to the next Observable,
 * `concat` will error immediately as well. Observables that would be subscribed after
 * the one that emitted error, never will.
 *
 * If you pass to `concat` the same Observable many times, its stream of values
 * will be "replayed" on every subscription, which means you can repeat given Observable
 * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,
 * you can always use {@link repeat}.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = Rx.Observable.concat(timer, sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 *
 * @example <caption>Concatenate an array of 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 *
 * @example <caption>Concatenate the same Observable to repeat it</caption>
 * const timer = Rx.Observable.interval(1000).take(2);
 *
 * Rx.Observable.concat(timer, timer) // concating the same Observable!
 * .subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('...and it is done!')
 * );
 *
 * // Logs:
 * // 0 after 1s
 * // 1 after 2s
 * // 0 after 3s
 * // 1 after 4s
 * // "...and it is done!" also after 4s
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {ObservableInput} input1 An input Observable to concatenate with others.
 * @param {ObservableInput} input2 An input Observable to concatenate with others.
 * More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @static true
 * @name concat
 * @owner Observable
 */
function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    if (observables.length === 1 || (observables.length === 2 && Object(__WEBPACK_IMPORTED_MODULE_0__util_isScheduler__["a" /* isScheduler */])(observables[1]))) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__from__["a" /* from */])(observables[0]);
    }
    return Object(__WEBPACK_IMPORTED_MODULE_3__operators_concatAll__["a" /* concatAll */])()(__WEBPACK_IMPORTED_MODULE_1__of__["a" /* of */].apply(void 0, observables));
}
//# sourceMappingURL=concat.js.map


/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isInteropObservable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__symbol_observable__ = __webpack_require__(19);
/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

/** Identifies an input as being Observable (but not necessary an Rx Observable) */
function isInteropObservable(input) {
    return input && typeof input[__WEBPACK_IMPORTED_MODULE_0__symbol_observable__["a" /* observable */]] === 'function';
}
//# sourceMappingURL=isInteropObservable.js.map


/***/ }),
/* 187 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isIterable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__symbol_iterator__ = __webpack_require__(34);
/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

/** Identifies an input as being an Iterable */
function isIterable(input) {
    return input && typeof input[__WEBPACK_IMPORTED_MODULE_0__symbol_iterator__["a" /* iterator */]] === 'function';
}
//# sourceMappingURL=isIterable.js.map


/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromPromise;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToPromise__ = __webpack_require__(94);
/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */



function fromPromise(input, scheduler) {
    if (!scheduler) {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToPromise__["a" /* subscribeToPromise */])(input));
    }
    else {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var sub = new __WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]();
            sub.add(scheduler.schedule(function () {
                return input.then(function (value) {
                    sub.add(scheduler.schedule(function () {
                        subscriber.next(value);
                        sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                    }));
                }, function (err) {
                    sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
                });
            }));
            return sub;
        });
    }
}
//# sourceMappingURL=fromPromise.js.map


/***/ }),
/* 189 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromIterable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__symbol_iterator__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_subscribeToIterable__ = __webpack_require__(95);
/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */




function fromIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    if (!scheduler) {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](Object(__WEBPACK_IMPORTED_MODULE_3__util_subscribeToIterable__["a" /* subscribeToIterable */])(input));
    }
    else {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var sub = new __WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]();
            var iterator;
            sub.add(function () {
                // Finalize generators
                if (iterator && typeof iterator.return === 'function') {
                    iterator.return();
                }
            });
            sub.add(scheduler.schedule(function () {
                iterator = input[__WEBPACK_IMPORTED_MODULE_2__symbol_iterator__["a" /* iterator */]]();
                sub.add(scheduler.schedule(function () {
                    if (subscriber.closed) {
                        return;
                    }
                    var value;
                    var done;
                    try {
                        var result = iterator.next();
                        value = result.value;
                        done = result.done;
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                        this.schedule();
                    }
                }));
            }));
            return sub;
        });
    }
}
//# sourceMappingURL=fromIterable.js.map


/***/ }),
/* 190 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromObservable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__symbol_observable__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_subscribeToObservable__ = __webpack_require__(96);
/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable,_util_subscribeToObservable PURE_IMPORTS_END */




function fromObservable(input, scheduler) {
    if (!scheduler) {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](Object(__WEBPACK_IMPORTED_MODULE_3__util_subscribeToObservable__["a" /* subscribeToObservable */])(input));
    }
    else {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var sub = new __WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]();
            sub.add(scheduler.schedule(function () {
                var observable = input[__WEBPACK_IMPORTED_MODULE_2__symbol_observable__["a" /* observable */]]();
                sub.add(observable.subscribe({
                    next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                    error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                    complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
                }));
            }));
            return sub;
        });
    }
}
//# sourceMappingURL=fromObservable.js.map


/***/ }),
/* 191 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = concatAll;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mergeAll__ = __webpack_require__(99);
/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */

/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll() {
    return Object(__WEBPACK_IMPORTED_MODULE_0__mergeAll__["a" /* mergeAll */])(1);
}
//# sourceMappingURL=concatAll.js.map


/***/ }),
/* 192 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = mergeMap;
/* unused harmony export MergeMapOperator */
/* unused harmony export MergeMapSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_subscribeToResult__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__OuterSubscriber__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__map__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__observable_from__ = __webpack_require__(23);
/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_map,_observable_from PURE_IMPORTS_END */





/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'function') {
        // DEPRECATED PATH
        return function (source) { return source.pipe(mergeMap(function (a, i) { return Object(__WEBPACK_IMPORTED_MODULE_4__observable_from__["a" /* from */])(project(a, i)).pipe(Object(__WEBPACK_IMPORTED_MODULE_3__map__["a" /* map */])(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
}
var MergeMapOperator = /*@__PURE__*/ (function () {
    function MergeMapOperator(project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        this.project = project;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    };
    return MergeMapOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(Object(__WEBPACK_IMPORTED_MODULE_1__util_subscribeToResult__["a" /* subscribeToResult */])(this, ish, value, index));
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(__WEBPACK_IMPORTED_MODULE_2__OuterSubscriber__["a" /* OuterSubscriber */]));

//# sourceMappingURL=mergeMap.js.map


/***/ }),
/* 193 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = forkJoin;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isArray__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__empty__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__OuterSubscriber__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__operators_map__ = __webpack_require__(22);
/** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */







/* tslint:enable:max-line-length */
/**
 * Joins last values emitted by passed Observables.
 *
 * <span class="informal">Wait for Observables to complete and then combine last values they emitted.</span>
 *
 * <img src="./img/forkJoin.png" width="100%">
 *
 * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array
 * or directly as arguments. If no input Observables are provided, resulting stream will complete
 * immediately.
 *
 * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last
 * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting
 * array will have `n` values, where first value is the last thing emitted by the first Observable,
 * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will
 * not emit more than once and it will complete after that. If you need to emit combined values not only
 * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}
 * or {@link zip} instead.
 *
 * In order for resulting array to have the same length as the number of input Observables, whenever any of
 * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well
 * and it will not emit anything either, even if it already has some last values from other Observables.
 * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,
 * unless at any point some other Observable completes without emitting value, which brings us back to
 * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments
 * have to emit something at least once and complete.
 *
 * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables
 * will be immediately unsubscribed.
 *
 * Optionally `forkJoin` accepts project function, that will be called with values which normally
 * would land in emitted array. Whatever is returned by project function, will appear in output
 * Observable instead. This means that default project can be thought of as a function that takes
 * all its arguments and puts them into an array. Note that project function will be called only
 * when output Observable is supposed to emit a result.
 *
 * @example <caption>Use forkJoin with operator emitting immediately</caption>
 * import { forkJoin, of } from 'rxjs';
 *
 * const observable = forkJoin(
 *   of(1, 2, 3, 4),
 *   of(5, 6, 7, 8)
 * );
 * observable.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('This is how it ends!')
 * );
 *
 * // Logs:
 * // [4, 8]
 * // "This is how it ends!"
 *
 *
 * @example <caption>Use forkJoin with operator emitting after some time</caption>
 * import { forkJoin, interval } from 'rxjs';
 * import { take } from 'rxjs/operators';
 *
 * const observable = forkJoin(
 *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete
 *   interval(500).pipe(take(4)) // emit 0, 1, 2, 3 every half a second and complete
 * );
 * observable.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('This is how it ends!')
 * );
 *
 * // Logs:
 * // [2, 3] after 3 seconds
 * // "This is how it ends!" immediately after
 *
 *
 * @example <caption>Use forkJoin with project function</caption>
 * import { jorkJoin, interval } from 'rxjs';
 * import { take } from 'rxjs/operators';
 *
 * const observable = forkJoin(
 *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete
 *   interval(500).pipe(take(4)), // emit 0, 1, 2, 3 every half a second and complete
 *   (n, m) => n + m
 * );
 * observable.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('This is how it ends!')
 * );
 *
 * // Logs:
 * // 5 after 3 seconds
 * // "This is how it ends!" immediately after
 *
 * @see {@link combineLatest}
 * @see {@link zip}
 *
 * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments
 * passed directly to the operator.
 * @param {function} [project] Function that takes values emitted by input Observables and returns value
 * that will appear in resulting Observable instead of default array.
 * @return {Observable} Observable emitting either an array of last values emitted by passed Observables
 * or value from project function.
 */
function forkJoin() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    var resultSelector;
    if (typeof sources[sources.length - 1] === 'function') {
        // DEPRECATED PATH
        resultSelector = sources.pop();
    }
    // if the first and only other argument is an array
    // assume it's been called with `forkJoin([obs1, obs2, obs3])`
    if (sources.length === 1 && Object(__WEBPACK_IMPORTED_MODULE_2__util_isArray__["a" /* isArray */])(sources[0])) {
        sources = sources[0];
    }
    if (sources.length === 0) {
        return __WEBPACK_IMPORTED_MODULE_3__empty__["a" /* EMPTY */];
    }
    if (resultSelector) {
        // DEPRECATED PATH
        return forkJoin(sources).pipe(Object(__WEBPACK_IMPORTED_MODULE_6__operators_map__["a" /* map */])(function (args) { return resultSelector.apply(void 0, args); }));
    }
    return new __WEBPACK_IMPORTED_MODULE_1__Observable__["a" /* Observable */](function (subscriber) {
        return new ForkJoinSubscriber(subscriber, sources);
    });
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ForkJoinSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources) {
        var _this = _super.call(this, destination) || this;
        _this.sources = sources;
        _this.completed = 0;
        _this.haveValues = 0;
        var len = sources.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            var source = sources[i];
            var innerSubscription = Object(__WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__["a" /* subscribeToResult */])(_this, source, null, i);
            if (innerSubscription) {
                _this.add(innerSubscription);
            }
        }
        return _this;
    }
    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        if (!innerSub._hasValue) {
            innerSub._hasValue = true;
            this.haveValues++;
        }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;
        var len = values.length;
        if (!innerSub._hasValue) {
            destination.complete();
            return;
        }
        this.completed++;
        if (this.completed !== len) {
            return;
        }
        if (haveValues === len) {
            destination.next(values);
        }
        destination.complete();
    };
    return ForkJoinSubscriber;
}(__WEBPACK_IMPORTED_MODULE_5__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=forkJoin.js.map


/***/ }),
/* 194 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromEvent;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isArray__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isFunction__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__operators_map__ = __webpack_require__(22);
/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */




var toString = Object.prototype.toString;
/* tslint:enable:max-line-length */
/**
 * Creates an Observable that emits events of a specific type coming from the
 * given event target.
 *
 * <span class="informal">Creates an Observable from DOM events, or Node.js
 * EventEmitter events or others.</span>
 *
 * <img src="./img/fromEvent.png" width="100%">
 *
 * `fromEvent` accepts as a first argument event target, which is an object with methods
 * for registering event handler functions. As a second argument it takes string that indicates
 * type of event we want to listen for. `fromEvent` supports selected types of event targets,
 * which are described in detail below. If your event target does not match any of the ones listed,
 * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.
 * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event
 * handler functions have different names, but they all accept a string describing event type
 * and function itself, which will be called whenever said event happens.
 *
 * Every time resulting Observable is subscribed, event handler function will be registered
 * to event target on given event type. When that event fires, value
 * passed as a first argument to registered function will be emitted by output Observable.
 * When Observable is unsubscribed, function will be unregistered from event target.
 *
 * Note that if event target calls registered function with more than one argument, second
 * and following arguments will not appear in resulting stream. In order to get access to them,
 * you can pass to `fromEvent` optional project function, which will be called with all arguments
 * passed to event handler. Output Observable will then emit value returned by project function,
 * instead of the usual value.
 *
 * Remember that event targets listed below are checked via duck typing. It means that
 * no matter what kind of object you have and no matter what environment you work in,
 * you can safely use `fromEvent` on that object if it exposes described methods (provided
 * of course they behave as was described above). So for example if Node.js library exposes
 * event target which has the same method names as DOM EventTarget, `fromEvent` is still
 * a good choice.
 *
 * If the API you use is more callback then event handler oriented (subscribed
 * callback function fires only once and thus there is no need to manually
 * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}
 * instead.
 *
 * `fromEvent` supports following types of event targets:
 *
 * **DOM EventTarget**
 *
 * This is an object with `addEventListener` and `removeEventListener` methods.
 *
 * In the browser, `addEventListener` accepts - apart from event type string and event
 * handler function arguments - optional third parameter, which is either an object or boolean,
 * both used for additional configuration how and when passed function will be called. When
 * `fromEvent` is used with event target of that type, you can provide this values
 * as third parameter as well.
 *
 * **Node.js EventEmitter**
 *
 * An object with `addListener` and `removeListener` methods.
 *
 * **JQuery-style event target**
 *
 * An object with `on` and `off` methods
 *
 * **DOM NodeList**
 *
 * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.
 *
 * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes
 * it contains and install event handler function in every of them. When returned Observable
 * is unsubscribed, function will be removed from all Nodes.
 *
 * **DOM HtmlCollection**
 *
 * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is
 * installed and removed in each of elements.
 *
 *
 * @example <caption>Emits clicks happening on the DOM document</caption>
 * var clicks = fromEvent(document, 'click');
 * clicks.subscribe(x => console.log(x));
 *
 * // Results in:
 * // MouseEvent object logged to console every time a click
 * // occurs on the document.
 *
 *
 * @example <caption>Use addEventListener with capture option</caption>
 * var clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter
 *                                                                          // which will be passed to addEventListener
 * var clicksInDiv = fromEvent(someDivInDocument, 'click');
 *
 * clicksInDocument.subscribe(() => console.log('document'));
 * clicksInDiv.subscribe(() => console.log('div'));
 *
 * // By default events bubble UP in DOM tree, so normally
 * // when we would click on div in document
 * // "div" would be logged first and then "document".
 * // Since we specified optional `capture` option, document
 * // will catch event when it goes DOWN DOM tree, so console
 * // will log "document" and then "div".
 *
 * @see {@link bindCallback}
 * @see {@link bindNodeCallback}
 * @see {@link fromEventPattern}
 *
 * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js
 * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.
 * @param {string} eventName The event name of interest, being emitted by the
 * `target`.
 * @param {EventListenerOptions} [options] Options to pass through to addEventListener
 * @return {Observable<T>}
 * @name fromEvent
 */
function fromEvent(target, eventName, options, resultSelector) {
    if (Object(__WEBPACK_IMPORTED_MODULE_2__util_isFunction__["a" /* isFunction */])(options)) {
        // DEPRECATED PATH
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        // DEPRECATED PATH
        return fromEvent(target, eventName, options).pipe(Object(__WEBPACK_IMPORTED_MODULE_3__operators_map__["a" /* map */])(function (args) { return Object(__WEBPACK_IMPORTED_MODULE_1__util_isArray__["a" /* isArray */])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        function handler(e) {
            if (arguments.length > 1) {
                subscriber.next(Array.prototype.slice.call(arguments));
            }
            else {
                subscriber.next(e);
            }
        }
        setupSubscription(target, eventName, handler, subscriber, options);
    });
}
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
    var unsubscribe;
    if (isEventTarget(sourceObj)) {
        var source_1 = sourceObj;
        sourceObj.addEventListener(eventName, handler, options);
        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
    }
    else if (isJQueryStyleEventEmitter(sourceObj)) {
        var source_2 = sourceObj;
        sourceObj.on(eventName, handler);
        unsubscribe = function () { return source_2.off(eventName, handler); };
    }
    else if (isNodeStyleEventEmitter(sourceObj)) {
        var source_3 = sourceObj;
        sourceObj.addListener(eventName, handler);
        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
    }
    else if (sourceObj && sourceObj.length) {
        for (var i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        }
    }
    else {
        throw new TypeError('Invalid event target');
    }
    subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isEventTarget(sourceObj) {
    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}
//# sourceMappingURL=fromEvent.js.map


/***/ }),
/* 195 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromEventPattern;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isArray__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isFunction__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__operators_map__ = __webpack_require__(22);
/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */




/* tslint:enable:max-line-length */
/**
 * Creates an Observable from an API based on addHandler/removeHandler
 * functions.
 *
 * <span class="informal">Converts any addHandler/removeHandler API to an
 * Observable.</span>
 *
 * <img src="./img/fromEventPattern.png" width="100%">
 *
 * Creates an Observable by using the `addHandler` and `removeHandler`
 * functions to add and remove the handlers. The `addHandler` is
 * called when the output Observable is subscribed, and `removeHandler` is
 * called when the Subscription is unsubscribed.
 *
 * @example <caption>Emits clicks happening on the DOM document</caption>
 * function addClickHandler(handler) {
 *   document.addEventListener('click', handler);
 * }
 *
 * function removeClickHandler(handler) {
 *   document.removeEventListener('click', handler);
 * }
 *
 * var clicks = fromEventPattern(
 *   addClickHandler,
 *   removeClickHandler
 * );
 * clicks.subscribe(x => console.log(x));
 *
 * @see {@link from}
 * @see {@link fromEvent}
 *
 * @param {function(handler: Function): any} addHandler A function that takes
 * a `handler` function as argument and attaches it somehow to the actual
 * source of events.
 * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that
 * takes a `handler` function as argument and removes it in case it was
 * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,
 * removeHandler function will forward it.
 * @return {Observable<T>}
 * @name fromEventPattern
 */
function fromEventPattern(addHandler, removeHandler, resultSelector) {
    if (resultSelector) {
        // DEPRECATED PATH
        return fromEventPattern(addHandler, removeHandler).pipe(Object(__WEBPACK_IMPORTED_MODULE_3__operators_map__["a" /* map */])(function (args) { return Object(__WEBPACK_IMPORTED_MODULE_1__util_isArray__["a" /* isArray */])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var handler = function () {
            var e = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                e[_i] = arguments[_i];
            }
            return subscriber.next(e.length === 1 ? e[0] : e);
        };
        var retValue;
        try {
            retValue = addHandler(handler);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!Object(__WEBPACK_IMPORTED_MODULE_2__util_isFunction__["a" /* isFunction */])(removeHandler)) {
            return undefined;
        }
        return function () { return removeHandler(handler, retValue); };
    });
}
//# sourceMappingURL=fromEventPattern.js.map


/***/ }),
/* 196 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = generate;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_identity__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isScheduler__ = __webpack_require__(15);
/** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */



function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
    var resultSelector;
    var initialState;
    if (arguments.length == 1) {
        var options = initialStateOrOptions;
        initialState = options.initialState;
        condition = options.condition;
        iterate = options.iterate;
        resultSelector = options.resultSelector || __WEBPACK_IMPORTED_MODULE_1__util_identity__["a" /* identity */];
        scheduler = options.scheduler;
    }
    else if (resultSelectorOrObservable === undefined || Object(__WEBPACK_IMPORTED_MODULE_2__util_isScheduler__["a" /* isScheduler */])(resultSelectorOrObservable)) {
        initialState = initialStateOrOptions;
        resultSelector = __WEBPACK_IMPORTED_MODULE_1__util_identity__["a" /* identity */];
        scheduler = resultSelectorOrObservable;
    }
    else {
        initialState = initialStateOrOptions;
        resultSelector = resultSelectorOrObservable;
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var state = initialState;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                subscriber: subscriber,
                iterate: iterate,
                condition: condition,
                resultSelector: resultSelector,
                state: state
            });
        }
        do {
            if (condition) {
                var conditionResult = void 0;
                try {
                    conditionResult = condition(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
                if (!conditionResult) {
                    subscriber.complete();
                    break;
                }
            }
            var value = void 0;
            try {
                value = resultSelector(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                break;
            }
            try {
                state = iterate(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
        } while (true);
        return undefined;
    });
}
function dispatch(state) {
    var subscriber = state.subscriber, condition = state.condition;
    if (subscriber.closed) {
        return undefined;
    }
    if (state.needIterate) {
        try {
            state.state = state.iterate(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
    }
    else {
        state.needIterate = true;
    }
    if (condition) {
        var conditionResult = void 0;
        try {
            conditionResult = condition(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!conditionResult) {
            subscriber.complete();
            return undefined;
        }
        if (subscriber.closed) {
            return undefined;
        }
    }
    var value;
    try {
        value = state.resultSelector(state.state);
    }
    catch (err) {
        subscriber.error(err);
        return undefined;
    }
    if (subscriber.closed) {
        return undefined;
    }
    subscriber.next(value);
    if (subscriber.closed) {
        return undefined;
    }
    return this.schedule(state);
}
//# sourceMappingURL=generate.js.map


/***/ }),
/* 197 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = iif;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__defer__ = __webpack_require__(100);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__empty__ = __webpack_require__(13);
/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */


/**
 * Decides at subscription time which Observable will actually be subscribed.
 *
 * <span class="informal">`If` statement for Observables.</span>
 *
 * `if` accepts a condition function and two Observables. When
 * an Observable returned by the operator is subscribed, condition function will be called.
 * Based on what boolean it returns at that moment, consumer will subscribe either to
 * the first Observable (if condition was true) or to the second (if condition was false). Condition
 * function may also not return anything - in that case condition will be evaluated as false and
 * second Observable will be subscribed.
 *
 * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that
 * was left undefined, resulting stream will simply complete immediately. That allows you to, rather
 * then controlling which Observable will be subscribed, decide at runtime if consumer should have access
 * to given Observable or not.
 *
 * If you have more complex logic that requires decision between more than two Observables, {@link defer}
 * will probably be a better choice. Actually `if` can be easily implemented with {@link defer}
 * and exists only for convenience and readability reasons.
 *
 *
 * @example <caption>Change at runtime which Observable will be subscribed</caption>
 * let subscribeToFirst;
 * const firstOrSecond = Rx.Observable.if(
 *   () => subscribeToFirst,
 *   Rx.Observable.of('first'),
 *   Rx.Observable.of('second')
 * );
 *
 * subscribeToFirst = true;
 * firstOrSecond.subscribe(value => console.log(value));
 *
 * // Logs:
 * // "first"
 *
 * subscribeToFirst = false;
 * firstOrSecond.subscribe(value => console.log(value));
 *
 * // Logs:
 * // "second"
 *
 *
 * @example <caption>Control an access to an Observable</caption>
 * let accessGranted;
 * const observableIfYouHaveAccess = Rx.Observable.if(
 *   () => accessGranted,
 *   Rx.Observable.of('It seems you have an access...') // Note that only one Observable is passed to the operator.
 * );
 *
 * accessGranted = true;
 * observableIfYouHaveAccess.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('The end')
 * );
 *
 * // Logs:
 * // "It seems you have an access..."
 * // "The end"
 *
 * accessGranted = false;
 * observableIfYouHaveAccess.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('The end')
 * );
 *
 * // Logs:
 * // "The end"
 *
 * @see {@link defer}
 *
 * @param {function(): boolean} condition Condition which Observable should be chosen.
 * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.
 * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.
 * @return {Observable} Either first or second Observable, depending on condition.
 * @static true
 * @name iif
 * @owner Observable
 */
function iif(condition, trueResult, falseResult) {
    if (trueResult === void 0) {
        trueResult = __WEBPACK_IMPORTED_MODULE_1__empty__["a" /* EMPTY */];
    }
    if (falseResult === void 0) {
        falseResult = __WEBPACK_IMPORTED_MODULE_1__empty__["a" /* EMPTY */];
    }
    return Object(__WEBPACK_IMPORTED_MODULE_0__defer__["a" /* defer */])(function () { return condition() ? trueResult : falseResult; });
}
//# sourceMappingURL=iif.js.map


/***/ }),
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = interval;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__scheduler_async__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isNumeric__ = __webpack_require__(101);
/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */



/**
 * Creates an Observable that emits sequential numbers every specified
 * interval of time, on a specified IScheduler.
 *
 * <span class="informal">Emits incremental numbers periodically in time.
 * </span>
 *
 * <img src="./img/interval.png" width="100%">
 *
 * `interval` returns an Observable that emits an infinite sequence of
 * ascending integers, with a constant interval of time of your choosing
 * between those emissions. The first emission is not sent immediately, but
 * only after the first period has passed. By default, this operator uses the
 * `async` IScheduler to provide a notion of time, but you may pass any
 * IScheduler to it.
 *
 * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>
 * var numbers = Rx.Observable.interval(1000);
 * numbers.subscribe(x => console.log(x));
 *
 * @see {@link timer}
 * @see {@link delay}
 *
 * @param {number} [period=0] The interval size in milliseconds (by default)
 * or the time unit determined by the scheduler's clock.
 * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling
 * the emission of values, and providing a notion of "time".
 * @return {Observable} An Observable that emits a sequential number each time
 * interval.
 * @static true
 * @name interval
 * @owner Observable
 */
function interval(period, scheduler) {
    if (period === void 0) {
        period = 0;
    }
    if (scheduler === void 0) {
        scheduler = __WEBPACK_IMPORTED_MODULE_1__scheduler_async__["a" /* async */];
    }
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__util_isNumeric__["a" /* isNumeric */])(period) || period < 0) {
        period = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
        scheduler = __WEBPACK_IMPORTED_MODULE_1__scheduler_async__["a" /* async */];
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        subscriber.add(scheduler.schedule(dispatch, period, { subscriber: subscriber, counter: 0, period: period }));
        return subscriber;
    });
}
function dispatch(state) {
    var subscriber = state.subscriber, counter = state.counter, period = state.period;
    subscriber.next(counter);
    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
}
//# sourceMappingURL=interval.js.map


/***/ }),
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = merge;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isScheduler__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__operators_mergeAll__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fromArray__ = __webpack_require__(21);
/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */




/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (as arguments), and simply
 * forwards (without doing any transformation) all the values from all the input
 * Observables to the output Observable. The output Observable only completes
 * once all input Observables have completed. Any error delivered by an input
 * Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // timer will emit ascending values, one every second(1000ms) to console
 * // clicks logs MouseEvents to console everytime the "document" is clicked
 * // Since the two streams are merged you see these happening
 * // as they occur.
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - First timer1 and timer2 will run concurrently
 * // - timer1 will emit a value every 1000ms for 10 iterations
 * // - timer2 will emit a value every 2000ms for 6 iterations
 * // - after timer1 hits it's max iteration, timer2 will
 * //   continue, and timer3 will start to run concurrently with timer2
 * // - when timer2 hits it's max iteration it terminates, and
 * //   timer3 will continue to emit a value every 500ms until it is complete
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {...ObservableInput} observables Input Observables to merge together.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @static true
 * @name merge
 * @owner Observable
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isScheduler__["a" /* isScheduler */])(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */]) {
        return observables[0];
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__operators_mergeAll__["a" /* mergeAll */])(concurrent)(Object(__WEBPACK_IMPORTED_MODULE_3__fromArray__["a" /* fromArray */])(observables, scheduler));
}
//# sourceMappingURL=merge.js.map


/***/ }),
/* 200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = onErrorResumeNext;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__from__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isArray__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__empty__ = __webpack_require__(13);
/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */




/* tslint:enable:max-line-length */
/**
 * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one
 * that was passed.
 *
 * <span class="informal">Execute series of Observables no matter what, even if it means swallowing errors.</span>
 *
 * <img src="./img/onErrorResumeNext.png" width="100%">
 *
 * `onErrorResumeNext` Will subscribe to each observable source it is provided, in order.
 * If the source it's subscribed to emits an error or completes, it will move to the next source
 * without error.
 *
 * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link EMPTY}.
 *
 * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its
 * sources emits an error.
 *
 * Note that there is no way to handle any errors thrown by sources via the resuult of
 * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can
 * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.
 *
 * @example <caption>Subscribe to the next Observable after map fails</caption>
 * import { onErrorResumeNext, of } from 'rxjs/create';
 * import { map } from 'rxjs/operators';
 *
 * onErrorResumeNext(
 *  of(1, 2, 3, 0).pipe(
 *    map(x => {
 *      if (x === 0) throw Error();
 *      return 10 / x;
 *    })
 *  ),
 *  of(1, 2, 3),
 * )
 * .subscribe(
 *   val => console.log(val),
 *   err => console.log(err),          // Will never be called.
 *   () => console.log('done')
 * );
 *
 * // Logs:
 * // 10
 * // 5
 * // 3.3333333333333335
 * // 1
 * // 2
 * // 3
 * // "done"
 *
 * @see {@link concat}
 * @see {@link catch}
 *
 * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.
 * @return {Observable} An Observable that concatenates all sources, one after the other,
 * ignoring all errors, such that any error causes it to move on to the next source.
 */
function onErrorResumeNext() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    if (sources.length === 0) {
        return __WEBPACK_IMPORTED_MODULE_3__empty__["a" /* EMPTY */];
    }
    var first = sources[0], remainder = sources.slice(1);
    if (sources.length === 1 && Object(__WEBPACK_IMPORTED_MODULE_2__util_isArray__["a" /* isArray */])(first)) {
        return onErrorResumeNext.apply(void 0, first);
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var subNext = function () { return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber)); };
        return Object(__WEBPACK_IMPORTED_MODULE_1__from__["a" /* from */])(first).subscribe({
            next: function (value) { subscriber.next(value); },
            error: subNext,
            complete: subNext,
        });
    });
}
//# sourceMappingURL=onErrorResumeNext.js.map


/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pairs;
/* unused harmony export dispatch */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(4);
/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */


/**
 * Convert an object into an observable sequence of [key, value] pairs
 * using an optional IScheduler to enumerate the object.
 *
 * @example <caption>Converts a javascript object to an Observable</caption>
 * var obj = {
 *   foo: 42,
 *   bar: 56,
 *   baz: 78
 * };
 *
 * var source = Rx.Observable.pairs(obj);
 *
 * var subscription = source.subscribe(
 *   function (x) {
 *     console.log('Next: %s', x);
 *   },
 *   function (err) {
 *     console.log('Error: %s', err);
 *   },
 *   function () {
 *     console.log('Completed');
 *   });
 *
 * @param {Object} obj The object to inspect and turn into an
 * Observable sequence.
 * @param {Scheduler} [scheduler] An optional IScheduler to run the
 * enumeration of the input sequence on.
 * @returns {(Observable<[string, T]>)} An observable sequence of
 * [key, value] pairs from the object.
 */
function pairs(obj, scheduler) {
    if (!scheduler) {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length && !subscriber.closed; i++) {
                var key = keys[i];
                if (obj.hasOwnProperty(key)) {
                    subscriber.next([key, obj[key]]);
                }
            }
            subscriber.complete();
        });
    }
    else {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var keys = Object.keys(obj);
            var subscription = new __WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]();
            subscription.add(scheduler.schedule(dispatch, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));
            return subscription;
        });
    }
}
/** @internal */
function dispatch(state) {
    var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
    if (!subscriber.closed) {
        if (index < keys.length) {
            var key = keys[index];
            subscriber.next([key, obj[key]]);
            subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));
        }
        else {
            subscriber.complete();
        }
    }
}
//# sourceMappingURL=pairs.js.map


/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = race;
/* unused harmony export RaceOperator */
/* unused harmony export RaceSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isArray__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fromArray__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__ = __webpack_require__(33);
/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */





function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    // if the only argument is an array, it was most likely called with
    // `race([obs1, obs2, ...])`
    if (observables.length === 1) {
        if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isArray__["a" /* isArray */])(observables[0])) {
            observables = observables[0];
        }
        else {
            return observables[0];
        }
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__fromArray__["a" /* fromArray */])(observables, undefined).lift(new RaceOperator());
}
var RaceOperator = /*@__PURE__*/ (function () {
    function RaceOperator() {
    }
    RaceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RaceSubscriber(subscriber));
    };
    return RaceOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RaceSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasFirst = false;
        _this.observables = [];
        _this.subscriptions = [];
        return _this;
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = Object(__WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__["a" /* subscribeToResult */])(this, observable, observable, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__["a" /* OuterSubscriber */]));

//# sourceMappingURL=race.js.map


/***/ }),
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = range;
/* unused harmony export dispatch */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

/**
 * Creates an Observable that emits a sequence of numbers within a specified
 * range.
 *
 * <span class="informal">Emits a sequence of numbers in a range.</span>
 *
 * <img src="./img/range.png" width="100%">
 *
 * `range` operator emits a range of sequential integers, in order, where you
 * select the `start` of the range and its `length`. By default, uses no
 * IScheduler and just delivers the notifications synchronously, but may use
 * an optional IScheduler to regulate those deliveries.
 *
 * @example <caption>Emits the numbers 1 to 10</caption>
 * var numbers = Rx.Observable.range(1, 10);
 * numbers.subscribe(x => console.log(x));
 *
 * @see {@link timer}
 * @see {@link interval}
 *
 * @param {number} [start=0] The value of the first integer in the sequence.
 * @param {number} [count=0] The number of sequential integers to generate.
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emissions of the notifications.
 * @return {Observable} An Observable of numbers that emits a finite range of
 * sequential integers.
 * @static true
 * @name range
 * @owner Observable
 */
function range(start, count, scheduler) {
    if (start === void 0) {
        start = 0;
    }
    if (count === void 0) {
        count = 0;
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var index = 0;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                index: index, count: count, start: start, subscriber: subscriber
            });
        }
        else {
            do {
                if (index++ >= count) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(start++);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
        }
        return undefined;
    });
}
/** @internal */
function dispatch(state) {
    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
    if (index >= count) {
        subscriber.complete();
        return;
    }
    subscriber.next(start);
    if (subscriber.closed) {
        return;
    }
    state.index = index + 1;
    state.start = start + 1;
    this.schedule(state);
}
//# sourceMappingURL=range.js.map


/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = timer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__scheduler_async__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isNumeric__ = __webpack_require__(101);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_isScheduler__ = __webpack_require__(15);
/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */




/**
 * Creates an Observable that starts emitting after an `initialDelay` and
 * emits ever increasing numbers after each `period` of time thereafter.
 *
 * <span class="informal">Its like {@link interval}, but you can specify when
 * should the emissions start.</span>
 *
 * <img src="./img/timer.png" width="100%">
 *
 * `timer` returns an Observable that emits an infinite sequence of ascending
 * integers, with a constant interval of time, `period` of your choosing
 * between those emissions. The first emission happens after the specified
 * `initialDelay`. The initial delay may be a {@link Date}. By default, this
 * operator uses the `async` IScheduler to provide a notion of time, but you
 * may pass any IScheduler to it. If `period` is not specified, the output
 * Observable emits only one value, `0`. Otherwise, it emits an infinite
 * sequence.
 *
 * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>
 * var numbers = Rx.Observable.timer(3000, 1000);
 * numbers.subscribe(x => console.log(x));
 *
 * @example <caption>Emits one number after five seconds</caption>
 * var numbers = Rx.Observable.timer(5000);
 * numbers.subscribe(x => console.log(x));
 *
 * @see {@link interval}
 * @see {@link delay}
 *
 * @param {number|Date} [dueTime] The initial delay time to wait before
 * emitting the first value of `0`.
 * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the
 * subsequent numbers.
 * @param {SchedulerLike} [scheduler=async] The IScheduler to use for scheduling
 * the emission of values, and providing a notion of "time".
 * @return {Observable} An Observable that emits a `0` after the
 * `initialDelay` and ever increasing numbers after each `period` of time
 * thereafter.
 * @static true
 * @name timer
 * @owner Observable
 */
function timer(dueTime, periodOrScheduler, scheduler) {
    if (dueTime === void 0) {
        dueTime = 0;
    }
    var period = -1;
    if (Object(__WEBPACK_IMPORTED_MODULE_2__util_isNumeric__["a" /* isNumeric */])(periodOrScheduler)) {
        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
    }
    else if (Object(__WEBPACK_IMPORTED_MODULE_3__util_isScheduler__["a" /* isScheduler */])(periodOrScheduler)) {
        scheduler = periodOrScheduler;
    }
    if (!Object(__WEBPACK_IMPORTED_MODULE_3__util_isScheduler__["a" /* isScheduler */])(scheduler)) {
        scheduler = __WEBPACK_IMPORTED_MODULE_1__scheduler_async__["a" /* async */];
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var due = Object(__WEBPACK_IMPORTED_MODULE_2__util_isNumeric__["a" /* isNumeric */])(dueTime)
            ? dueTime
            : (+dueTime - scheduler.now());
        return scheduler.schedule(dispatch, due, {
            index: 0, period: period, subscriber: subscriber
        });
    });
}
function dispatch(state) {
    var index = state.index, period = state.period, subscriber = state.subscriber;
    subscriber.next(index);
    if (subscriber.closed) {
        return;
    }
    else if (period === -1) {
        return subscriber.complete();
    }
    state.index = index + 1;
    this.schedule(state, period);
}
//# sourceMappingURL=timer.js.map


/***/ }),
/* 205 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = using;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__from__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__empty__ = __webpack_require__(13);
/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

 // from from from! LAWL

/**
 * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.
 *
 * <span class="informal">Use it when you catch yourself cleaning up after an Observable.</span>
 *
 * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.
 * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with
 * that object and should return an Observable. That Observable can use resource object during its execution.
 * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor
 * resource object will be shared in any way between subscriptions.
 *
 * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed
 * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output
 * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,
 * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which
 * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone
 * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make
 * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.
 *
 * @see {@link defer}
 *
 * @param {function(): ISubscription} resourceFactory A function which creates any resource object
 * that implements `unsubscribe` method.
 * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which
 * creates an Observable, that can use injected resource object.
 * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but
 * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.
 */
function using(resourceFactory, observableFactory) {
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var resource;
        try {
            resource = resourceFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var result;
        try {
            result = observableFactory(resource);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = result ? Object(__WEBPACK_IMPORTED_MODULE_1__from__["a" /* from */])(result) : __WEBPACK_IMPORTED_MODULE_2__empty__["a" /* EMPTY */];
        var subscription = source.subscribe(subscriber);
        return function () {
            subscription.unsubscribe();
            if (resource) {
                resource.unsubscribe();
            }
        };
    });
}
//# sourceMappingURL=using.js.map


/***/ }),
/* 206 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = zip;
/* unused harmony export ZipOperator */
/* unused harmony export ZipSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__fromArray__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isArray__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Subscriber__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_subscribeToResult__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__internal_symbol_iterator__ = __webpack_require__(34);
/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */







/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each
 * of its input Observables.
 *
 * If the latest parameter is a function, this function is used to compute the created value from the input values.
 * Otherwise, an array of the input values is returned.
 *
 * @example <caption>Combine age and name from different sources</caption>
 *
 * let age$ = Observable.of<number>(27, 25, 29);
 * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');
 * let isDev$ = Observable.of<boolean>(true, true, false);
 *
 * Observable
 *     .zip(age$,
 *          name$,
 *          isDev$,
 *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))
 *     .subscribe(x => console.log(x));
 *
 * // outputs
 * // { age: 27, name: 'Foo', isDev: true }
 * // { age: 25, name: 'Bar', isDev: true }
 * // { age: 29, name: 'Beer', isDev: false }
 *
 * @param observables
 * @return {Observable<R>}
 * @static true
 * @name zip
 * @owner Observable
 */
function zip() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = observables[observables.length - 1];
    if (typeof resultSelector === 'function') {
        observables.pop();
    }
    return Object(__WEBPACK_IMPORTED_MODULE_1__fromArray__["a" /* fromArray */])(observables, undefined).lift(new ZipOperator(resultSelector));
}
var ZipOperator = /*@__PURE__*/ (function () {
    function ZipOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    ZipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
    };
    return ZipOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ZipSubscriber, _super);
    function ZipSubscriber(destination, resultSelector, values) {
        if (values === void 0) {
            values = Object.create(null);
        }
        var _this = _super.call(this, destination) || this;
        _this.iterators = [];
        _this.active = 0;
        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
        _this.values = values;
        return _this;
    }
    ZipSubscriber.prototype._next = function (value) {
        var iterators = this.iterators;
        if (Object(__WEBPACK_IMPORTED_MODULE_2__util_isArray__["a" /* isArray */])(value)) {
            iterators.push(new StaticArrayIterator(value));
        }
        else if (typeof value[__WEBPACK_IMPORTED_MODULE_6__internal_symbol_iterator__["a" /* iterator */]] === 'function') {
            iterators.push(new StaticIterator(value[__WEBPACK_IMPORTED_MODULE_6__internal_symbol_iterator__["a" /* iterator */]]()));
        }
        else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        }
    };
    ZipSubscriber.prototype._complete = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        if (len === 0) {
            this.destination.complete();
            return;
        }
        this.active = len;
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (iterator.stillUnsubscribed) {
                this.add(iterator.subscribe(iterator, i));
            }
            else {
                this.active--; // not an observable
            }
        }
    };
    ZipSubscriber.prototype.notifyInactive = function () {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    ZipSubscriber.prototype.checkIterators = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        // abort if not all of them have values
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                return;
            }
        }
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            var result = iterator.next();
            // check to see if it's completed now that you've gotten
            // the next value.
            if (iterator.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.resultSelector) {
            this._tryresultSelector(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    };
    ZipSubscriber.prototype._tryresultSelector = function (args) {
        var result;
        try {
            result = this.resultSelector.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return ZipSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__Subscriber__["a" /* Subscriber */]));

var StaticIterator = /*@__PURE__*/ (function () {
    function StaticIterator(iterator) {
        this.iterator = iterator;
        this.nextResult = iterator.next();
    }
    StaticIterator.prototype.hasValue = function () {
        return true;
    };
    StaticIterator.prototype.next = function () {
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    };
    StaticIterator.prototype.hasCompleted = function () {
        var nextResult = this.nextResult;
        return nextResult && nextResult.done;
    };
    return StaticIterator;
}());
var StaticArrayIterator = /*@__PURE__*/ (function () {
    function StaticArrayIterator(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    StaticArrayIterator.prototype[__WEBPACK_IMPORTED_MODULE_6__internal_symbol_iterator__["a" /* iterator */]] = function () {
        return this;
    };
    StaticArrayIterator.prototype.next = function (value) {
        var i = this.index++;
        var array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    };
    StaticArrayIterator.prototype.hasValue = function () {
        return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function () {
        return this.array.length === this.index;
    };
    return StaticArrayIterator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipBufferIterator = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        _this.observable = observable;
        _this.stillUnsubscribed = true;
        _this.buffer = [];
        _this.isComplete = false;
        return _this;
    }
    ZipBufferIterator.prototype[__WEBPACK_IMPORTED_MODULE_6__internal_symbol_iterator__["a" /* iterator */]] = function () {
        return this;
    };
    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
    //    this is legit because `next()` will never be called by a subscription in this case.
    ZipBufferIterator.prototype.next = function () {
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    };
    ZipBufferIterator.prototype.hasValue = function () {
        return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function () {
        return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function () {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    };
    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function (value, index) {
        return Object(__WEBPACK_IMPORTED_MODULE_5__util_subscribeToResult__["a" /* subscribeToResult */])(this, this.observable, this, index);
    };
    return ZipBufferIterator;
}(__WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=zip.js.map


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var IgxSummaryOperand = (function () {
    function IgxSummaryOperand() {
    }
    IgxSummaryOperand.prototype.operate = function (data) {
        return [{
                key: "count",
                label: "Count",
                summaryResult: this.count(data)
            }];
    };
    IgxSummaryOperand.prototype.count = function (data) {
        return data.length;
    };
    return IgxSummaryOperand;
}());
exports.IgxSummaryOperand = IgxSummaryOperand;
var IgxNumberSummaryOperand = (function (_super) {
    __extends(IgxNumberSummaryOperand, _super);
    function IgxNumberSummaryOperand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgxNumberSummaryOperand.prototype.operate = function (data) {
        var result = _super.prototype.operate.call(this, data);
        result.push({
            key: "min",
            label: "Min",
            summaryResult: this.min(data)
        });
        result.push({
            key: "max",
            label: "Max",
            summaryResult: this.max(data)
        });
        result.push({
            key: "sum",
            label: "Sum",
            summaryResult: this.sum(data)
        });
        result.push({
            key: "average",
            label: "Avg",
            summaryResult: this.average(data)
        });
        return result;
    };
    IgxNumberSummaryOperand.prototype.min = function (data) {
        if (data.length > 0) {
            return data.reduce(function (a, b) { return Math.min(a, b); });
        }
        else {
            return;
        }
    };
    IgxNumberSummaryOperand.prototype.max = function (data) {
        if (data.length > 0) {
            return data.reduce(function (a, b) { return Math.max(a, b); });
        }
        else {
            return;
        }
    };
    IgxNumberSummaryOperand.prototype.sum = function (data) {
        if (data.length > 0) {
            return data.reduce(function (a, b) { return +a + +b; });
        }
        else {
            return;
        }
    };
    IgxNumberSummaryOperand.prototype.average = function (data) {
        if (data.length > 0) {
            return this.sum(data) / this.count(data);
        }
        else {
            return;
        }
    };
    return IgxNumberSummaryOperand;
}(IgxSummaryOperand));
exports.IgxNumberSummaryOperand = IgxNumberSummaryOperand;
var IgxDateSummaryOperand = (function (_super) {
    __extends(IgxDateSummaryOperand, _super);
    function IgxDateSummaryOperand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgxDateSummaryOperand.prototype.operate = function (data) {
        var result = _super.prototype.operate.call(this, data);
        result.push({
            key: "earliest",
            label: "Earliest",
            summaryResult: this.earliest(data)
        });
        result.push({
            key: "latest",
            label: "Latest",
            summaryResult: this.latest(data)
        });
        return result;
    };
    IgxDateSummaryOperand.prototype.latest = function (data) {
        if (data.length > 0) {
            return data.sort(function (a, b) { return new Date(b).valueOf() - new Date(a).valueOf(); })[0];
        }
        else {
            return;
        }
    };
    IgxDateSummaryOperand.prototype.earliest = function (data) {
        if (data.length > 0) {
            return data.sort(function (a, b) { return new Date(b).valueOf() - new Date(a).valueOf(); })[data.length - 1];
        }
        else {
            return;
        }
    };
    return IgxDateSummaryOperand;
}(IgxSummaryOperand));
exports.IgxDateSummaryOperand = IgxDateSummaryOperand;


/***/ }),
/* 208 */
/***/ (function(module, exports) {

module.exports = "<ng-template #defaultCell igxTextHighlight [cssClass]=\"highlightClass\" [activeCssClass]=\"activeHighlightClass\" [groupName]=\"gridID\"\r\n        [value]=\"formatter ? formatter(value) : value\" [row]=\"rowIndex\" [column]=\"this.column.visibleIndex\" [page]=\"this.grid.page\">\r\n    <div>{{ formatter ? formatter(value) : value }}</div>\r\n</ng-template>\r\n<ng-template #inlineEditor let-cell=\"cell\">\r\n    <igx-input-group>\r\n        <input igxInput [value]=\"value\" [igxFocus]=\"true\" [igxTextSelection]=\"true\" (keydown.enter)=\"cell.update($event.target.value)\">\r\n    </igx-input-group>\r\n</ng-template>\r\n<ng-container *ngTemplateOutlet=\"template; context: context\">\r\n</ng-container>\r\n"

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var rxjs_1 = __webpack_require__(18);
var operators_1 = __webpack_require__(36);
var data_util_1 = __webpack_require__(11);
var filtering_condition_1 = __webpack_require__(46);
var toggle_directive_1 = __webpack_require__(53);
var api_service_1 = __webpack_require__(10);
var grid_common_1 = __webpack_require__(14);
var IgxGridFilterComponent = (function () {
    function IgxGridFilterComponent(zone, gridAPI, cdr, elementRef) {
        var _this = this;
        this.zone = zone;
        this.gridAPI = gridAPI;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.booleanFilterAll = "All";
        this.dialogShowing = false;
        this.dialogPosition = "igx-filtering__options--to-right";
        this.UNARY_CONDITIONS = [
            "true", "false", "null", "notNull", "empty", "notEmpty",
            "yesterday", "today", "thisMonth", "lastMonth", "nextMonth",
            "thisYear", "lastYear", "nextYear"
        ];
        this.filterChanged = new rxjs_1.Subject();
        this.conditionChanged = new rxjs_1.Subject();
        this.unaryConditionChanged = new rxjs_1.Subject();
        this.chunkLoaded = new rxjs_1.Subscription();
        this.MINIMUM_VIABLE_SIZE = 240;
        this.filterChanged.pipe(operators_1.debounceTime(250)).subscribe(function (value) { return _this.value = value; });
        this.unaryConditionChanged.subscribe(function (value) { return _this.filter(); });
        this.conditionChanged.subscribe(function (value) { if (!!_this._value || _this._value === 0) {
            _this.filter();
        } });
    }
    Object.defineProperty(IgxGridFilterComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            if (!val && val !== 0) {
                this.clearFiltering(false);
                return;
            }
            this._value = this.transformValue(val);
            this.filter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilterComponent.prototype, "dataType", {
        get: function () {
            return this.column.dataType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilterComponent.prototype, "conditions", {
        get: function () {
            var conditions = [];
            switch (this.dataType) {
                case data_util_1.DataType.String:
                    conditions = Object.keys(filtering_condition_1.STRING_FILTERS);
                    break;
                case data_util_1.DataType.Number:
                    conditions = Object.keys(filtering_condition_1.NUMBER_FILTERS);
                    break;
                case data_util_1.DataType.Boolean:
                    conditions = Object.keys(filtering_condition_1.BOOLEAN_FILTERS);
                    break;
                case data_util_1.DataType.Date:
                    conditions = Object.keys(filtering_condition_1.DATE_FILTERS);
            }
            return conditions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilterComponent.prototype, "template", {
        get: function () {
            switch (this.dataType) {
                case data_util_1.DataType.String:
                case data_util_1.DataType.Number:
                    return this.defaultFilterUI;
                case data_util_1.DataType.Date:
                    return this.defaultDateUI;
                case data_util_1.DataType.Boolean:
                    return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilterComponent.prototype, "filterCSS", {
        get: function () {
            if (this.dialogShowing) {
                return "igx-filtering__toggle--active";
            }
            if (this.filteringExpression()) {
                return "igx-filtering__toggle--filtered";
            }
            return "igx-filtering__toggle";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilterComponent.prototype, "gridID", {
        get: function () {
            return this.column.gridID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilterComponent.prototype, "styleClasses", {
        get: function () {
            return "igx-filtering";
        },
        enumerable: true,
        configurable: true
    });
    IgxGridFilterComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.chunkLoaded = this.gridAPI.get(this.gridID).headerContainer.onChunkPreload.subscribe(function () {
            if (!_this.toggleDirective.collapsed) {
                _this.toggleDirective.collapsed = true;
                _this.refresh();
            }
        });
    };
    IgxGridFilterComponent.prototype.ngDoCheck = function () {
        this.cdr.markForCheck();
    };
    IgxGridFilterComponent.prototype.ngOnDestroy = function () {
        this.filterChanged.unsubscribe();
        this.conditionChanged.unsubscribe();
        this.unaryConditionChanged.unsubscribe();
        this.chunkLoaded.unsubscribe();
    };
    IgxGridFilterComponent.prototype.refresh = function () {
        this.dialogShowing = !this.dialogShowing;
        if (this.dialogShowing) {
            this.focusInput();
            this.column.filteringCondition = this.getCondition(this.select.nativeElement.value);
        }
        this.cdr.detectChanges();
    };
    IgxGridFilterComponent.prototype.isActive = function (value) {
        return this._filterCondition === value;
    };
    Object.defineProperty(IgxGridFilterComponent.prototype, "unaryCondition", {
        get: function () {
            for (var _i = 0, _a = this.UNARY_CONDITIONS; _i < _a.length; _i++) {
                var each = _a[_i];
                if (this._filterCondition && this._filterCondition === each) {
                    return true;
                }
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridFilterComponent.prototype.filter = function () {
        var grid = this.gridAPI.get(this.gridID);
        this.column.filteringCondition = this.getCondition(this.select.nativeElement.value);
        this.gridAPI.filter(this.column.gridID, this.column.field, this._value, this.column.filteringCondition, this.column.filteringIgnoreCase);
        grid.onFilteringDone.emit({
            fieldName: this.column.field,
            condition: this.column.filteringCondition,
            ignoreCase: this.column.filteringIgnoreCase,
            searchVal: this._value
        });
    };
    IgxGridFilterComponent.prototype.clearFiltering = function (resetCondition) {
        this._value = null;
        this._filterCondition = resetCondition ? undefined : this._filterCondition;
        this.gridAPI.clear_filter(this.gridID, this.column.field);
        this.gridAPI.get(this.gridID).clearSummaryCache();
        if (this.dataType === data_util_1.DataType.Date) {
            this.cdr.detectChanges();
        }
        this.focusInput();
    };
    IgxGridFilterComponent.prototype.selectionChanged = function (value) {
        if (value === this.booleanFilterAll) {
            this.clearFiltering(true);
            return;
        }
        this.focusInput();
        this._filterCondition = value;
        this.column.filteringCondition = this.getCondition(value);
        if (this.unaryCondition) {
            this.unaryConditionChanged.next(value);
        }
        else {
            this.conditionChanged.next(value);
        }
    };
    IgxGridFilterComponent.prototype.onInputChanged = function (val) {
        this.filterChanged.next(val);
    };
    IgxGridFilterComponent.prototype.clearInput = function () {
        this.clearFiltering(false);
    };
    IgxGridFilterComponent.prototype.focusInput = function () {
        if (this.input) {
            this.input.nativeElement.focus();
        }
    };
    Object.defineProperty(IgxGridFilterComponent.prototype, "disabled", {
        get: function () {
            if (this.gridAPI.get(this.gridID).filteringExpressions.length > 0) {
                return false;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridFilterComponent.prototype.onMouseDown = function () {
        var _this = this;
        requestAnimationFrame(function () {
            var grid = _this.gridAPI.get(_this.gridID);
            var gridRect = grid.nativeElement.getBoundingClientRect();
            var dropdownRect = _this.elementRef.nativeElement.getBoundingClientRect();
            var x = dropdownRect.left;
            var x1 = gridRect.left + gridRect.width;
            x += window.pageXOffset;
            x1 += window.pageXOffset;
            if (Math.abs(x - x1) < _this.MINIMUM_VIABLE_SIZE) {
                _this.dialogPosition = "igx-filtering__options--to-left";
            }
        });
    };
    IgxGridFilterComponent.prototype.onDatePickerClick = function () {
        this.zone.run(function () { });
    };
    IgxGridFilterComponent.prototype.onClick = function (event) {
        event.stopPropagation();
    };
    IgxGridFilterComponent.prototype.getCondition = function (value) {
        switch (this.dataType) {
            case data_util_1.DataType.String:
                return filtering_condition_1.STRING_FILTERS[value];
            case data_util_1.DataType.Number:
                return filtering_condition_1.NUMBER_FILTERS[value];
            case data_util_1.DataType.Boolean:
                return filtering_condition_1.BOOLEAN_FILTERS[value];
            case data_util_1.DataType.Date:
                return filtering_condition_1.DATE_FILTERS[value];
        }
    };
    IgxGridFilterComponent.prototype.transformValue = function (value) {
        if (this.dataType === data_util_1.DataType.Number) {
            value = parseFloat(value);
        }
        else if (this.dataType === data_util_1.DataType.Boolean) {
            value = Boolean(value);
        }
        return value;
    };
    IgxGridFilterComponent.prototype.filteringExpression = function () {
        var _this = this;
        var expr = this.gridAPI.get(this.gridID)
            .filteringExpressions.find(function (x) { return x.fieldName === _this.column.field; });
        if (expr) {
            this._value = expr.searchVal;
            this._filterCondition = expr.condition.name;
            if (!this.unaryCondition && !this._value) {
                return false;
            }
            return true;
        }
        else {
            this._value = null;
            this._filterCondition = undefined;
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridFilterComponent.prototype, "column", void 0);
    __decorate([
        core_1.HostBinding("class"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridFilterComponent.prototype, "styleClasses", null);
    __decorate([
        core_1.ViewChild("defaultFilterUI", { read: core_1.TemplateRef }),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxGridFilterComponent.prototype, "defaultFilterUI", void 0);
    __decorate([
        core_1.ViewChild("defaultDateUI", { read: core_1.TemplateRef }),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxGridFilterComponent.prototype, "defaultDateUI", void 0);
    __decorate([
        core_1.ViewChild(toggle_directive_1.IgxToggleDirective, { read: toggle_directive_1.IgxToggleDirective }),
        __metadata("design:type", toggle_directive_1.IgxToggleDirective)
    ], IgxGridFilterComponent.prototype, "toggleDirective", void 0);
    __decorate([
        core_1.ViewChild("select", { read: core_1.ElementRef }),
        __metadata("design:type", core_1.ElementRef)
    ], IgxGridFilterComponent.prototype, "select", void 0);
    __decorate([
        core_1.ViewChild("input", { read: core_1.ElementRef }),
        __metadata("design:type", core_1.ElementRef)
    ], IgxGridFilterComponent.prototype, "input", void 0);
    __decorate([
        grid_common_1.autoWire(true),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxGridFilterComponent.prototype, "filter", null);
    __decorate([
        grid_common_1.autoWire(true),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", void 0)
    ], IgxGridFilterComponent.prototype, "clearFiltering", null);
    __decorate([
        core_1.HostListener("click", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridFilterComponent.prototype, "onClick", null);
    IgxGridFilterComponent = __decorate([
        core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: "igx-grid-filter",
            template: __webpack_require__(210)
        }),
        __metadata("design:paramtypes", [core_1.NgZone, api_service_1.IgxGridAPIService, core_1.ChangeDetectorRef, core_1.ElementRef])
    ], IgxGridFilterComponent);
    return IgxGridFilterComponent;
}());
exports.IgxGridFilterComponent = IgxGridFilterComponent;


/***/ }),
/* 210 */
/***/ (function(module, exports) {

module.exports = "<ng-template #defaultFilterUI>\r\n    <div *ngIf=\"!unaryCondition\" class=\"igx-filtering__op\">\r\n        <igx-input-group>\r\n            <input type=\"text\" igxInput placeholder=\"Value\" autocomplete=\"off\" [value]=\"value\" (input)=\"onInputChanged($event.target.value)\" #input igxFocus=\"true\"/>\r\n            <igx-suffix *ngIf=\"input.value.length > 0\" (click)=\"clearInput()\">\r\n                <igx-icon>clear</igx-icon>\r\n            </igx-suffix>\r\n        </igx-input-group>\r\n    </div>\r\n    <br>\r\n</ng-template>\r\n\r\n<ng-template #defaultDateUI>\r\n    <igx-datePicker (click)=\"onDatePickerClick()\" *ngIf=\"!unaryCondition\" [(ngModel)]=\"value\"></igx-datePicker>\r\n</ng-template>\r\n\r\n<div class=\"igx-filtering\">\r\n    <div [attr.class]=\"filterCSS\">\r\n        <span class=\"toggle-icon\" [igxToggleAction]=\"directive\">\r\n            <igx-icon (mousedown)=\"onMouseDown()\">filter_list</igx-icon>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n<span igxToggle (onOpen)=\"refresh()\" (onClose)=\"refresh()\" #directive=\"toggle\" [attr.class]=\"dialogPosition\">\r\n    <div>\r\n        <select (change)=\"selectionChanged($event.target.value)\" #select>\r\n            <option *ngIf=\"dataType === 'boolean'\" [value]=\"booleanFilterAll\">{{ booleanFilterAll | filterCondition | titlecase }}</option>\r\n            <option [selected]=\"isActive(each)\" *ngFor=\"let each of conditions\" [value]=\"each\">{{ each | filterCondition | titlecase }}</option>\r\n        </select>\r\n    </div>\r\n    <ng-container *ngTemplateOutlet=\"template; context: { $implicit: this }\"></ng-container>\r\n    <div class=\"igx-filtering__options-bgroup\">\r\n        <button igxButton igxRipple (click)=\"clearFiltering(true)\" [disabled]=\"disabled\">Reset</button>\r\n        <button igxButton igxRipple (click)=\"directive.close(true)\">Close</button>\r\n    </div>\r\n</span>\r\n"

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var data_util_1 = __webpack_require__(11);
var sorting_expression_interface_1 = __webpack_require__(26);
var dragdrop_directive_1 = __webpack_require__(212);
var api_service_1 = __webpack_require__(10);
var column_component_1 = __webpack_require__(35);
var grid_common_1 = __webpack_require__(14);
var IgxGridHeaderComponent = (function () {
    function IgxGridHeaderComponent(gridAPI, cdr, elementRef, zone) {
        this.gridAPI = gridAPI;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.zone = zone;
        this.hostRole = "columnheader";
        this.tabindex = 0;
        this.resizeCursor = null;
        this.showResizer = false;
        this.dragDirection = dragdrop_directive_1.RestrictDrag.HORIZONTALLY;
        this.resizeEndTimeout = /Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent) ? 200 : 0;
        this.sortDirection = sorting_expression_interface_1.SortingDirection.None;
        this._isResiznig = false;
    }
    Object.defineProperty(IgxGridHeaderComponent.prototype, "styleClasses", {
        get: function () {
            return "igx-grid__th " + this.column.headerClasses;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "width", {
        get: function () {
            return this.column.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "ascending", {
        get: function () {
            return this.sortDirection === sorting_expression_interface_1.SortingDirection.Asc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "descending", {
        get: function () {
            return this.sortDirection === sorting_expression_interface_1.SortingDirection.Desc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "sortingIcon", {
        get: function () {
            if (this.sortDirection !== sorting_expression_interface_1.SortingDirection.None) {
                return this.sortDirection === sorting_expression_interface_1.SortingDirection.Asc ? "arrow_upward" : "arrow_downward";
            }
            return "none";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "columnType", {
        get: function () {
            return this.column.dataType === data_util_1.DataType.Number;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "sorted", {
        get: function () {
            return this.sortDirection !== sorting_expression_interface_1.SortingDirection.None;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "zIndex", {
        get: function () {
            if (!this.column.pinned) {
                return null;
            }
            return 9999 - this.grid.pinnedColumns.indexOf(this.column);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "headerID", {
        get: function () {
            return this.gridID + "_" + this.column.field;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridHeaderComponent.prototype.ngOnInit = function () {
        this.cdr.markForCheck();
    };
    IgxGridHeaderComponent.prototype.ngDoCheck = function () {
        this.getSortDirection();
        this.cdr.markForCheck();
    };
    IgxGridHeaderComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.resizeArea.nativeElement.addEventListener("mouseover", _this.onResizeAreaMouseOver.bind(_this));
            _this.resizeArea.nativeElement.addEventListener("mousedown", _this.onResizeAreaMouseDown.bind(_this));
        });
    };
    IgxGridHeaderComponent.prototype.onClick = function (event) {
        var _this = this;
        if (!this._isResiznig) {
            event.stopPropagation();
            if (this.column.sortable) {
                var grid = this.gridAPI.get(this.gridID);
                var groupingExpr = grid.groupingExpressions.find(function (expr) { return expr.fieldName === _this.column.field; });
                var sortDir = groupingExpr ?
                    this.sortDirection + 1 > sorting_expression_interface_1.SortingDirection.Desc ? sorting_expression_interface_1.SortingDirection.Asc : sorting_expression_interface_1.SortingDirection.Desc
                    : this.sortDirection + 1 > sorting_expression_interface_1.SortingDirection.Desc ? sorting_expression_interface_1.SortingDirection.None : this.sortDirection + 1;
                this.sortDirection = sortDir;
                this.gridAPI.sort(this.gridID, this.column.field, this.sortDirection, this.column.sortingIgnoreCase);
                grid.onSortingDone.emit({
                    dir: this.sortDirection,
                    fieldName: this.column.field,
                    ignoreCase: this.column.sortingIgnoreCase
                });
            }
        }
    };
    Object.defineProperty(IgxGridHeaderComponent.prototype, "restrictResizeMin", {
        get: function () {
            var actualMinWidth = parseFloat(this.column.minWidth);
            var defaultMinWidth = parseFloat(this.column.defaultMinWidth);
            var minWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;
            minWidth = minWidth < parseFloat(this.column.width) ? minWidth : parseFloat(this.column.width);
            return minWidth - this.elementRef.nativeElement.getBoundingClientRect().width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "restrictResizeMax", {
        get: function () {
            var actualWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
            if (this.column.pinned) {
                var pinnedMaxWidth = this._pinnedMaxWidth = this.grid.calcPinnedContainerMaxWidth - this.grid.pinnedWidth + actualWidth;
                if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {
                    this._pinnedMaxWidth = this.column.maxWidth;
                    return parseFloat(this.column.maxWidth) - actualWidth;
                }
                else {
                    return pinnedMaxWidth - actualWidth;
                }
            }
            else {
                if (this.column.maxWidth) {
                    return parseFloat(this.column.maxWidth) - actualWidth;
                }
                else {
                    return Number.MAX_SAFE_INTEGER;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "grid", {
        get: function () {
            return this.gridAPI.get(this.gridID);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "isPinned", {
        get: function () {
            return this.column.pinned;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "isLastPinned", {
        get: function () {
            var pinnedCols = this.grid.pinnedColumns;
            if (pinnedCols.length === 0) {
                return false;
            }
            else {
                return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxGridHeaderComponent.prototype.getSortDirection = function () {
        var _this = this;
        var expr = this.gridAPI.get(this.gridID).sortingExpressions.find(function (x) { return x.fieldName === _this.column.field; });
        this.sortDirection = expr ? expr.dir : sorting_expression_interface_1.SortingDirection.None;
    };
    IgxGridHeaderComponent.prototype.onResizeAreaMouseOver = function () {
        if (this.column.resizable) {
            this.resizeCursor = "col-resize";
            this.cdr.detectChanges();
        }
    };
    IgxGridHeaderComponent.prototype.onResizeAreaMouseDown = function (event) {
        if (event.button === 0 && this.column.resizable) {
            this.showResizer = true;
            this._isResiznig = true;
            this.resizerHeight = this.grid.calcResizerHeight;
            this._startResizePos = event.clientX;
        }
        else {
            this.resizeCursor = null;
        }
        this.cdr.detectChanges();
    };
    IgxGridHeaderComponent.prototype.onResizeAreaDblClick = function () {
        if (this.column.resizable) {
            var currentColWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
            var range_1 = this.column.grid.document.createRange();
            var valToPxls_1 = function (referenceNode) {
                range_1.selectNodeContents(referenceNode);
                return range_1.getBoundingClientRect().width;
            };
            var largest = new Map();
            var cellsContentWidths_1 = [];
            if (this.column.cells[0].nativeElement.children.length > 0) {
                this.column.cells.forEach(function (cell) {
                    cellsContentWidths_1.push(Math.max.apply(Math, Array.from(cell.nativeElement.children).map(function (child) { return valToPxls_1(child); })));
                });
            }
            else {
                cellsContentWidths_1 = this.column.cells.map(function (cell) { return valToPxls_1(cell.nativeElement); });
            }
            var ind = cellsContentWidths_1.indexOf(Math.max.apply(Math, cellsContentWidths_1));
            var cellStyle = this.grid.document.defaultView.getComputedStyle(this.column.cells[ind].nativeElement);
            var cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight);
            if (this.isLastPinned) {
                cellPadding += parseFloat(cellStyle.borderRightWidth);
            }
            largest.set(Math.max.apply(Math, cellsContentWidths_1), cellPadding);
            var headerCell = void 0;
            if (this.column.headerTemplate && this.elementRef.nativeElement.children[0].children.length > 0) {
                headerCell = Math.max.apply(Math, Array.from(this.elementRef.nativeElement.children[0].children)
                    .map(function (child) { return valToPxls_1(child); }));
            }
            else {
                headerCell = valToPxls_1(this.elementRef.nativeElement.children[0]);
            }
            if (this.column.sortable || this.column.filterable) {
                headerCell += this.elementRef.nativeElement.children[1].getBoundingClientRect().width;
            }
            var headerStyle = this.grid.document.defaultView.getComputedStyle(this.elementRef.nativeElement);
            var headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +
                parseFloat(headerStyle.borderRightWidth);
            largest.set(headerCell, headerPadding);
            var largestCell = Math.max.apply(Math, Array.from(largest.keys()));
            var largestCellPadding = largest.get(largestCell);
            var size = Math.ceil(largestCell + largestCellPadding) + "px";
            if (this.column.pinned) {
                var newPinnedWidth = this.grid.pinnedWidth - currentColWidth + parseFloat(size);
                if (newPinnedWidth <= this.grid.calcPinnedContainerMaxWidth) {
                    this.column.width = size;
                }
            }
            else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {
                this.column.width = parseFloat(this.column.maxWidth) + "px";
            }
            else if (parseFloat(size) < parseFloat(this.column.defaultMinWidth)) {
                this.column.width = this.column.defaultMinWidth + "px";
            }
            else {
                this.column.width = size;
            }
            this.grid.markForCheck();
            this.grid.reflow();
            this.grid.onColumnResized.emit({ column: this.column, prevWidth: currentColWidth.toString(), newWidth: this.column.width });
        }
    };
    IgxGridHeaderComponent.prototype.onResize = function (event) {
        this._isResiznig = false;
        this.showResizer = false;
        var diff = event.clientX - this._startResizePos;
        if (this.column.resizable) {
            var currentColWidth = parseFloat(this.column.width);
            var actualMinWidth = parseFloat(this.column.minWidth);
            var defaultMinWidth = parseFloat(this.column.defaultMinWidth);
            var colMinWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;
            var colMaxWidth = this.column.pinned ? parseFloat(this._pinnedMaxWidth) : parseFloat(this.column.maxWidth);
            var actualWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
            currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;
            colMinWidth = colMinWidth < currentColWidth ? colMinWidth : currentColWidth;
            if (currentColWidth + diff < colMinWidth) {
                this.column.width = colMinWidth + "px";
            }
            else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {
                this.column.width = colMaxWidth + "px";
            }
            else {
                this.column.width = (currentColWidth + diff) + "px";
            }
            this.grid.markForCheck();
            this.grid.reflow();
            if (currentColWidth !== parseFloat(this.column.width)) {
                this.grid.onColumnResized.emit({ column: this.column, prevWidth: currentColWidth.toString(), newWidth: this.column.width });
            }
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", column_component_1.IgxColumnComponent)
    ], IgxGridHeaderComponent.prototype, "column", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxGridHeaderComponent.prototype, "gridID", void 0);
    __decorate([
        core_1.HostBinding("class"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridHeaderComponent.prototype, "styleClasses", null);
    __decorate([
        core_1.HostBinding("style.min-width"),
        core_1.HostBinding("style.flex-basis"),
        core_1.HostBinding("class.igx-grid__th--fw"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridHeaderComponent.prototype, "width", null);
    __decorate([
        core_1.HostBinding("class.asc"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridHeaderComponent.prototype, "ascending", null);
    __decorate([
        core_1.HostBinding("class.desc"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridHeaderComponent.prototype, "descending", null);
    __decorate([
        core_1.HostBinding("class.igx-grid__th--number"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridHeaderComponent.prototype, "columnType", null);
    __decorate([
        core_1.HostBinding("class.igx-grid__th--sorted"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridHeaderComponent.prototype, "sorted", null);
    __decorate([
        core_1.HostBinding("style.z-index"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridHeaderComponent.prototype, "zIndex", null);
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxGridHeaderComponent.prototype, "hostRole", void 0);
    __decorate([
        core_1.HostBinding("attr.tabindex"),
        __metadata("design:type", Object)
    ], IgxGridHeaderComponent.prototype, "tabindex", void 0);
    __decorate([
        core_1.HostBinding("attr.id"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridHeaderComponent.prototype, "headerID", null);
    __decorate([
        core_1.ViewChild("resizeArea"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxGridHeaderComponent.prototype, "resizeArea", void 0);
    __decorate([
        core_1.HostListener("click", ["$event"]),
        grid_common_1.autoWire(true),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridHeaderComponent.prototype, "onClick", null);
    __decorate([
        core_1.HostBinding("class.igx-grid__th--pinned"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridHeaderComponent.prototype, "isPinned", null);
    __decorate([
        core_1.HostBinding("class.igx-grid__th--pinned-last"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridHeaderComponent.prototype, "isLastPinned", null);
    IgxGridHeaderComponent = __decorate([
        core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: "igx-grid-header",
            template: __webpack_require__(213)
        }),
        __metadata("design:paramtypes", [api_service_1.IgxGridAPIService, core_1.ChangeDetectorRef, core_1.ElementRef, core_1.NgZone])
    ], IgxGridHeaderComponent);
    return IgxGridHeaderComponent;
}());
exports.IgxGridHeaderComponent = IgxGridHeaderComponent;


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var rxjs_1 = __webpack_require__(18);
var operators_1 = __webpack_require__(36);
var RestrictDrag;
(function (RestrictDrag) {
    RestrictDrag[RestrictDrag["VERTICALLY"] = 0] = "VERTICALLY";
    RestrictDrag[RestrictDrag["HORIZONTALLY"] = 1] = "HORIZONTALLY";
    RestrictDrag[RestrictDrag["NONE"] = 2] = "NONE";
})(RestrictDrag = exports.RestrictDrag || (exports.RestrictDrag = {}));
var IgxDragDirective = (function () {
    function IgxDragDirective(element, cdr, document) {
        var _this = this;
        this.element = element;
        this.cdr = cdr;
        this.document = document;
        this.restrictDrag = RestrictDrag.NONE;
        this.restrictHDragMin = Number.MIN_SAFE_INTEGER;
        this.restrictHDragMax = Number.MAX_SAFE_INTEGER;
        this.restrictVDragMin = Number.MIN_SAFE_INTEGER;
        this.restrictVDragMax = Number.MAX_SAFE_INTEGER;
        this.dragEnd = new rxjs_1.Subject();
        this.dragStart = new rxjs_1.Subject();
        this.drag = new rxjs_1.Subject();
        this.dragStart.pipe(operators_1.map(function (event) { return ({ left: event.clientX, top: event.clientY }); }), operators_1.switchMap(function (offset) { return _this.drag.pipe(operators_1.map(function (event) { return ({ left: event.clientX - offset.left, top: event.clientY - offset.top }); }), operators_1.takeUntil(_this.dragEnd)); })).subscribe(function (pos) {
            var left = _this._left + pos.left;
            var top = _this._top + pos.top;
            if (_this.restrictDrag === RestrictDrag.HORIZONTALLY || _this.restrictDrag === RestrictDrag.NONE) {
                _this.left = left < _this.restrictHDragMin ? _this.restrictHDragMin + "px" : left + "px";
                if (left > _this.restrictHDragMax) {
                    _this.left = _this.restrictHDragMax + "px";
                }
                else if (left > _this.restrictHDragMin) {
                    _this.left = left + "px";
                }
            }
            if (_this.restrictDrag === RestrictDrag.VERTICALLY || _this.restrictDrag === RestrictDrag.NONE) {
                _this.top = top < _this.restrictVDragMin ? _this.restrictVDragMin + "px" : top + "px";
                if (top > _this.restrictVDragMax) {
                    _this.top = _this.restrictVDragMax + "px";
                }
                else if (top > _this.restrictVDragMin) {
                    _this.top = top + "px";
                }
            }
        });
    }
    Object.defineProperty(IgxDragDirective.prototype, "left", {
        set: function (val) {
            this.element.nativeElement.style.left = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDragDirective.prototype, "top", {
        set: function (val) {
            this.element.nativeElement.style.top = val;
        },
        enumerable: true,
        configurable: true
    });
    IgxDragDirective.prototype.onMouseup = function (event) {
        this.dragEnd.next(event);
        this.cdr.reattach();
    };
    IgxDragDirective.prototype.onMousedown = function (event) {
        this.dragStart.next(event);
        var elStyle = this.document.defaultView.getComputedStyle(this.element.nativeElement);
        this._left = Number.isNaN(parseInt(elStyle.left, 10)) ? 0 : parseInt(elStyle.left, 10);
        this._top = Number.isNaN(parseInt(elStyle.top, 10)) ? 0 : parseInt(elStyle.top, 10);
        this.cdr.detach();
    };
    IgxDragDirective.prototype.onMousemove = function (event) {
        event.preventDefault();
        this.drag.next(event);
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxDragDirective.prototype, "restrictDrag", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxDragDirective.prototype, "restrictHDragMin", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxDragDirective.prototype, "restrictHDragMax", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxDragDirective.prototype, "restrictVDragMin", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxDragDirective.prototype, "restrictVDragMax", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxDragDirective.prototype, "dragEnd", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxDragDirective.prototype, "dragStart", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxDragDirective.prototype, "drag", void 0);
    __decorate([
        core_1.HostListener("document:mouseup", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxDragDirective.prototype, "onMouseup", null);
    __decorate([
        core_1.HostListener("mousedown", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxDragDirective.prototype, "onMousedown", null);
    __decorate([
        core_1.HostListener("document:mousemove", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxDragDirective.prototype, "onMousemove", null);
    IgxDragDirective = __decorate([
        core_1.Directive({
            selector: "[igxDrag]"
        }),
        __param(2, core_1.Inject(common_1.DOCUMENT)),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.ChangeDetectorRef, Object])
    ], IgxDragDirective);
    return IgxDragDirective;
}());
exports.IgxDragDirective = IgxDragDirective;
var IgxDraggableDirective = (function () {
    function IgxDraggableDirective(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.effectAllowed = "move";
    }
    IgxDraggableDirective.prototype.ngOnInit = function () {
        this.draggable = true;
    };
    IgxDraggableDirective.prototype.ngOnDestroy = function () {
        this.draggable = false;
    };
    IgxDraggableDirective.prototype.onDragStart = function (event) {
        if (this.dragClass) {
            this._renderer.addClass(this._elementRef.nativeElement, this.dragClass);
        }
        event.dataTransfer.effectAllowed = this.effectAllowed;
        event.dataTransfer.setData("data", JSON.stringify(this.data));
    };
    IgxDraggableDirective.prototype.onDragEnd = function (event) {
        event.preventDefault();
        if (this.dragClass) {
            this._renderer.removeClass(this._elementRef.nativeElement, this.dragClass);
        }
    };
    __decorate([
        core_1.Input("igxDraggable"),
        __metadata("design:type", Object)
    ], IgxDraggableDirective.prototype, "data", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxDraggableDirective.prototype, "dragClass", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDraggableDirective.prototype, "effectAllowed", void 0);
    __decorate([
        core_1.HostBinding("draggable"),
        __metadata("design:type", Boolean)
    ], IgxDraggableDirective.prototype, "draggable", void 0);
    __decorate([
        core_1.HostListener("dragstart", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxDraggableDirective.prototype, "onDragStart", null);
    __decorate([
        core_1.HostListener("dragend", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxDraggableDirective.prototype, "onDragEnd", null);
    IgxDraggableDirective = __decorate([
        core_1.Directive({
            selector: "[igxDraggable]"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer2])
    ], IgxDraggableDirective);
    return IgxDraggableDirective;
}());
exports.IgxDraggableDirective = IgxDraggableDirective;
var IgxDroppableDirective = (function () {
    function IgxDroppableDirective(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.dropEffect = "move";
        this.onDrop = new core_1.EventEmitter();
    }
    IgxDroppableDirective.prototype.onDragEnter = function (event) {
        if (this.dropClass) {
            this._renderer.addClass(this._elementRef.nativeElement, this.dropClass);
        }
    };
    IgxDroppableDirective.prototype.onDragLeave = function (event) {
        if (this.dropClass) {
            this._renderer.removeClass(this._elementRef.nativeElement, this.dropClass);
        }
    };
    IgxDroppableDirective.prototype.onDragOver = function (event) {
        if (event.preventDefault) {
            event.preventDefault();
        }
        event.dataTransfer.dropEffect = this.dropEffect;
        return false;
    };
    IgxDroppableDirective.prototype.onDragDrop = function (event) {
        if (event.stopPropagation) {
            event.stopPropagation();
        }
        if (this.dropClass) {
            this._renderer.removeClass(this._elementRef.nativeElement, this.dropClass);
        }
        var eventData = JSON.parse(event.dataTransfer.getData("data"));
        var args = {
            dragData: eventData,
            dropData: this.data,
            event: event
        };
        this.onDrop.emit(args);
    };
    __decorate([
        core_1.Input("igxDroppable"),
        __metadata("design:type", Object)
    ], IgxDroppableDirective.prototype, "data", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxDroppableDirective.prototype, "dropClass", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxDroppableDirective.prototype, "dropEffect", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxDroppableDirective.prototype, "onDrop", void 0);
    __decorate([
        core_1.HostListener("dragenter", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxDroppableDirective.prototype, "onDragEnter", null);
    __decorate([
        core_1.HostListener("dragleave", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxDroppableDirective.prototype, "onDragLeave", null);
    __decorate([
        core_1.HostListener("dragover", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Boolean)
    ], IgxDroppableDirective.prototype, "onDragOver", null);
    __decorate([
        core_1.HostListener("drop", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxDroppableDirective.prototype, "onDragDrop", null);
    IgxDroppableDirective = __decorate([
        core_1.Directive({
            selector: "[igxDroppable]"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer2])
    ], IgxDroppableDirective);
    return IgxDroppableDirective;
}());
exports.IgxDroppableDirective = IgxDroppableDirective;
var IgxDragDropModule = (function () {
    function IgxDragDropModule() {
    }
    IgxDragDropModule = __decorate([
        core_1.NgModule({
            declarations: [IgxDraggableDirective, IgxDroppableDirective, IgxDragDirective],
            exports: [IgxDraggableDirective, IgxDroppableDirective, IgxDragDirective]
        })
    ], IgxDragDropModule);
    return IgxDragDropModule;
}());
exports.IgxDragDropModule = IgxDragDropModule;


/***/ }),
/* 213 */
/***/ (function(module, exports) {

module.exports = "<ng-template #defaultColumn>\r\n    {{ column.header || column.field }}\r\n</ng-template>\r\n\r\n<span class=\"igx-grid__th-title\">\r\n    <ng-container *ngTemplateOutlet=\"column.headerTemplate ? column.headerTemplate : defaultColumn; context: { $implicit: column }\">\r\n    </ng-container>\r\n</span>\r\n\r\n<div class=\"igx-grid__th-icons\">\r\n    <igx-icon class=\"sort-icon\" *ngIf=\"column.sortable\">{{sortingIcon}}</igx-icon>\r\n    <igx-grid-filter [column]=\"column\" *ngIf=\"column.filterable\"></igx-grid-filter>\r\n</div>\r\n\r\n<span [style.cursor]=\"resizeCursor\" #resizeArea\r\n    class=\"igx-grid__th-resize-handle\"\r\n    (dblclick)=\"onResizeAreaDblClick()\">\r\n\r\n    <div *ngIf=\"showResizer\" igxResizer\r\n        class=\"igx-grid__th-resize-line\"\r\n        [style.height.px]=\"resizerHeight\"\r\n        [restrictHResizeMax]=\"restrictResizeMax\"\r\n        [restrictHResizeMin]=\"restrictResizeMin\"\r\n        [resizeEndTimeout]=\"resizeEndTimeout\"\r\n        (resizeEnd)=\"onResize($event)\">\r\n    </div>\r\n\r\n</span>\r\n"

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var api_service_1 = __webpack_require__(10);
var column_component_1 = __webpack_require__(35);
var grid_common_1 = __webpack_require__(14);
var IgxGridSummaryComponent = (function () {
    function IgxGridSummaryComponent(gridAPI, cdr) {
        this.gridAPI = gridAPI;
        this.cdr = cdr;
        this.itemClass = "igx-grid-summary__item";
        this.hiddenItemClass = "igx-grid-summary__item--inactive";
        this.summaryResultClass = "igx-grid-summary-item__result--left-align";
        this.numberSummaryResultClass = "igx-grid-summary-item__result";
    }
    Object.defineProperty(IgxGridSummaryComponent.prototype, "dataType", {
        get: function () {
            return this.column.dataType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "isPinned", {
        get: function () {
            return this.column.pinned;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "isLastPinned", {
        get: function () {
            var pinnedCols = this.gridAPI.get(this.gridID).pinnedColumns;
            if (pinnedCols.length === 0) {
                return false;
            }
            else {
                return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "emptyClass", {
        get: function () {
            return !this.column.hasSummary;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "defaultClass", {
        get: function () {
            return this.column.hasSummary;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "widthPersistenceClass", {
        get: function () {
            return this.column.width !== null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "width", {
        get: function () {
            return this.column.width;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridSummaryComponent.prototype.ngOnInit = function () {
    };
    IgxGridSummaryComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptionOnEdit$) {
            this.subscriptionOnEdit$.unsubscribe();
        }
        if (this.subscriptionOnAdd$) {
            this.subscriptionOnAdd$.unsubscribe();
        }
        if (this.subscriptionOnDelete$) {
            this.subscriptionOnDelete$.unsubscribe();
        }
        if (this.subscriptionOnFilter$) {
            this.subscriptionOnFilter$.unsubscribe();
        }
    };
    IgxGridSummaryComponent.prototype.ngDoCheck = function () {
        this.cdr.detectChanges();
    };
    IgxGridSummaryComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.column.hasSummary) {
            this.subscriptionOnEdit$ = this.gridAPI.get(this.gridID).onEditDone.subscribe(function (editCell) {
                if (editCell.cell) {
                    _this.fieldName = editCell.cell.column.field;
                    _this.clearCache(editCell.cell.column.field);
                }
                else {
                    _this.clearAll();
                }
            });
            this.subscriptionOnFilter$ = this.gridAPI.get(this.gridID).onFilteringDone.subscribe(function (data) {
                _this.fieldName = data.fieldName;
                _this.clearAll();
            });
            this.subscriptionOnAdd$ = this.gridAPI.get(this.gridID).onRowAdded.subscribe(function () { return _this.clearAll(); });
            this.subscriptionOnDelete$ = this.gridAPI.get(this.gridID).onRowDeleted.subscribe(function () { return _this.clearAll(); });
        }
    };
    IgxGridSummaryComponent.prototype.clearCache = function (field) {
        this.gridAPI.remove_summary(this.gridID, field);
    };
    IgxGridSummaryComponent.prototype.clearAll = function () {
        this.gridAPI.remove_summary(this.gridID);
        this.gridAPI.get(this.gridID).markForCheck();
        this.cdr.detectChanges();
    };
    Object.defineProperty(IgxGridSummaryComponent.prototype, "resolveSummaries", {
        get: function () {
            if (this.fieldName) {
                var field = this.fieldName;
                this.fieldName = null;
                this.gridAPI.set_summary_by_column_name(this.gridID, field);
                if (this.column.field === field) {
                    return this.gridAPI.get_summaries(this.gridID).get(field);
                }
                else {
                    return this.gridAPI.get_summaries(this.gridID).get(this.column.field);
                }
            }
            else {
                this.gridAPI.set_summary_by_column_name(this.gridID, this.column.field);
                return this.gridAPI.get_summaries(this.gridID).get(this.column.field);
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxGridSummaryComponent.prototype.summaryValueClass = function (result) {
        if (typeof result === "number") {
            return this.numberSummaryResultClass;
        }
        else {
            return this.summaryResultClass;
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", column_component_1.IgxColumnComponent)
    ], IgxGridSummaryComponent.prototype, "column", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxGridSummaryComponent.prototype, "gridID", void 0);
    __decorate([
        core_1.HostBinding("class.igx-grid-summary--pinned"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridSummaryComponent.prototype, "isPinned", null);
    __decorate([
        core_1.HostBinding("class.igx-grid-summary--pinned-last"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridSummaryComponent.prototype, "isLastPinned", null);
    __decorate([
        core_1.HostBinding("class.igx-grid-summary--empty"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxGridSummaryComponent.prototype, "emptyClass", null);
    __decorate([
        core_1.HostBinding("class.igx-grid-summary"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxGridSummaryComponent.prototype, "defaultClass", null);
    __decorate([
        core_1.HostBinding("class.igx-grid-summary--fw"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxGridSummaryComponent.prototype, "widthPersistenceClass", null);
    __decorate([
        core_1.HostBinding("style.min-width"),
        core_1.HostBinding("style.flex-basis"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxGridSummaryComponent.prototype, "width", null);
    __decorate([
        grid_common_1.autoWire(true),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxGridSummaryComponent.prototype, "ngOnInit", null);
    __decorate([
        grid_common_1.autoWire(true),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxGridSummaryComponent.prototype, "clearCache", null);
    __decorate([
        grid_common_1.autoWire(true),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxGridSummaryComponent.prototype, "clearAll", null);
    IgxGridSummaryComponent = __decorate([
        core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: "igx-grid-summary",
            template: __webpack_require__(215)
        }),
        __metadata("design:paramtypes", [api_service_1.IgxGridAPIService, core_1.ChangeDetectorRef])
    ], IgxGridSummaryComponent);
    return IgxGridSummaryComponent;
}());
exports.IgxGridSummaryComponent = IgxGridSummaryComponent;


/***/ }),
/* 215 */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf=\"column.hasSummary\">\r\n    <ng-container *ngFor=\"let summary of resolveSummaries\">\r\n        <div class=\"{{itemClass}}\">\r\n            <span class=\"igx-grid-summary__label\" title=\"{{ summary.label }}\">{{ summary.label }}</span>\r\n            <span class=\"igx-grid-summary__result\" title=\"{{ summary.summaryResult }}\">{{ summary.summaryResult }}</span>\r\n        </div>\r\n    </ng-container>\r\n</ng-container>\r\n"

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var rxjs_1 = __webpack_require__(18);
var operators_1 = __webpack_require__(36);
var selection_1 = __webpack_require__(28);
var utils_1 = __webpack_require__(27);
var data_util_1 = __webpack_require__(11);
var filtering_expression_interface_1 = __webpack_require__(37);
var sorting_expression_interface_1 = __webpack_require__(26);
var for_of_directive_1 = __webpack_require__(42);
var text_highlight_directive_1 = __webpack_require__(29);
var checkbox_component_1 = __webpack_require__(40);
var api_service_1 = __webpack_require__(10);
var column_component_1 = __webpack_require__(35);
var grid_common_1 = __webpack_require__(14);
var grid_pipes_1 = __webpack_require__(104);
var groupby_row_component_1 = __webpack_require__(105);
var row_component_1 = __webpack_require__(106);
var NEXT_ID = 0;
var DEBOUNCE_TIME = 16;
var DEFAULT_SUMMARY_HEIGHT = 36.36;
var MINIMUM_COLUMN_WIDTH = 136;
var IgxGridComponent = (function () {
    function IgxGridComponent(gridAPI, selectionAPI, elementRef, zone, document, cdr, resolver, differs, viewRef) {
        var _this = this;
        this.gridAPI = gridAPI;
        this.selectionAPI = selectionAPI;
        this.elementRef = elementRef;
        this.zone = zone;
        this.document = document;
        this.cdr = cdr;
        this.resolver = resolver;
        this.differs = differs;
        this.viewRef = viewRef;
        this.data = [];
        this.autoGenerate = false;
        this.id = "igx-grid-" + NEXT_ID++;
        this.filteringLogic = filtering_expression_interface_1.FilteringLogic.And;
        this.groupByIndentation = 30;
        this.groupByDefaultExpanded = true;
        this.evenRowCSS = "";
        this.oddRowCSS = "";
        this.rowHeight = 50;
        this.columnWidth = null;
        this.emptyGridMessage = "No records found.";
        this.onCellClick = new core_1.EventEmitter();
        this.onSelection = new core_1.EventEmitter();
        this.onRowSelectionChange = new core_1.EventEmitter();
        this.onColumnPinning = new core_1.EventEmitter();
        this.onEditDone = new core_1.EventEmitter();
        this.onColumnInit = new core_1.EventEmitter();
        this.onSortingDone = new core_1.EventEmitter();
        this.onFilteringDone = new core_1.EventEmitter();
        this.onPagingDone = new core_1.EventEmitter();
        this.onRowAdded = new core_1.EventEmitter();
        this.onRowDeleted = new core_1.EventEmitter();
        this.onGroupingDone = new core_1.EventEmitter();
        this.onDataPreLoad = new core_1.EventEmitter();
        this.onColumnResized = new core_1.EventEmitter();
        this.onContextMenu = new core_1.EventEmitter();
        this.onDoubleClick = new core_1.EventEmitter();
        this.tabindex = 0;
        this.hostClass = "igx-grid";
        this.hostRole = "grid";
        this.eventBus = new rxjs_1.Subject();
        this.allRowsSelected = false;
        this.lastSearchInfo = {
            searchText: "",
            caseSensitive: false,
            activeMatchIndex: 0,
            matchInfoCache: []
        };
        this.destroy$ = new rxjs_1.Subject();
        this._perPage = 15;
        this._page = 0;
        this._paging = false;
        this._rowSelection = false;
        this._pipeTrigger = 0;
        this._columns = [];
        this._pinnedColumns = [];
        this._unpinnedColumns = [];
        this._filteringLogic = filtering_expression_interface_1.FilteringLogic.And;
        this._filteringExpressions = [];
        this._sortingExpressions = [];
        this._groupingExpressions = [];
        this._groupingExpandState = [];
        this._filteredData = null;
        this._height = "100%";
        this._width = "100%";
        this.resizeHandler = function () {
            _this.calculateGridSizes();
            _this.zone.run(function () { return _this.markForCheck(); });
        };
    }
    Object.defineProperty(IgxGridComponent.prototype, "filteringExpressions", {
        get: function () {
            return this._filteringExpressions;
        },
        set: function (value) {
            this._filteringExpressions = utils_1.cloneArray(value);
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "filteredData", {
        get: function () {
            return this._filteredData;
        },
        set: function (value) {
            var highlightedItem = this.findHiglightedItem();
            this._filteredData = value;
            if (this.rowSelectable) {
                this.updateHeaderChecboxStatusOnFilter(this._filteredData);
            }
            if (highlightedItem !== null) {
                this.restoreHighlight(highlightedItem);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "groupingExpressions", {
        get: function () {
            return this._groupingExpressions;
        },
        set: function (value) {
            this._groupingExpressions = utils_1.cloneArray(value);
            this._applyGrouping();
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "groupingExpansionState", {
        get: function () {
            return this._groupingExpandState;
        },
        set: function (value) {
            this._groupingExpandState = utils_1.cloneArray(value);
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "paging", {
        get: function () {
            return this._paging;
        },
        set: function (value) {
            this._paging = value;
            this._pipeTrigger++;
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "page", {
        get: function () {
            return this._page;
        },
        set: function (val) {
            if (val < 0) {
                return;
            }
            this.onPagingDone.emit({ previous: this._page, current: val });
            this._page = val;
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "perPage", {
        get: function () {
            return this._perPage;
        },
        set: function (val) {
            if (val < 0) {
                return;
            }
            var rowIndex = -1;
            var activeInfo = text_highlight_directive_1.IgxTextHighlightDirective.highlightGroupsMap.get(this.id);
            if (this.lastSearchInfo.searchText !== "") {
                rowIndex = (activeInfo.page * this._perPage) + activeInfo.rowIndex;
            }
            this._perPage = val;
            this.page = 0;
            if (this.lastSearchInfo.searchText !== "") {
                var newRowIndex = rowIndex % this._perPage;
                var newPage = Math.floor(rowIndex / this._perPage);
                text_highlight_directive_1.IgxTextHighlightDirective.setActiveHighlight(this.id, activeInfo.columnIndex, newRowIndex, activeInfo.index, newPage);
                this.rebuildMatchCache();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "rowSelectable", {
        get: function () {
            return this._rowSelection;
        },
        set: function (val) {
            this._rowSelection = val;
            if (this.gridAPI.get(this.id)) {
                this.allRowsSelected = false;
                this.deselectAllRows();
                this.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            var _this = this;
            if (this._height !== value) {
                this._height = value;
                requestAnimationFrame(function () {
                    _this.calculateGridHeight();
                    _this.cdr.markForCheck();
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            var _this = this;
            if (this._width !== value) {
                this._width = value;
                requestAnimationFrame(function () {
                    _this.calculateGridWidth();
                    _this.cdr.markForCheck();
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "headerWidth", {
        get: function () {
            return parseInt(this._width, 10) - 17;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "pipeTrigger", {
        get: function () {
            return this._pipeTrigger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "sortingExpressions", {
        get: function () {
            return this._sortingExpressions;
        },
        set: function (value) {
            var highlightedItem = this.findHiglightedItem();
            this._sortingExpressions = utils_1.cloneArray(value);
            this.cdr.markForCheck();
            if (highlightedItem !== null) {
                this.restoreHighlight(highlightedItem);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "virtualizationState", {
        get: function () {
            return this.verticalScrollContainer.state;
        },
        set: function (state) {
            this.verticalScrollContainer.state = state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "totalItemCount", {
        get: function () {
            return this.verticalScrollContainer.totalItemCount;
        },
        set: function (count) {
            this.verticalScrollContainer.totalItemCount = count;
            this.cdr.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "calcGroupByWidth", {
        get: function () {
            return this.groupingExpressions.length * this.groupByIndentation;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridComponent.prototype.ngOnInit = function () {
        this.gridAPI.register(this);
        this.setEventBusSubscription();
        this.setVerticalScrollSubscription();
        this.columnListDiffer = this.differs.find([]).create(null);
        this.calcWidth = this._width && this._width.indexOf("%") === -1 ? parseInt(this._width, 10) : 0;
        this.calcHeight = 0;
        this.calcRowCheckboxWidth = 0;
    };
    IgxGridComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.autoGenerate) {
            this.autogenerateColumns();
        }
        if (this.groupTemplate) {
            this._groupRowTemplate = this.groupTemplate.template;
        }
        this.initColumns(this.columnList, function (col) { return _this.onColumnInit.emit(col); });
        this.columnListDiffer.diff(this.columnList);
        this.clearSummaryCache();
        this.tfootHeight = this.calcMaxSummaryHeight();
        this._derivePossibleHeight();
        this.markForCheck();
        this.columnList.changes
            .pipe(operators_1.takeUntil(this.destroy$))
            .subscribe(function (change) {
            var diff = _this.columnListDiffer.diff(change);
            if (diff) {
                _this.initColumns(_this.columnList);
                diff.forEachAddedItem(function (record) {
                    _this.clearSummaryCache();
                    _this.calculateGridSizes();
                    _this.onColumnInit.emit(record.item);
                });
                diff.forEachRemovedItem(function (record) {
                    _this.clearSummaryCache();
                    _this.calculateGridSizes();
                    _this.gridAPI.clear_filter(_this.id, record.item.field);
                    _this.gridAPI.clear_sort(_this.id, record.item.field);
                });
            }
            _this.markForCheck();
        });
    };
    IgxGridComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.document.defaultView.addEventListener("resize", _this.resizeHandler);
        });
        this._derivePossibleWidth();
        this.calculateGridSizes();
    };
    IgxGridComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () { return _this.document.defaultView.removeEventListener("resize", _this.resizeHandler); });
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    IgxGridComponent.prototype.dataLoading = function (event) {
        this.onDataPreLoad.emit(event);
    };
    Object.defineProperty(IgxGridComponent.prototype, "nativeElement", {
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "groupRowTemplate", {
        get: function () {
            return this._groupRowTemplate;
        },
        set: function (template) {
            this._groupRowTemplate = template;
            this.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "groupAreaTemplate", {
        get: function () {
            return this._groupAreaTemplate;
        },
        set: function (template) {
            this._groupAreaTemplate = template;
            this.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "calcResizerHeight", {
        get: function () {
            if (this.hasSummarizedColumns) {
                return this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight +
                    this.tfoot.nativeElement.clientHeight;
            }
            return this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "calcPinnedContainerMaxWidth", {
        get: function () {
            return (this.calcWidth * 80) / 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "unpinnedAreaMinWidth", {
        get: function () {
            return (this.calcWidth * 20) / 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "pinnedWidth", {
        get: function () {
            return this.getPinnedWidth();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "unpinnedWidth", {
        get: function () {
            return this.getUnpinnedWidth();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "summariesMargin", {
        get: function () {
            return this.rowSelectable ? this.calcRowCheckboxWidth : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "pinnedColumns", {
        get: function () {
            return this._pinnedColumns.filter(function (col) { return !col.hidden; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "unpinnedColumns", {
        get: function () {
            return this._unpinnedColumns.filter(function (col) { return !col.hidden; }).sort(function (col1, col2) { return col1.index - col2.index; });
        },
        enumerable: true,
        configurable: true
    });
    IgxGridComponent.prototype.getColumnByName = function (name) {
        return this.columnList.find(function (col) { return col.field === name; });
    };
    IgxGridComponent.prototype.getRowByIndex = function (index) {
        return this.gridAPI.get_row_by_index(this.id, index);
    };
    IgxGridComponent.prototype.getRowByKey = function (keyValue) {
        return this.gridAPI.get_row_by_key(this.id, keyValue);
    };
    Object.defineProperty(IgxGridComponent.prototype, "visibleColumns", {
        get: function () {
            return this.columnList.filter(function (col) { return !col.hidden; });
        },
        enumerable: true,
        configurable: true
    });
    IgxGridComponent.prototype.getCellByColumn = function (rowSelector, columnField) {
        return this.gridAPI.get_cell_by_field(this.id, rowSelector, columnField);
    };
    Object.defineProperty(IgxGridComponent.prototype, "totalPages", {
        get: function () {
            if (this.pagingState) {
                return this.pagingState.metadata.countPages;
            }
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "totalRecords", {
        get: function () {
            if (this.pagingState) {
                return this.pagingState.metadata.countRecords;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "isFirstPage", {
        get: function () {
            return this.page === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "isLastPage", {
        get: function () {
            return this.page + 1 >= this.totalPages;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "totalWidth", {
        get: function () {
            var cols = this.visibleColumns;
            var totalWidth = 0;
            var i = 0;
            for (i; i < cols.length; i++) {
                totalWidth += parseInt(cols[i].width, 10) || 0;
            }
            return totalWidth;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridComponent.prototype.nextPage = function () {
        if (!this.isLastPage) {
            this.page += 1;
        }
    };
    IgxGridComponent.prototype.previousPage = function () {
        if (!this.isFirstPage) {
            this.page -= 1;
        }
    };
    IgxGridComponent.prototype.paginate = function (val) {
        if (val < 0) {
            return;
        }
        this.page = val;
    };
    IgxGridComponent.prototype.markForCheck = function () {
        if (this.rowList) {
            this.rowList.forEach(function (row) { return row.cdr.markForCheck(); });
        }
        this.cdr.detectChanges();
    };
    IgxGridComponent.prototype.addRow = function (data) {
        this.data.push(data);
        this.onRowAdded.emit({ data: data });
        this._pipeTrigger++;
        this.cdr.markForCheck();
        this.refreshSearch();
    };
    IgxGridComponent.prototype.deleteRow = function (rowSelector) {
        var row = this.gridAPI.get_row_by_key(this.id, rowSelector);
        if (row) {
            var index = this.data.indexOf(row.rowData);
            if (this.rowSelectable === true) {
                this.deselectRows([row.rowID]);
            }
            this.data.splice(index, 1);
            this.onRowDeleted.emit({ data: row.rowData });
            this._pipeTrigger++;
            this.cdr.markForCheck();
            this.refreshSearch();
        }
    };
    IgxGridComponent.prototype.updateCell = function (value, rowSelector, column) {
        var cell = this.gridAPI.get_cell_by_field(this.id, rowSelector, column);
        if (cell) {
            cell.update(value);
            this.cdr.detectChanges();
            this._pipeTrigger++;
        }
    };
    IgxGridComponent.prototype.updateRow = function (value, rowSelector) {
        var row = this.gridAPI.get_row_by_key(this.id, rowSelector);
        if (row) {
            if (this.primaryKey !== undefined && this.primaryKey !== null) {
                value[this.primaryKey] = row.rowData[this.primaryKey];
            }
            this.gridAPI.update_row(value, this.id, row);
            this._pipeTrigger++;
            this.cdr.markForCheck();
        }
    };
    IgxGridComponent.prototype.sort = function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        if (rest.length === 1 && rest[0] instanceof Array) {
            this._sortMultiple(rest[0]);
        }
        else {
            this._sort(rest[0], rest[1], rest[2]);
        }
    };
    IgxGridComponent.prototype.groupBy = function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        if (rest.length === 1 && rest[0] instanceof Array) {
            this._groupByMultiple(rest[0]);
        }
        else {
            this._groupBy(rest[0], rest[1], rest[2]);
        }
        this.calculateGridSizes();
    };
    IgxGridComponent.prototype.isExpandedGroup = function (group) {
        var state = this._getStateForGroupRow(group);
        return state ? state.expanded : this.groupByDefaultExpanded;
    };
    IgxGridComponent.prototype.toggleGroup = function (groupRow) {
        this._toggleGroup(groupRow);
    };
    IgxGridComponent.prototype.isGroupByRecord = function (record) {
        return record.records && record.records.length;
    };
    IgxGridComponent.prototype.filter = function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        if (rest.length === 1 && rest[0] instanceof Array) {
            this._filterMultiple(rest[0]);
        }
        else {
            this._filter(rest[0], rest[1], rest[2], rest[3]);
        }
    };
    IgxGridComponent.prototype.filterGlobal = function (value, condition, ignoreCase) {
        this.gridAPI.filter_global(this.id, value, condition, ignoreCase);
    };
    IgxGridComponent.prototype.enableSummaries = function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        if (rest.length === 1 && Array.isArray(rest[0])) {
            this._multipleSummaries(rest[0], true);
        }
        else {
            this._summaries(rest[0], true, rest[1]);
        }
        this.tfootHeight = 0;
        this.markForCheck();
        this.calculateGridHeight();
        this.cdr.detectChanges();
    };
    IgxGridComponent.prototype.disableSummaries = function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        if (rest.length === 1 && Array.isArray(rest[0])) {
            this._disableMultipleSummaries(rest[0], false);
        }
        else {
            this._summaries(rest[0], false);
        }
        this.tfootHeight = 0;
        this.markForCheck();
        this.calculateGridHeight();
        this.cdr.detectChanges();
    };
    IgxGridComponent.prototype.clearFilter = function (name) {
        if (!name) {
            this.filteringExpressions = [];
            this.filteredData = null;
            return;
        }
        if (!this.gridAPI.get_column_by_name(this.id, name)) {
            return;
        }
        this.clearSummaryCache();
        this.gridAPI.clear_filter(this.id, name);
    };
    IgxGridComponent.prototype.clearSort = function (name) {
        if (!name) {
            this.sortingExpressions = [];
            return;
        }
        if (!this.gridAPI.get_column_by_name(this.id, name)) {
            return;
        }
        this.gridAPI.clear_sort(this.id, name);
    };
    IgxGridComponent.prototype.clearSummaryCache = function () {
        this.gridAPI.remove_summary(this.id);
    };
    IgxGridComponent.prototype.pinColumn = function (columnName) {
        var col = this.getColumnByName(columnName);
        var colWidth = parseInt(col.width, 10);
        if (col.pinned) {
            return false;
        }
        if (this.getUnpinnedWidth(true) - colWidth < this.unpinnedAreaMinWidth) {
            return false;
        }
        var oldIndex = col.visibleIndex;
        col.pinned = true;
        var index = this._pinnedColumns.length;
        var args = { column: col, insertAtIndex: index };
        this.onColumnPinning.emit(args);
        if (this._pinnedColumns.indexOf(col) === -1) {
            this._pinnedColumns.splice(args.insertAtIndex, 0, col);
            if (this._unpinnedColumns.indexOf(col) !== -1) {
                this._unpinnedColumns.splice(this._unpinnedColumns.indexOf(col), 1);
            }
        }
        this.markForCheck();
        var newIndex = col.visibleIndex;
        col.updateHighlights(oldIndex, newIndex);
        return true;
    };
    IgxGridComponent.prototype.unpinColumn = function (columnName) {
        var col = this.getColumnByName(columnName);
        if (!col.pinned) {
            return false;
        }
        var oldIndex = col.visibleIndex;
        col.pinned = false;
        this._unpinnedColumns.splice(col.index, 0, col);
        if (this._pinnedColumns.indexOf(col) !== -1) {
            this._pinnedColumns.splice(this._pinnedColumns.indexOf(col), 1);
        }
        this.markForCheck();
        var newIndex = col.visibleIndex;
        col.updateHighlights(oldIndex, newIndex);
        return true;
    };
    IgxGridComponent.prototype.reflow = function () {
        this.calculateGridSizes();
    };
    IgxGridComponent.prototype.findNext = function (text, caseSensitive) {
        return this.find(text, 1, caseSensitive);
    };
    IgxGridComponent.prototype.findPrev = function (text, caseSensitive) {
        return this.find(text, -1, caseSensitive);
    };
    IgxGridComponent.prototype.refreshSearch = function (updateActiveInfo) {
        var _this = this;
        if (this.lastSearchInfo.searchText) {
            this.rebuildMatchCache();
            if (updateActiveInfo) {
                var activeInfo_1 = text_highlight_directive_1.IgxTextHighlightDirective.highlightGroupsMap.get(this.id);
                this.lastSearchInfo.matchInfoCache.forEach(function (match, i) {
                    if (match.column === activeInfo_1.columnIndex &&
                        match.row === activeInfo_1.rowIndex &&
                        match.index === activeInfo_1.index &&
                        match.page === activeInfo_1.page) {
                        _this.lastSearchInfo.activeMatchIndex = i;
                    }
                });
            }
            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, false);
        }
        else {
            return 0;
        }
    };
    IgxGridComponent.prototype.clearSearch = function () {
        this.lastSearchInfo = {
            searchText: "",
            caseSensitive: false,
            activeMatchIndex: 0,
            matchInfoCache: []
        };
        this.rowList.forEach(function (row) {
            row.cells.forEach(function (c) {
                c.clearHighlight();
            });
        });
    };
    Object.defineProperty(IgxGridComponent.prototype, "hasGroupableColumns", {
        get: function () {
            return this.columnList.some(function (col) { return col.groupable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "hasSortableColumns", {
        get: function () {
            return this.columnList.some(function (col) { return col.sortable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "hasEditableColumns", {
        get: function () {
            return this.columnList.some(function (col) { return col.editable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "hasFilterableColumns", {
        get: function () {
            return this.columnList.some(function (col) { return col.filterable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "hasSummarizedColumns", {
        get: function () {
            return this.columnList.some(function (col) { return col.hasSummary; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "selectedCells", {
        get: function () {
            if (this.rowList) {
                return this.rowList.map(function (row) { return row.cells.filter(function (cell) { return cell.selected; }); })
                    .reduce(function (a, b) { return a.concat(b); }, []);
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "rowBasedHeight", {
        get: function () {
            if (this.data && this.data.length) {
                return this.data.length * this.rowHeight;
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridComponent.prototype._derivePossibleHeight = function () {
        if ((this._height && this._height.indexOf("%") === -1) || !this._height) {
            return;
        }
        if (!this.nativeElement.parentNode.clientHeight) {
            var viewPortHeight = screen.height;
            this._height = this.rowBasedHeight <= viewPortHeight ? null : viewPortHeight.toString();
        }
        else {
            var parentHeight = this.nativeElement.parentNode.getBoundingClientRect().height;
            this._height = this.rowBasedHeight <= parentHeight ? null : this._height;
        }
        this.calculateGridHeight();
        this.cdr.detectChanges();
    };
    IgxGridComponent.prototype._derivePossibleWidth = function () {
        if (!this.columnWidth) {
            this.columnWidth = this.getPossibleColumnWidth();
            this.initColumns(this.columnList);
        }
        this.calculateGridWidth();
    };
    IgxGridComponent.prototype.calculateGridHeight = function () {
        var computed = this.document.defaultView.getComputedStyle(this.nativeElement);
        if (!this._height) {
            this.calcHeight = null;
            if (this.hasSummarizedColumns && !this.tfootHeight) {
                this.tfootHeight = this.tfoot.nativeElement.firstElementChild ?
                    this.calcMaxSummaryHeight() : 0;
            }
            return;
        }
        if (this._height && this._height.indexOf("%") !== -1) {
            var pagingHeight = 0;
            var groupAreaHeight = 0;
            if (this.paging) {
                pagingHeight = this.paginator.nativeElement.firstElementChild ?
                    this.paginator.nativeElement.clientHeight : 0;
            }
            if (!this.tfootHeight) {
                this.tfootHeight = this.tfoot.nativeElement.firstElementChild ?
                    this.calcMaxSummaryHeight() : 0;
            }
            if (this.groupArea) {
                groupAreaHeight = this.groupArea.nativeElement.offsetHeight;
            }
            this.calcHeight = parseInt(computed.getPropertyValue("height"), 10) -
                this.theadRow.nativeElement.clientHeight -
                this.tfootHeight - pagingHeight - groupAreaHeight -
                this.scr.nativeElement.clientHeight;
        }
        else {
            var pagingHeight = 0;
            var groupAreaHeight = 0;
            if (this.paging) {
                pagingHeight = this.paginator.nativeElement.firstElementChild ?
                    this.paginator.nativeElement.clientHeight : 0;
            }
            if (!this.tfootHeight) {
                this.tfootHeight = this.tfoot.nativeElement.firstElementChild ?
                    this.calcMaxSummaryHeight() : 0;
            }
            if (this.groupArea) {
                groupAreaHeight = this.groupArea.nativeElement.offsetHeight;
            }
            this.calcHeight = parseInt(this._height, 10) -
                this.theadRow.nativeElement.getBoundingClientRect().height -
                this.tfootHeight - pagingHeight - groupAreaHeight -
                this.scr.nativeElement.clientHeight;
        }
    };
    IgxGridComponent.prototype.getPossibleColumnWidth = function () {
        var computedWidth = parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue("width"), 10);
        var maxColumnWidth = Math.max.apply(Math, this.visibleColumns.map(function (col) { return parseInt(col.width, 10); })
            .filter(function (width) { return !isNaN(width); }));
        var sumExistingWidths = this.visibleColumns
            .filter(function (col) { return col.width !== null; })
            .reduce(function (prev, curr) { return prev + parseInt(curr.width, 10); }, 0);
        if (this.rowSelectable) {
            computedWidth -= this.headerCheckboxContainer.nativeElement.clientWidth;
        }
        var visibleColsWithNoWidth = this.visibleColumns.filter(function (col) { return col.width === null; });
        maxColumnWidth = !Number.isFinite(sumExistingWidths) ?
            Math.max(computedWidth / visibleColsWithNoWidth.length, MINIMUM_COLUMN_WIDTH) :
            Math.max((computedWidth - sumExistingWidths) / visibleColsWithNoWidth.length, MINIMUM_COLUMN_WIDTH);
        return maxColumnWidth.toString();
    };
    IgxGridComponent.prototype.calculateGridWidth = function () {
        var computed = this.document.defaultView.getComputedStyle(this.nativeElement);
        if (this._width && this._width.indexOf("%") !== -1) {
            this.calcWidth = parseInt(computed.getPropertyValue("width"), 10);
            return;
        }
        this.calcWidth = parseInt(this._width, 10);
    };
    IgxGridComponent.prototype.calcMaxSummaryHeight = function () {
        var _this = this;
        var maxSummaryLength = 0;
        this.columnList.filter(function (col) { return col.hasSummary; }).forEach(function (column) {
            _this.gridAPI.set_summary_by_column_name(_this.id, column.field);
            var currentLength = _this.gridAPI.get_summaries(_this.id).get(column.field).length;
            if (maxSummaryLength < currentLength) {
                maxSummaryLength = currentLength;
            }
        });
        return maxSummaryLength * (this.tfoot.nativeElement.clientHeight ? this.tfoot.nativeElement.clientHeight : DEFAULT_SUMMARY_HEIGHT);
    };
    IgxGridComponent.prototype.calculateGridSizes = function () {
        this.calculateGridWidth();
        this.cdr.detectChanges();
        this.calculateGridHeight();
        if (this.rowSelectable) {
            this.calcRowCheckboxWidth = this.headerCheckboxContainer.nativeElement.clientWidth;
        }
        this.cdr.detectChanges();
    };
    IgxGridComponent.prototype.getPinnedWidth = function (takeHidden) {
        if (takeHidden === void 0) { takeHidden = false; }
        var fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;
        var sum = 0;
        for (var _i = 0, fc_1 = fc; _i < fc_1.length; _i++) {
            var col = fc_1[_i];
            sum += parseInt(col.width, 10);
        }
        if (this.rowSelectable) {
            sum += this.calcRowCheckboxWidth;
        }
        if (this.groupingExpressions.length > 0) {
            sum += this.calcGroupByWidth;
        }
        return sum;
    };
    IgxGridComponent.prototype.getUnpinnedWidth = function (takeHidden) {
        if (takeHidden === void 0) { takeHidden = false; }
        var width = this._width && this._width.indexOf("%") !== -1 ?
            this.calcWidth :
            parseInt(this._width, 10);
        return width - this.getPinnedWidth(takeHidden);
    };
    IgxGridComponent.prototype._sort = function (name, direction, ignoreCase) {
        if (direction === void 0) { direction = sorting_expression_interface_1.SortingDirection.Asc; }
        if (ignoreCase === void 0) { ignoreCase = true; }
        this.gridAPI.sort(this.id, name, direction, ignoreCase);
    };
    IgxGridComponent.prototype._sortMultiple = function (expressions) {
        this.gridAPI.sort_multiple(this.id, expressions);
    };
    IgxGridComponent.prototype._groupBy = function (name, direction, ignoreCase) {
        if (direction === void 0) { direction = sorting_expression_interface_1.SortingDirection.Asc; }
        if (ignoreCase === void 0) { ignoreCase = true; }
        this.gridAPI.groupBy(this.id, name, direction, ignoreCase);
    };
    IgxGridComponent.prototype._groupByMultiple = function (expressions) {
        this.gridAPI.groupBy_multiple(this.id, expressions);
    };
    IgxGridComponent.prototype._getStateForGroupRow = function (groupRow) {
        return this.gridAPI.groupBy_get_expanded_for_group(this.id, groupRow);
    };
    IgxGridComponent.prototype._toggleGroup = function (groupRow) {
        this.gridAPI.groupBy_toggle_group(this.id, groupRow);
    };
    IgxGridComponent.prototype._applyGrouping = function () {
        this.gridAPI.sort_multiple(this.id, this._groupingExpressions);
    };
    IgxGridComponent.prototype._filter = function (name, value, condition, ignoreCase) {
        var col = this.gridAPI.get_column_by_name(this.id, name);
        if (col) {
            this.gridAPI
                .filter(this.id, name, value, condition || col.filteringCondition, ignoreCase || col.filteringIgnoreCase);
        }
        else {
            this.gridAPI.filter(this.id, name, value, condition, ignoreCase);
        }
    };
    IgxGridComponent.prototype._filterMultiple = function (expressions) {
        this.gridAPI.filter_multiple(this.id, expressions);
    };
    IgxGridComponent.prototype._summaries = function (fieldName, hasSummary, summaryOperand) {
        var column = this.gridAPI.get_column_by_name(this.id, fieldName);
        column.hasSummary = hasSummary;
        if (summaryOperand) {
            column.summaries = summaryOperand;
        }
    };
    IgxGridComponent.prototype._multipleSummaries = function (expressions, hasSummary) {
        var _this = this;
        expressions.forEach(function (element) {
            _this._summaries(element.fieldName, hasSummary, element.customSummary);
        });
    };
    IgxGridComponent.prototype._disableMultipleSummaries = function (expressions, hasSummary) {
        var _this = this;
        expressions.forEach(function (column) { _this._summaries(column, false); });
    };
    IgxGridComponent.prototype.resolveDataTypes = function (rec) {
        if (typeof rec === "number") {
            return data_util_1.DataType.Number;
        }
        else if (typeof rec === "boolean") {
            return data_util_1.DataType.Boolean;
        }
        else if (typeof rec === "object" && rec instanceof Date) {
            return data_util_1.DataType.Date;
        }
        return data_util_1.DataType.String;
    };
    IgxGridComponent.prototype.autogenerateColumns = function () {
        var _this = this;
        var factory = this.resolver.resolveComponentFactory(column_component_1.IgxColumnComponent);
        var fields = Object.keys(this.data[0]);
        var columns = [];
        fields.forEach(function (field) {
            var ref = _this.viewRef.createComponent(factory);
            ref.instance.field = field;
            ref.instance.dataType = _this.resolveDataTypes(_this.data[0][field]);
            ref.changeDetectorRef.detectChanges();
            columns.push(ref.instance);
        });
        this.columnList.reset(columns);
    };
    IgxGridComponent.prototype.initColumns = function (collection, cb) {
        var _this = this;
        if (cb === void 0) { cb = null; }
        collection.forEach(function (column, index) {
            column.gridID = _this.id;
            column.index = index;
            if (!column.width) {
                column.width = _this.columnWidth;
            }
            if (cb) {
                cb(column);
            }
        });
        this._columns = this.columnList.toArray();
        this._pinnedColumns = this.columnList.filter(function (c) { return c.pinned; });
        this._unpinnedColumns = this.columnList.filter(function (c) { return !c.pinned; });
    };
    IgxGridComponent.prototype.setEventBusSubscription = function () {
        var _this = this;
        this.eventBus.pipe(operators_1.debounceTime(DEBOUNCE_TIME), operators_1.takeUntil(this.destroy$)).subscribe(function () { return _this.cdr.detectChanges(); });
    };
    IgxGridComponent.prototype.setVerticalScrollSubscription = function () {
        var _this = this;
        this.verticalScrollContainer.onChunkLoad.pipe(operators_1.takeUntil(this.destroy$), operators_1.take(1), operators_1.merge(rxjs_1.of({})), operators_1.delay(DEBOUNCE_TIME), operators_1.repeat()).subscribe(function () {
            if (_this.cellInEditMode) {
                _this.cellInEditMode.inEditMode = false;
            }
            _this.eventBus.next();
        });
    };
    IgxGridComponent.prototype.onHeaderCheckboxClick = function (event) {
        this.allRowsSelected = event.checked;
        var newSelection = event.checked ?
            this.filteredData ?
                this.selectionAPI.append_items(this.id, this.selectionAPI.get_all_ids(this._filteredData, this.primaryKey)) :
                this.selectionAPI.get_all_ids(this.data, this.primaryKey) :
            this.filteredData ?
                this.selectionAPI.subtract_items(this.id, this.selectionAPI.get_all_ids(this._filteredData, this.primaryKey)) :
                [];
        this.triggerRowSelectionChange(newSelection, null, event, event.checked);
        this.checkHeaderChecboxStatus(event.checked);
    };
    Object.defineProperty(IgxGridComponent.prototype, "headerCheckboxAriaLabel", {
        get: function () {
            return this._filteringExpressions.length > 0 ?
                this.headerCheckbox && this.headerCheckbox.checked ? "Deselect all filtered" : "Select all filtered" :
                this.headerCheckbox && this.headerCheckbox.checked ? "Deselect all" : "Select all";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridComponent.prototype, "template", {
        get: function () {
            if (this.filteredData && this.filteredData.length === 0) {
                return this.emptyGridTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxGridComponent.prototype.checkHeaderChecboxStatus = function (headerStatus) {
        if (headerStatus === undefined) {
            this.allRowsSelected = this.selectionAPI.are_all_selected(this.id, this.data);
            if (this.headerCheckbox) {
                this.headerCheckbox.indeterminate = !this.allRowsSelected && !this.selectionAPI.are_none_selected(this.id);
                if (!this.headerCheckbox.indeterminate) {
                    this.headerCheckbox.checked = this.selectionAPI.are_all_selected(this.id, this.data);
                }
            }
            this.cdr.markForCheck();
        }
        else if (this.headerCheckbox) {
            this.headerCheckbox.checked = headerStatus !== undefined ? headerStatus : false;
        }
    };
    IgxGridComponent.prototype.filteredItemsStatus = function (componentID, filteredData, primaryKey) {
        var currSelection = this.selectionAPI.get_selection(componentID);
        var atLeastOneSelected = false;
        var notAllSelected = false;
        if (currSelection) {
            for (var _i = 0, _a = Object.keys(filteredData); _i < _a.length; _i++) {
                var key = _a[_i];
                var dataItem = primaryKey ? filteredData[key][primaryKey] : filteredData[key];
                if (currSelection.indexOf(dataItem) !== -1) {
                    atLeastOneSelected = true;
                    if (notAllSelected) {
                        return "indeterminate";
                    }
                }
                else {
                    notAllSelected = true;
                    if (atLeastOneSelected) {
                        return "indeterminate";
                    }
                }
            }
        }
        return atLeastOneSelected ? "allSelected" : "noneSelected";
    };
    IgxGridComponent.prototype.updateHeaderChecboxStatusOnFilter = function (data) {
        if (!data) {
            data = this.data;
        }
        switch (this.filteredItemsStatus(this.id, data)) {
            case "allSelected": {
                if (!this.allRowsSelected) {
                    this.allRowsSelected = true;
                }
                if (this.headerCheckbox.indeterminate) {
                    this.headerCheckbox.indeterminate = false;
                }
                break;
            }
            case "noneSelected": {
                if (this.allRowsSelected) {
                    this.allRowsSelected = false;
                }
                if (this.headerCheckbox.indeterminate) {
                    this.headerCheckbox.indeterminate = false;
                }
                break;
            }
            default: {
                if (!this.headerCheckbox.indeterminate) {
                    this.headerCheckbox.indeterminate = true;
                }
                if (this.allRowsSelected) {
                    this.allRowsSelected = false;
                }
                break;
            }
        }
    };
    IgxGridComponent.prototype.selectedRows = function () {
        return this.selectionAPI.get_selection(this.id) || [];
    };
    IgxGridComponent.prototype.selectRows = function (rowIDs, clearCurrentSelection) {
        var newSelection = clearCurrentSelection ? rowIDs : this.selectionAPI.select_items(this.id, rowIDs);
        this.triggerRowSelectionChange(newSelection);
    };
    IgxGridComponent.prototype.deselectRows = function (rowIDs) {
        var newSelection = this.selectionAPI.deselect_items(this.id, rowIDs);
        this.triggerRowSelectionChange(newSelection);
    };
    IgxGridComponent.prototype.selectAllRows = function () {
        this.triggerRowSelectionChange(this.selectionAPI.get_all_ids(this.data, this.primaryKey));
    };
    IgxGridComponent.prototype.deselectAllRows = function () {
        this.triggerRowSelectionChange([]);
    };
    IgxGridComponent.prototype.triggerRowSelectionChange = function (newSelection, row, event, headerStatus) {
        var oldSelection = this.selectionAPI.get_selection(this.id);
        var args = { oldSelection: oldSelection, newSelection: newSelection, row: row, event: event };
        this.onRowSelectionChange.emit(args);
        this.selectionAPI.set_selection(this.id, args.newSelection);
        this.checkHeaderChecboxStatus(headerStatus);
    };
    IgxGridComponent.prototype.navigateDown = function (rowIndex, columnIndex) {
        var row = this.gridAPI.get_row_by_index(this.id, rowIndex);
        var target = row instanceof groupby_row_component_1.IgxGridGroupByRowComponent ?
            row.groupContent :
            this.gridAPI.get_cell_by_visible_index(this.id, rowIndex, columnIndex);
        var verticalScroll = this.verticalScrollContainer.getVerticalScroll();
        if (!verticalScroll && !target) {
            return;
        }
        if (target) {
            var containerHeight = this.calcHeight ?
                Math.ceil(this.calcHeight) :
                null;
            var containerTopOffset = parseInt(this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);
            var targetEndTopOffset = row.element.nativeElement.offsetTop + this.rowHeight + containerTopOffset;
            if (containerHeight && targetEndTopOffset > containerHeight) {
                var scrollAmount = targetEndTopOffset - containerHeight;
                this.verticalScrollContainer.addScrollTop(scrollAmount);
                this._focusNextCell(rowIndex, columnIndex);
            }
            else {
                target.nativeElement.focus();
            }
        }
        else {
            var containerHeight = this.calcHeight;
            var contentHeight = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.offsetHeight;
            var scrollOffset = parseInt(this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);
            var lastRowOffset = contentHeight + scrollOffset - this.calcHeight;
            var scrollAmount = this.rowHeight + lastRowOffset;
            this.verticalScrollContainer.addScrollTop(scrollAmount);
            this._focusNextCell(rowIndex, columnIndex);
        }
    };
    IgxGridComponent.prototype.navigateUp = function (rowIndex, columnIndex) {
        var row = this.gridAPI.get_row_by_index(this.id, rowIndex);
        var target = row instanceof groupby_row_component_1.IgxGridGroupByRowComponent ?
            row.groupContent :
            this.gridAPI.get_cell_by_visible_index(this.id, rowIndex, columnIndex);
        var verticalScroll = this.verticalScrollContainer.getVerticalScroll();
        if (!verticalScroll && !target) {
            return;
        }
        if (target) {
            var containerTopOffset = parseInt(row.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);
            if (this.rowHeight > -containerTopOffset
                && verticalScroll.scrollTop
                && row.element.nativeElement.offsetTop < this.rowHeight) {
                this.verticalScrollContainer.addScrollTop(-this.rowHeight);
                this._focusNextCell(rowIndex, columnIndex);
            }
            target.nativeElement.focus();
        }
        else {
            var scrollOffset = -parseInt(this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);
            var scrollAmount = this.rowHeight + scrollOffset;
            this.verticalScrollContainer.addScrollTop(-scrollAmount);
            this._focusNextCell(rowIndex, columnIndex);
        }
    };
    IgxGridComponent.prototype._focusNextCell = function (rowIndex, columnIndex, dir) {
        var _this = this;
        var row = this.gridAPI.get_row_by_index(this.id, rowIndex);
        var virtualDir = dir !== undefined ? row.virtDirRow : this.verticalScrollContainer;
        this.subscribeNext(virtualDir, function () {
            _this.cdr.detectChanges();
            var target;
            row = _this.gridAPI.get_row_by_index(_this.id, rowIndex);
            target = _this.gridAPI.get_cell_by_visible_index(_this.id, rowIndex, columnIndex);
            if (!target) {
                if (dir) {
                    target = dir === "left" ? row.cells.first : row.cells.last;
                }
                else if (row instanceof groupby_row_component_1.IgxGridGroupByRowComponent) {
                    target = row.groupContent;
                }
                else if (row) {
                    target = row.cells.first;
                }
                else {
                    return;
                }
            }
            target.nativeElement.focus();
        });
    };
    IgxGridComponent.prototype.subscribeNext = function (virtualContainer, callback) {
        virtualContainer.onChunkLoad.pipe(operators_1.take(1)).subscribe({
            next: function (e) {
                callback(e);
            }
        });
    };
    IgxGridComponent.prototype.trackColumnChanges = function (index, col) {
        return col.field + col.width;
    };
    IgxGridComponent.prototype.find = function (text, increment, caseSensitive, scroll) {
        if (!this.rowList) {
            return 0;
        }
        if (this.cellInEditMode) {
            this.cellInEditMode.inEditMode = false;
        }
        if (!text) {
            this.clearSearch();
            return 0;
        }
        var caseSensitiveResolved = caseSensitive ? true : false;
        var rebuildCache = false;
        if (this.lastSearchInfo.searchText !== text || this.lastSearchInfo.caseSensitive !== caseSensitiveResolved) {
            this.lastSearchInfo = {
                searchText: text,
                activeMatchIndex: 0,
                caseSensitive: caseSensitiveResolved,
                matchInfoCache: []
            };
            rebuildCache = true;
        }
        else {
            this.lastSearchInfo.activeMatchIndex += increment;
        }
        if (rebuildCache) {
            this.rowList.forEach(function (row) {
                row.cells.forEach(function (c) {
                    c.highlightText(text, caseSensitiveResolved);
                });
            });
            this.rebuildMatchCache();
        }
        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {
            this.lastSearchInfo.activeMatchIndex = 0;
        }
        else if (this.lastSearchInfo.activeMatchIndex < 0) {
            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;
        }
        if (this.lastSearchInfo.matchInfoCache.length) {
            var matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];
            var row = this.paging ? matchInfo.row % this.perPage : matchInfo.row;
            text_highlight_directive_1.IgxTextHighlightDirective.setActiveHighlight(this.id, matchInfo.column, row, matchInfo.index, matchInfo.page);
            if (scroll !== false) {
                this.scrollTo(matchInfo.row, matchInfo.column, matchInfo.page);
            }
        }
        else {
            text_highlight_directive_1.IgxTextHighlightDirective.setActiveHighlight(this.id, -1, -1, -1, -1);
        }
        return this.lastSearchInfo.matchInfoCache.length;
    };
    Object.defineProperty(IgxGridComponent.prototype, "filteredSortedData", {
        get: function () {
            var data = this.filteredData ? this.filteredData : this.data;
            if (this.sortingExpressions &&
                this.sortingExpressions.length > 0) {
                var sortingPipe = new grid_pipes_1.IgxGridSortingPipe(this.gridAPI);
                data = sortingPipe.transform(data, this.sortingExpressions, this.id, -1);
            }
            return data;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridComponent.prototype.scrollTo = function (row, column, page) {
        if (this.paging) {
            this.page = page;
        }
        this.scrollDirective(this.verticalScrollContainer, row);
        if (this.pinnedColumns.length) {
            if (column >= this.pinnedColumns.length) {
                column -= this.pinnedColumns.length;
                this.scrollDirective(this.rowList.first.virtDirRow, column);
            }
        }
        else {
            this.scrollDirective(this.rowList.first.virtDirRow, column);
        }
    };
    IgxGridComponent.prototype.scrollDirective = function (directive, goal) {
        var state = directive.state;
        var start = state.startIndex;
        var size = state.chunkSize - 1;
        if (start >= goal) {
            directive.scrollTo(goal);
        }
        else if (start + size <= goal) {
            directive.scrollTo(goal - size + 1);
        }
    };
    IgxGridComponent.prototype.rebuildMatchCache = function () {
        var _this = this;
        this.lastSearchInfo.matchInfoCache = [];
        var caseSensitive = this.lastSearchInfo.caseSensitive;
        var searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();
        var data = this.filteredSortedData;
        var keys = this.visibleColumns.sort(function (c1, c2) { return c1.visibleIndex - c2.visibleIndex; }).map(function (c) { return c.field; });
        data.forEach(function (dataRow, i) {
            var rowIndex = _this.paging ? i % _this.perPage : i;
            keys.forEach(function (key, j) {
                var value = dataRow[key];
                if (value !== undefined && value !== null) {
                    var searchValue = caseSensitive ? String(value) : String(value).toLowerCase();
                    var occurenceIndex = 0;
                    var searchIndex = searchValue.indexOf(searchText);
                    var pageIndex = _this.paging ? Math.floor(i / _this.perPage) : 0;
                    while (searchIndex !== -1) {
                        _this.lastSearchInfo.matchInfoCache.push({
                            row: rowIndex,
                            column: j,
                            page: pageIndex,
                            index: occurenceIndex++
                        });
                        searchValue = searchValue.substring(searchIndex + searchText.length);
                        searchIndex = searchValue.indexOf(searchText);
                    }
                }
            });
        });
    };
    IgxGridComponent.prototype.findHiglightedItem = function () {
        if (this.lastSearchInfo.searchText !== "") {
            var activeInfo = text_highlight_directive_1.IgxTextHighlightDirective.highlightGroupsMap.get(this.id);
            var activeIndex = (activeInfo.page * this.perPage) + activeInfo.rowIndex;
            var data = this.filteredSortedData;
            return data[activeIndex];
        }
        else {
            return null;
        }
    };
    IgxGridComponent.prototype.restoreHighlight = function (highlightedItem) {
        var _this = this;
        var activeInfo = text_highlight_directive_1.IgxTextHighlightDirective.highlightGroupsMap.get(this.id);
        var data = this.filteredSortedData;
        var rowIndex = data.indexOf(highlightedItem);
        var page = this.paging ? Math.floor(rowIndex / this.perPage) : 0;
        var row = this.paging ? rowIndex % this.perPage : rowIndex;
        this.rebuildMatchCache();
        if (rowIndex !== -1) {
            text_highlight_directive_1.IgxTextHighlightDirective.setActiveHighlight(this.id, activeInfo.columnIndex, row, activeInfo.index, page);
            this.lastSearchInfo.matchInfoCache.forEach(function (match, i) {
                if (match.column === activeInfo.columnIndex &&
                    match.row === rowIndex &&
                    match.index === activeInfo.index &&
                    match.page === page) {
                    _this.lastSearchInfo.activeMatchIndex = i;
                }
            });
        }
        else {
            this.lastSearchInfo.activeMatchIndex = 0;
            this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, false);
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "data", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "autoGenerate", void 0);
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "filteringLogic", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxGridComponent.prototype, "filteringExpressions", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "groupByIndentation", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxGridComponent.prototype, "groupingExpressions", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxGridComponent.prototype, "groupingExpansionState", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "groupByDefaultExpanded", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxGridComponent.prototype, "paging", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], IgxGridComponent.prototype, "page", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], IgxGridComponent.prototype, "perPage", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxGridComponent.prototype, "paginationTemplate", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxGridComponent.prototype, "rowSelectable", null);
    __decorate([
        core_1.HostBinding("style.height"),
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxGridComponent.prototype, "height", null);
    __decorate([
        core_1.HostBinding("style.width"),
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxGridComponent.prototype, "width", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "evenRowCSS", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "oddRowCSS", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "rowHeight", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxGridComponent.prototype, "columnWidth", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "primaryKey", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "emptyGridMessage", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onCellClick", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onSelection", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onRowSelectionChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onColumnPinning", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onEditDone", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onColumnInit", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onSortingDone", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onFilteringDone", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onPagingDone", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onRowAdded", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onRowDeleted", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onGroupingDone", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onDataPreLoad", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onColumnResized", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onContextMenu", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "onDoubleClick", void 0);
    __decorate([
        core_1.ContentChildren(column_component_1.IgxColumnComponent, { read: column_component_1.IgxColumnComponent }),
        __metadata("design:type", core_1.QueryList)
    ], IgxGridComponent.prototype, "columnList", void 0);
    __decorate([
        core_1.ContentChild(grid_common_1.IgxGroupByRowTemplateDirective, { read: grid_common_1.IgxGroupByRowTemplateDirective }),
        __metadata("design:type", grid_common_1.IgxGroupByRowTemplateDirective)
    ], IgxGridComponent.prototype, "groupTemplate", void 0);
    __decorate([
        core_1.ViewChildren("row"),
        __metadata("design:type", core_1.QueryList)
    ], IgxGridComponent.prototype, "rowList", void 0);
    __decorate([
        core_1.ViewChildren(row_component_1.IgxGridRowComponent, { read: row_component_1.IgxGridRowComponent }),
        __metadata("design:type", core_1.QueryList)
    ], IgxGridComponent.prototype, "dataRowList", void 0);
    __decorate([
        core_1.ViewChildren(groupby_row_component_1.IgxGridGroupByRowComponent, { read: groupby_row_component_1.IgxGridGroupByRowComponent }),
        __metadata("design:type", core_1.QueryList)
    ], IgxGridComponent.prototype, "groupedRowList", void 0);
    __decorate([
        core_1.ViewChild("emptyGrid", { read: core_1.TemplateRef }),
        __metadata("design:type", core_1.TemplateRef)
    ], IgxGridComponent.prototype, "emptyGridTemplate", void 0);
    __decorate([
        core_1.ViewChild("scrollContainer", { read: for_of_directive_1.IgxForOfDirective }),
        __metadata("design:type", for_of_directive_1.IgxForOfDirective)
    ], IgxGridComponent.prototype, "parentVirtDir", void 0);
    __decorate([
        core_1.ViewChild("verticalScrollContainer", { read: for_of_directive_1.IgxForOfDirective }),
        __metadata("design:type", for_of_directive_1.IgxForOfDirective)
    ], IgxGridComponent.prototype, "verticalScrollContainer", void 0);
    __decorate([
        core_1.ViewChild("scr", { read: core_1.ElementRef }),
        __metadata("design:type", core_1.ElementRef)
    ], IgxGridComponent.prototype, "scr", void 0);
    __decorate([
        core_1.ViewChild("paginator", { read: core_1.ElementRef }),
        __metadata("design:type", core_1.ElementRef)
    ], IgxGridComponent.prototype, "paginator", void 0);
    __decorate([
        core_1.ViewChild("headerContainer", { read: for_of_directive_1.IgxForOfDirective }),
        __metadata("design:type", for_of_directive_1.IgxForOfDirective)
    ], IgxGridComponent.prototype, "headerContainer", void 0);
    __decorate([
        core_1.ViewChild("headerCheckboxContainer"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxGridComponent.prototype, "headerCheckboxContainer", void 0);
    __decorate([
        core_1.ViewChild("headerCheckbox", { read: checkbox_component_1.IgxCheckboxComponent }),
        __metadata("design:type", checkbox_component_1.IgxCheckboxComponent)
    ], IgxGridComponent.prototype, "headerCheckbox", void 0);
    __decorate([
        core_1.ViewChild("groupArea"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxGridComponent.prototype, "groupArea", void 0);
    __decorate([
        core_1.ViewChild("theadRow"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxGridComponent.prototype, "theadRow", void 0);
    __decorate([
        core_1.ViewChild("tbody"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxGridComponent.prototype, "tbody", void 0);
    __decorate([
        core_1.ViewChild("tfoot"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxGridComponent.prototype, "tfoot", void 0);
    __decorate([
        core_1.HostBinding("attr.tabindex"),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "tabindex", void 0);
    __decorate([
        core_1.HostBinding("attr.class"),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "hostClass", void 0);
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxGridComponent.prototype, "hostRole", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxGridComponent.prototype, "sortingExpressions", null);
    IgxGridComponent = __decorate([
        core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false,
            selector: "igx-grid",
            template: __webpack_require__(219)
        }),
        __param(4, core_1.Inject(common_1.DOCUMENT)),
        __metadata("design:paramtypes", [api_service_1.IgxGridAPIService,
            selection_1.IgxSelectionAPIService,
            core_1.ElementRef,
            core_1.NgZone, Object, core_1.ChangeDetectorRef,
            core_1.ComponentFactoryResolver,
            core_1.IterableDiffers,
            core_1.ViewContainerRef])
    ], IgxGridComponent);
    return IgxGridComponent;
}());
exports.IgxGridComponent = IgxGridComponent;


/***/ }),
/* 217 */
/***/ (function(module, exports) {

module.exports = "<ng-container [style.padding-left]=\"padding\" #defaultGroupRow (focus)=\"onFocus()\" (blur)=\"onBlur()\">\r\n    <div class=\"igx-grid__indicator-grouping\" [style.min-width.px]=\"grid.calcGroupByWidth\" [tabIndex]=\"tabindex\">    \r\n        <span (click)=\"toggle()\">\r\n            <igx-icon *ngIf=\"!expanded\" fontSet=\"material\" name=\"expand_less\"></igx-icon>\r\n            <igx-icon *ngIf=\"expanded\" fontSet=\"material\" name=\"expand_more\"></igx-icon>\r\n        </span>\r\n    </div>\r\n<div [tabIndex]=\"tabindex\" class=\"igx-grid__groupContent\" #groupContent (focus)=\"onFocus()\" (blur)=\"onBlur()\">\r\n    <ng-container *ngTemplateOutlet=\"grid.groupRowTemplate ? grid.groupRowTemplate : defaultGroupByTemplate; context: { $implicit: groupRow }\">\r\n    </ng-container>\r\n</div>\r\n<ng-template #defaultGroupByTemplate>\r\n    <span class=\"igx-grid__groupLabel\">\r\n        <igx-icon fontSet=\"material\" name=\"group_work\" color=\"#0099FF\">\r\n        </igx-icon>\r\n        <span class=\"igx-grid__groupField\">\r\n            {{ groupRow.expression.fieldName }}:\r\n        </span>\r\n        {{ groupRow.value }}        \r\n    </span>\r\n    <igx-badge [value]=\"groupRow.records.length\" class='igx-grid__groupCount' class='igx-grid__groupCount'></igx-badge>\r\n</ng-template>    \r\n</ng-container>\r\n"

/***/ }),
/* 218 */
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf=\"grid.groupingExpressions.length > 0\">\r\n        <div class=\"igx-grid__groupIndentation\" [style.min-width.px]=\"grid.calcGroupByWidth\">               \r\n        </div>\r\n</ng-container>\r\n<ng-container *ngIf=\"rowSelectable\">\r\n    <div class=\"igx-grid__cbx-selection\">\r\n        <igx-checkbox [checked]=\"isSelected\" (change)=\"onCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"rowCheckboxAriaLabel\"></igx-checkbox>\r\n    </div>\r\n</ng-container>\r\n<ng-container *ngIf=\"pinnedColumns.length > 0\">\r\n    <igx-grid-cell *ngFor=\"let col of pinnedColumns\" [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\"></igx-grid-cell>\r\n</ng-container>\r\n<ng-template igxFor let-col [igxForOf]=\"unpinnedColumns\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]='grid.unpinnedWidth' [igxForTrackBy]='grid.trackColumnChanges' #igxDirRef>\r\n    <igx-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\"></igx-grid-cell>\r\n</ng-template>\r\n"

/***/ }),
/* 219 */
/***/ (function(module, exports) {

module.exports = "<ng-template #defaultPager let-api>\r\n        <button [disabled]=\"api.isFirstPage\" (click)=\"api.paginate(0)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\r\n            <igx-icon fontSet=\"material\" name=\"first_page\"></igx-icon>\r\n        </button>\r\n        <button [disabled]=\"api.isFirstPage\" (click)=\"api.previousPage()\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\r\n            <igx-icon fontSet=\"material\" name=\"chevron_left\"></igx-icon>\r\n        </button>\r\n        <span>{{ api.page + 1 }} of {{ api.totalPages }}</span>\r\n        <button [disabled]=\"api.isLastPage\" (click)=\"api.nextPage()\" igxRipple igxRippleCentered=\"true\" igxButton=\"icon\">\r\n            <igx-icon fontSet=\"material\" name=\"chevron_right\"></igx-icon>\r\n        </button>\r\n        <button [disabled]=\"api.isLastPage\" (click)=\"api.paginate(api.totalPages - 1)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\r\n            <igx-icon fontSet=\"material\" name=\"last_page\"></igx-icon>\r\n        </button>\r\n        <select style=\"margin-left: 1rem;\" (change)=\"api.perPage = $event.target.value\">\r\n            <option [value]=\"val\" [selected]=\"api.perPage == val\" *ngFor=\"let val of [5, 10, 15, 25, 50, 100, 500]\">{{ val }}</option>\r\n        </select>\r\n</ng-template>\r\n\r\n<div class=\"igx-grouparea igx-grid__grouparea\" *ngIf=\"groupingExpressions.length > 0 || hasGroupableColumns\" #groupArea>\r\n    <span>Drag a column header and drop it here to group by that column</span>\r\n</div>\r\n\r\n<div class=\"igx-grid__thead\" role=\"rowgroup\" [style.width.px]='calcWidth' #theadRow>\r\n    <div class=\"igx-grid__tr\" role=\"row\">\r\n        <ng-container *ngIf=\"groupingExpressions.length > 0\">\r\n            <div class=\"igx-grid__groupIndentation\" [style.min-width.px]=\"calcGroupByWidth\">\r\n            </div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"rowSelectable\">\r\n            <div class=\"igx-grid__cbx-selection\" #headerCheckboxContainer>\r\n                <igx-checkbox [checked]=\"allRowsSelected\" (change)=\"onHeaderCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"headerCheckboxAriaLabel\" #headerCheckbox></igx-checkbox>\r\n            </div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"pinnedColumns.length > 0\">\r\n            <igx-grid-header [gridID]=\"id\" *ngFor=\"let col of pinnedColumns\" [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\"></igx-grid-header>\r\n        </ng-container>\r\n        <ng-template igxFor let-col [igxForOf]=\"unpinnedColumns\" [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\"\r\n            [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges' #headerContainer>\r\n            <igx-grid-header [gridID]=\"id\" [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-header>\r\n        </ng-template>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"igx-grid__tbody\" role=\"rowgroup\" [style.height.px]='calcHeight' [style.width.px]='calcWidth' #tbody>\r\n    <ng-template igxFor let-rowData [igxForOf]=\"data | gridFiltering:filteringExpressions:filteringLogic:id:pipeTrigger\r\n    | gridSort:sortingExpressions:id:pipeTrigger\r\n    | gridPreGroupBy:groupingExpressions:groupingExpansionState:groupByDefaultExpanded:id:pipeTrigger\r\n    | gridPaging:page:perPage:id:pipeTrigger\r\n    | gridPostGroupBy:groupingExpressions:groupingExpansionState:groupByDefaultExpanded:id:pipeTrigger\" let-rowIndex=\"index\" [igxForScrollOrientation]=\"'vertical'\"\r\n    [igxForContainerSize]='calcHeight' [igxForItemSize]=\"rowHeight\" #verticalScrollContainer (onChunkPreload)=\"dataLoading($event)\">\r\n        <ng-container *ngIf=\"isGroupByRecord(rowData); else record_template\">\r\n            <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row>\r\n            </igx-grid-groupby-row>\r\n        </ng-container>\r\n        <ng-template #record_template>\r\n            <igx-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [rowData]=\"rowData\" #row>\r\n            </igx-grid-row>\r\n        </ng-template>\r\n    </ng-template>\r\n    <ng-container *ngTemplateOutlet=\"template\"></ng-container>\r\n</div>\r\n\r\n\r\n<div class=\"igx-grid__tfoot\" role=\"rowgroup\" [style.width.px]='calcWidth' #tfoot>\r\n    <div *ngIf=\"hasSummarizedColumns\" class=\"igx-grid__tr\" [style.height.px]=\"tfootHeight\" [style.marginLeft.px]=\"summariesMargin\" role=\"row\">\r\n        <ng-container *ngIf=\"pinnedColumns.length > 0\">\r\n            <igx-grid-summary [gridID]=\"id\" *ngFor=\"let col of pinnedColumns\"  [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-summary>\r\n        </ng-container>\r\n        <ng-template igxFor let-col [igxForOf]=\"unpinnedColumns\" [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\" [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges' #summaryContainer>\r\n            <igx-grid-summary [gridID]=\"id\" [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-summary>\r\n        </ng-template>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"igx-grid__scroll\" [style.height]=\"'18px'\" #scr [hidden]=\"calcWidth - totalWidth >= 0\">\r\n    <div class=\"igx-grid__scroll-start\" [style.width.px]='pinnedWidth' [hidden]=\"pinnedWidth === 0\"></div>\r\n    <div class=\"igx-grid__scroll-main\" [style.width.px]='unpinnedWidth'>\r\n        <ng-template igxFor [igxForOf]='[]' #scrollContainer>\r\n        </ng-template>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"igx-paginator igx-grid-paginator\" *ngIf=\"paging\" #paginator>\r\n    <ng-container *ngTemplateOutlet=\"paginationTemplate ? paginationTemplate : defaultPager; context: { $implicit: this }\">\r\n    </ng-container>\r\n</div>\r\n\r\n<ng-template #emptyGrid>\r\n    <span class=\"igx-grid__tbody-message\">{{emptyGridMessage}}</span>\r\n</ng-template>\r\n"

/***/ }),
/* 220 */
/***/ (function(module, exports) {

module.exports = "<ng-content></ng-content>"

/***/ }),
/* 221 */
/***/ (function(module, exports) {

module.exports = "<ng-content></ng-content>\n\n<ng-template #defaultEmptyList>\n\t<article class=\"message\">\n\t\t<p>There are no items in the list.</p>\n\t</article>\n</ng-template>\n\n<ng-container *ngIf=\"!children || children.length === 0\">\n\t<ng-container *ngTemplateOutlet=\"template; context: context\">\n\t</ng-container>\n</ng-container>\n"

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var button_directive_1 = __webpack_require__(17);
var icon_1 = __webpack_require__(6);
var NEXT_ID = 0;
var IgxNavbarComponent = (function () {
    function IgxNavbarComponent() {
        this.isVisible = true;
        this.id = "igx-navbar-" + NEXT_ID++;
        this.onAction = new core_1.EventEmitter();
        this.titleId = "igx-navbar-" + IgxNavbarComponent_1.NEXT_ID++;
    }
    IgxNavbarComponent_1 = IgxNavbarComponent;
    Object.defineProperty(IgxNavbarComponent.prototype, "isActionButtonVisible", {
        get: function () {
            if (!this.actionButtonIcon) {
                return false;
            }
            return this.isVisible;
        },
        set: function (value) {
            this.isVisible = value;
        },
        enumerable: true,
        configurable: true
    });
    IgxNavbarComponent.prototype._triggerAction = function () {
        this.onAction.emit(this);
    };
    IgxNavbarComponent.NEXT_ID = 1;
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxNavbarComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxNavbarComponent.prototype, "isActionButtonVisible", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxNavbarComponent.prototype, "actionButtonIcon", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxNavbarComponent.prototype, "title", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxNavbarComponent.prototype, "onAction", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxNavbarComponent.prototype, "titleId", void 0);
    IgxNavbarComponent = IgxNavbarComponent_1 = __decorate([
        core_1.Component({
            selector: "igx-navbar",
            template: __webpack_require__(223)
        })
    ], IgxNavbarComponent);
    return IgxNavbarComponent;
    var IgxNavbarComponent_1;
}());
exports.IgxNavbarComponent = IgxNavbarComponent;
var IgxNavbarModule = (function () {
    function IgxNavbarModule() {
    }
    IgxNavbarModule = __decorate([
        core_1.NgModule({
            declarations: [IgxNavbarComponent],
            exports: [IgxNavbarComponent],
            imports: [button_directive_1.IgxButtonModule, icon_1.IgxIconModule, common_1.CommonModule]
        })
    ], IgxNavbarModule);
    return IgxNavbarModule;
}());
exports.IgxNavbarModule = IgxNavbarModule;


/***/ }),
/* 223 */
/***/ (function(module, exports) {

module.exports = "<nav class=\"igx-navbar\" role=\"navigation\" [attr.aria-labelledby]=\"titleId\">\n    <div class=\"igx-navbar__left\">\n        <igx-icon (click)=\"_triggerAction()\" fontSet=\"material\" [name]=\"actionButtonIcon\" *ngIf=\"isActionButtonVisible\"></igx-icon>\n        <h1 class=\"igx-navbar__title\" [attr.id]=\"titleId\">{{ title }}</h1>\n    </div>\n    <div class=\"igx-navbar__right\">\n        <ng-content></ng-content>\n    </div>\n</nav>\n"

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(110));
__export(__webpack_require__(62));
__export(__webpack_require__(226));


/***/ }),
/* 225 */
/***/ (function(module, exports) {

module.exports = "<ng-template #defaultItemsTemplate>\r\n    <div igxDrawerItem [isHeader]=\"true\">Navigation Drawer</div>\r\n    <div igxDrawerItem> Star by adding</div>\r\n    <div igxDrawerItem> <code>&lt;ng-template igxDrawer&gt;</code> </div>\r\n    <div igxDrawerItem> And some items inside </div>\r\n    <div igxDrawerItem> Style with igxDrawerItem </div>\r\n    <div igxDrawerItem> and igxRipple directives</div>\r\n</ng-template>\r\n\r\n<div [hidden]=\"pin\"\r\n    class=\"igx-nav-drawer__overlay\"\r\n    [class.igx-nav-drawer__overlay--hidden]=\"!isOpen\"\r\n    (click)=\"close(true)\" #overlay>\r\n</div>\r\n<aside role=\"navigation\"\r\n    class=\"igx-nav-drawer__aside\"\r\n    [class.igx-nav-drawer__aside--collapsed]=\"!miniTemplate && !isOpen\"\r\n    [class.igx-nav-drawer__aside--mini]=\"miniTemplate && !isOpen\"\r\n    [class.igx-nav-drawer__aside--pinned]=\"pin\"\r\n    [class.igx-nav-drawer__aside--right]=\"position == 'right'\" #aside>\r\n\r\n    <ng-container *ngTemplateOutlet=\"template || defaultItemsTemplate\"></ng-container>\r\n</aside>\r\n<div class=\"igx-nav-drawer__style-dummy\" #dummy></div>"

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var navigation_drawer_component_1 = __webpack_require__(110);
var navigation_drawer_directives_1 = __webpack_require__(62);
var IgxNavigationDrawerModule = (function () {
    function IgxNavigationDrawerModule() {
    }
    IgxNavigationDrawerModule = __decorate([
        core_1.NgModule({
            declarations: [
                navigation_drawer_component_1.IgxNavigationDrawerComponent,
                navigation_drawer_directives_1.IgxNavDrawerItemDirective,
                navigation_drawer_directives_1.IgxNavDrawerMiniTemplateDirective,
                navigation_drawer_directives_1.IgxNavDrawerTemplateDirective
            ],
            exports: [
                navigation_drawer_component_1.IgxNavigationDrawerComponent,
                navigation_drawer_directives_1.IgxNavDrawerItemDirective,
                navigation_drawer_directives_1.IgxNavDrawerMiniTemplateDirective,
                navigation_drawer_directives_1.IgxNavDrawerTemplateDirective
            ],
            imports: [common_1.CommonModule]
        })
    ], IgxNavigationDrawerModule);
    return IgxNavigationDrawerModule;
}());
exports.IgxNavigationDrawerModule = IgxNavigationDrawerModule;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var IgxTextAlign;
(function (IgxTextAlign) {
    IgxTextAlign["START"] = "start";
    IgxTextAlign["CENTER"] = "center";
    IgxTextAlign["END"] = "end";
})(IgxTextAlign = exports.IgxTextAlign || (exports.IgxTextAlign = {}));
var BaseProgress = (function () {
    function BaseProgress() {
        this.requestAnimationId = undefined;
        this._valueInPercent = 0;
        this._max = 100;
        this._value = 0;
        this._animate = true;
    }
    Object.defineProperty(BaseProgress.prototype, "valueInPercent", {
        get: function () {
            return this._valueInPercent;
        },
        set: function (valInPercent) {
            var valueInRange = getValueInProperRange(valInPercent, this._max);
            var valueIntoPercentage = convertInPercentage(valueInRange, this._max);
            this._valueInPercent = valueIntoPercentage;
        },
        enumerable: true,
        configurable: true
    });
    BaseProgress.prototype.runAnimation = function (val) {
        var _this = this;
        var direction = this.directionFlow(this._value, val);
        if (!this.requestAnimationId) {
            this.requestAnimationId = requestAnimationFrame(function () { return _this.updateProgressSmoothly.call(_this, val, direction); });
        }
    };
    BaseProgress.prototype.updateProgressSmoothly = function (val, direction) {
        var _this = this;
        if (this._value === val) {
            this.requestAnimationId = undefined;
            return;
        }
        this._value += direction;
        this.valueInPercent = this._value;
        requestAnimationFrame(function () { return _this.updateProgressSmoothly.call(_this, val, direction); });
    };
    BaseProgress.prototype.updateProgressDirectly = function (val) {
        this._value = val;
        this.valueInPercent = this._value;
    };
    BaseProgress.prototype.directionFlow = function (currentValue, prevValue) {
        if (currentValue < prevValue) {
            return 1;
        }
        return -1;
    };
    return BaseProgress;
}());
exports.BaseProgress = BaseProgress;
var NEXT_LINEAR_ID = 0;
var NEXT_CIRCULAR_ID = 0;
var IgxLinearProgressBarComponent = (function (_super) {
    __extends(IgxLinearProgressBarComponent, _super);
    function IgxLinearProgressBarComponent(elementRef) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.id = "igx-linear-bar-" + NEXT_LINEAR_ID++;
        _this.textAlign = IgxTextAlign.START;
        _this.textVisibility = true;
        _this.textTop = false;
        _this.striped = false;
        _this.type = "default";
        _this.onProgressChanged = new core_1.EventEmitter();
        return _this;
    }
    Object.defineProperty(IgxLinearProgressBarComponent.prototype, "animate", {
        get: function () {
            return this._animate;
        },
        set: function (animate) {
            this._animate = animate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLinearProgressBarComponent.prototype, "max", {
        get: function () {
            return this._max;
        },
        set: function (maxNum) {
            this._max = maxNum;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLinearProgressBarComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            if (this._value === val) {
                return;
            }
            var valueInRange = getValueInProperRange(val, this.max);
            var changedValues = {
                currentValue: valueInRange,
                previousValue: this._value
            };
            if (this._animate) {
                _super.prototype.runAnimation.call(this, valueInRange);
            }
            else {
                _super.prototype.updateProgressDirectly.call(this, valueInRange);
            }
            this.onProgressChanged.emit(changedValues);
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxLinearProgressBarComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxLinearProgressBarComponent.prototype, "textAlign", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxLinearProgressBarComponent.prototype, "textVisibility", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxLinearProgressBarComponent.prototype, "textTop", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxLinearProgressBarComponent.prototype, "text", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxLinearProgressBarComponent.prototype, "striped", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxLinearProgressBarComponent.prototype, "type", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxLinearProgressBarComponent.prototype, "animate", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], IgxLinearProgressBarComponent.prototype, "max", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Object])
    ], IgxLinearProgressBarComponent.prototype, "value", null);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxLinearProgressBarComponent.prototype, "onProgressChanged", void 0);
    IgxLinearProgressBarComponent = __decorate([
        core_1.Component({
            selector: "igx-linear-bar",
            template: __webpack_require__(228)
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], IgxLinearProgressBarComponent);
    return IgxLinearProgressBarComponent;
}(BaseProgress));
exports.IgxLinearProgressBarComponent = IgxLinearProgressBarComponent;
var IgxCircularProgressBarComponent = (function (_super) {
    __extends(IgxCircularProgressBarComponent, _super);
    function IgxCircularProgressBarComponent(elementRef, renderer) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.STROKE_OPACITY_DVIDER = 100;
        _this.STROKE_OPACITY_ADDITION = .2;
        _this.onProgressChanged = new core_1.EventEmitter();
        _this.id = "igx-circular-bar-" + NEXT_CIRCULAR_ID++;
        _this.textVisibility = true;
        _this._radius = 0;
        return _this;
    }
    Object.defineProperty(IgxCircularProgressBarComponent.prototype, "animate", {
        get: function () {
            return this._animate;
        },
        set: function (animate) {
            this._animate = animate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCircularProgressBarComponent.prototype, "max", {
        get: function () {
            return this._max;
        },
        set: function (maxNum) {
            this._max = maxNum;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCircularProgressBarComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            if (this._value === val) {
                return;
            }
            var valueInProperRange = getValueInProperRange(val, this.max);
            var changedValues = {
                currentValue: valueInProperRange,
                previousValue: this._value
            };
            if (this.animate) {
                _super.prototype.runAnimation.call(this, valueInProperRange);
            }
            else {
                this.updateProgressDirectly(valueInProperRange);
            }
            this.onProgressChanged.emit(changedValues);
        },
        enumerable: true,
        configurable: true
    });
    IgxCircularProgressBarComponent.prototype.ngAfterViewInit = function () {
        this._radius = parseInt(this._svgCircle.nativeElement.getAttribute("r"), 10);
        this._circumference = 2 * Math.PI * this._radius;
    };
    IgxCircularProgressBarComponent.prototype.updateProgressSmoothly = function (val, direction) {
        var FRAMES = [{
                strokeDashoffset: this.getProgress(this._value),
                strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION
            }, {
                strokeDashoffset: this.getProgress(this.valueInPercent),
                strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION
            }];
        this._svgCircle.nativeElement.animate(FRAMES, {
            easing: "ease-out",
            fill: "forwards"
        });
        _super.prototype.updateProgressSmoothly.call(this, val, direction);
    };
    IgxCircularProgressBarComponent.prototype.updateProgressDirectly = function (val) {
        _super.prototype.updateProgressDirectly.call(this, val);
        this.renderer.setStyle(this._svgCircle.nativeElement, "stroke-dashoffset", this.getProgress(this.valueInPercent));
        this.renderer.setStyle(this._svgCircle.nativeElement, "stroke-opacity", (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);
    };
    IgxCircularProgressBarComponent.prototype.getProgress = function (percentage) {
        return this._circumference - (percentage * this._circumference / 100);
    };
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxCircularProgressBarComponent.prototype, "onProgressChanged", void 0);
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCircularProgressBarComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxCircularProgressBarComponent.prototype, "textVisibility", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], IgxCircularProgressBarComponent.prototype, "animate", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], IgxCircularProgressBarComponent.prototype, "max", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxCircularProgressBarComponent.prototype, "value", null);
    __decorate([
        core_1.ViewChild("circle"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxCircularProgressBarComponent.prototype, "_svgCircle", void 0);
    __decorate([
        core_1.ViewChild("text"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxCircularProgressBarComponent.prototype, "_svgText", void 0);
    IgxCircularProgressBarComponent = __decorate([
        core_1.Component({
            selector: "igx-circular-bar",
            template: __webpack_require__(229)
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer2])
    ], IgxCircularProgressBarComponent);
    return IgxCircularProgressBarComponent;
}(BaseProgress));
exports.IgxCircularProgressBarComponent = IgxCircularProgressBarComponent;
function getValueInProperRange(value, max, min) {
    if (min === void 0) { min = 0; }
    return Math.max(Math.min(value, max), min);
}
exports.getValueInProperRange = getValueInProperRange;
function convertInPercentage(value, max) {
    return Math.floor(100 * value / max);
}
exports.convertInPercentage = convertInPercentage;
var IgxProgressBarModule = (function () {
    function IgxProgressBarModule() {
    }
    IgxProgressBarModule = __decorate([
        core_1.NgModule({
            declarations: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent],
            exports: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent],
            imports: [common_1.CommonModule]
        })
    ], IgxProgressBarModule);
    return IgxProgressBarModule;
}());
exports.IgxProgressBarModule = IgxProgressBarModule;


/***/ }),
/* 228 */
/***/ (function(module, exports) {

module.exports = "<div class=\"progress-linear\" [class.progress-linear--striped]=\"striped\">\n    <div class=\"progress-linear__bar\" #linearBar role=\"progressbar\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"value\">\n        <div class=\"progress-linear__bar-base\"></div>\n        <div class=\"progress-linear__bar-progress{{type ? '--' + type : ''}}\" [style.width.%]=\"valueInPercent\"></div>\n    </div>\n    <span \n        class=\"progress-linear__value{{textAlign ? '--' + textAlign : ''}}\"\n        [class.progress-linear__value--top]=\"textTop\"\n        [class.progress-linear__value--hidden]=\"!textVisibility\">\n            {{text ? text : valueInPercent + '%'}}\n    </span>\n</div>\n"

/***/ }),
/* 229 */
/***/ (function(module, exports) {

module.exports = "<svg #svg class=\"progress-circular\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"\n    viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\" role=\"progressbar\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"value\">\n    <circle class=\"progress-circular__innercircle\" cx=\"50\" cy=\"50\" r=\"46\" />\n    <circle #circle class=\"progress-circular__circle\" cx=\"50\" cy=\"50\" r=\"46\" />\n    <text #text class=\"progress-circular__text\" [class.progress-circular__text--hidden]=\"!textVisibility\" id=\"myTimer\" text-anchor=\"middle\" x=\"50\" y=\"60\">\n        {{valueInPercent}}%\n    </text>\n</svg>"

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var forms_1 = __webpack_require__(7);
var ripple_directive_1 = __webpack_require__(12);
var RadioLabelPosition;
(function (RadioLabelPosition) {
    RadioLabelPosition["BEFORE"] = "before";
    RadioLabelPosition["AFTER"] = "after";
})(RadioLabelPosition = exports.RadioLabelPosition || (exports.RadioLabelPosition = {}));
var nextId = 0;
var noop = function () { };
var IgxRadioComponent = (function () {
    function IgxRadioComponent() {
        this.id = "igx-radio-" + nextId++;
        this.labelId = this.id + "-label";
        this.labelPosition = "after";
        this.tabindex = null;
        this.disableRipple = false;
        this.required = false;
        this.ariaLabelledBy = this.labelId;
        this.ariaLabel = null;
        this.change = new core_1.EventEmitter();
        this.cssClass = "igx-radio";
        this.checked = false;
        this.disabled = false;
        this.focused = false;
        this.inputId = this.id + "-input";
        this._value = null;
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
    }
    IgxRadioComponent_1 = IgxRadioComponent;
    IgxRadioComponent.prototype._onRadioChange = function (event) {
        event.stopPropagation();
    };
    IgxRadioComponent.prototype._onRadioClick = function (event) {
        event.stopPropagation();
        this.select();
    };
    IgxRadioComponent.prototype._onLabelClick = function () {
        this.select();
    };
    IgxRadioComponent.prototype.select = function () {
        if (this.disabled) {
            return;
        }
        this.checked = true;
        this.focused = false;
        this.change.emit({ value: this.value, radio: this });
        this._onChangeCallback(this.value);
    };
    IgxRadioComponent.prototype.writeValue = function (value) {
        this._value = value;
        this.checked = (this._value === this.value);
    };
    Object.defineProperty(IgxRadioComponent.prototype, "labelClass", {
        get: function () {
            switch (this.labelPosition) {
                case RadioLabelPosition.BEFORE:
                    return this.cssClass + "__label--before";
                case RadioLabelPosition.AFTER:
                default:
                    return this.cssClass + "__label";
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxRadioComponent.prototype.onFocus = function (event) {
        this.focused = true;
    };
    IgxRadioComponent.prototype.onBlur = function (event) {
        this.focused = false;
        this._onTouchedCallback();
    };
    IgxRadioComponent.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    IgxRadioComponent.prototype.registerOnTouched = function (fn) { this._onTouchedCallback = fn; };
    __decorate([
        core_1.ViewChild("radio"),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "nativeRadio", void 0);
    __decorate([
        core_1.ViewChild("nativeLabel"),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "nativeLabel", void 0);
    __decorate([
        core_1.ViewChild("placeholderLabel"),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "placeholderLabel", void 0);
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "labelId", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxRadioComponent.prototype, "labelPosition", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "value", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxRadioComponent.prototype, "name", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxRadioComponent.prototype, "tabindex", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "disableRipple", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "required", void 0);
    __decorate([
        core_1.Input("aria-labelledby"),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "ariaLabelledBy", void 0);
    __decorate([
        core_1.Input("aria-label"),
        __metadata("design:type", String)
    ], IgxRadioComponent.prototype, "ariaLabel", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], IgxRadioComponent.prototype, "change", void 0);
    __decorate([
        core_1.HostBinding("class.igx-radio"),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "cssClass", void 0);
    __decorate([
        core_1.HostBinding("class.igx-radio--checked"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "checked", void 0);
    __decorate([
        core_1.HostBinding("class.igx-radio--disabled"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "disabled", void 0);
    __decorate([
        core_1.HostBinding("class.igx-radio--focused"),
        __metadata("design:type", Object)
    ], IgxRadioComponent.prototype, "focused", void 0);
    IgxRadioComponent = IgxRadioComponent_1 = __decorate([
        core_1.Component({
            providers: [{ provide: forms_1.NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent_1, multi: true }],
            selector: "igx-radio",
            template: __webpack_require__(231)
        }),
        __metadata("design:paramtypes", [])
    ], IgxRadioComponent);
    return IgxRadioComponent;
    var IgxRadioComponent_1;
}());
exports.IgxRadioComponent = IgxRadioComponent;
var IgxRadioModule = (function () {
    function IgxRadioModule() {
    }
    IgxRadioModule = __decorate([
        core_1.NgModule({
            declarations: [IgxRadioComponent],
            exports: [IgxRadioComponent],
            imports: [ripple_directive_1.IgxRippleModule]
        })
    ], IgxRadioModule);
    return IgxRadioModule;
}());
exports.IgxRadioModule = IgxRadioModule;


/***/ }),
/* 231 */
/***/ (function(module, exports) {

module.exports = "<input #radio class=\"igx-radio__input\" type=\"radio\"\r\n    [id]=\"inputId\"\r\n    [name]=\"name\"\r\n    [value]=\"value\"\r\n    [tabindex]=\"tabindex\"\r\n    [disabled]=\"disabled\"\r\n    [checked]=\"checked\"\r\n    [required]=\"required\"\r\n    [attr.aria-checked]=\"checked\"\r\n    [attr.aria-labelledby]=\"ariaLabelledBy\"\r\n    [attr.aria-label]=\"ariaLabel\"\r\n    (click)=\"_onRadioClick($event)\"\r\n    (change)=\"_onRadioChange($event)\"\r\n    (focus)=\"onFocus($event)\"\r\n    (blur)=\"onBlur($event)\" />\r\n\r\n<label #nativeLabel class=\"igx-radio__composite\" igxRipple\r\n    igxRippleTarget=\".igx-radio__ripple\"\r\n    [igxRippleDisabled]=\"disableRipple\"\r\n    [igxRippleCentered]=\"true\"\r\n    [igxRippleDuration]=\"100\"\r\n    [for]=\"inputId\">\r\n    <div class=\"igx-radio__ripple\"></div>\r\n</label>\r\n\r\n<span #placeholderLabel role=\"label\"\r\n    [id]=\"labelId\"\r\n    [class]=\"labelClass\"\r\n    (click)=\"_onLabelClick()\">\r\n    <ng-content></ng-content>\r\n</span>\r\n"

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var forms_1 = __webpack_require__(7);
var SliderType;
(function (SliderType) {
    SliderType[SliderType["SLIDER"] = 0] = "SLIDER";
    SliderType[SliderType["RANGE"] = 1] = "RANGE";
})(SliderType = exports.SliderType || (exports.SliderType = {}));
var SliderHandle;
(function (SliderHandle) {
    SliderHandle[SliderHandle["FROM"] = 0] = "FROM";
    SliderHandle[SliderHandle["TO"] = 1] = "TO";
})(SliderHandle || (SliderHandle = {}));
var noop = function () {
};
var NEXT_ID = 0;
var IgxSliderComponent = (function () {
    function IgxSliderComponent(renderer) {
        this.renderer = renderer;
        this.id = "igx-slider-" + NEXT_ID++;
        this.isContinuous = false;
        this.type = SliderType.SLIDER;
        this.thumbLabelVisibilityDuration = 750;
        this.step = 1;
        this.onValueChange = new core_1.EventEmitter();
        this.isActiveLabel = false;
        this.activeHandle = SliderHandle.TO;
        this._minValue = 0;
        this.width = 0;
        this.xOffset = 0;
        this.xPointer = 0;
        this.pPointer = 0;
        this.pMin = 0;
        this.pMax = 1;
        this.hasViewInit = false;
        this._maxValue = 100;
        this._onChangeCallback = noop;
        this._onTouchedCallback = noop;
    }
    IgxSliderComponent_1 = IgxSliderComponent;
    Object.defineProperty(IgxSliderComponent.prototype, "isRange", {
        get: function () {
            var isRange = this.type === SliderType.RANGE;
            return isRange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "minValue", {
        get: function () {
            return this._minValue;
        },
        set: function (value) {
            if (value >= this.maxValue) {
                this._minValue = this.maxValue - 1;
                return;
            }
            this._minValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "maxValue", {
        get: function () {
            return this._maxValue;
        },
        set: function (value) {
            if (value <= this._minValue) {
                this._maxValue = this._minValue + 1;
                return;
            }
            this._maxValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "lowerBound", {
        get: function () {
            return this._lowerBound;
        },
        set: function (value) {
            if (value >= this.upperBound) {
                this._lowerBound = this.minValue;
                return;
            }
            this._lowerBound = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "upperBound", {
        get: function () {
            return this._upperBound;
        },
        set: function (value) {
            if (value <= this.lowerBound) {
                this._upperBound = this.maxValue;
                return;
            }
            this._upperBound = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "lowerValue", {
        get: function () {
            return this._lowerValue;
        },
        set: function (value) {
            if (value < this.lowerBound || this.upperBound < value) {
                return;
            }
            if (this.isRange && value > this.upperValue) {
                return;
            }
            this._lowerValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "upperValue", {
        get: function () {
            return this._upperValue;
        },
        set: function (value) {
            if (value < this.lowerBound || this.upperBound < value) {
                return;
            }
            if (this.isRange && value < this.lowerValue) {
                return;
            }
            this._upperValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "value", {
        get: function () {
            if (this.isRange) {
                return {
                    lower: this.snapValueToStep(this.lowerValue),
                    upper: this.snapValueToStep(this.upperValue)
                };
            }
            else {
                var val = this.snapValueToStep(this.upperValue);
                return val;
            }
        },
        set: function (value) {
            if (!this.isRange) {
                this.upperValue = this.snapValueToStep(value);
            }
            else {
                this.upperValue =
                    this.snapValueToStep(value == null ? null : value.upper);
                this.lowerValue =
                    this.snapValueToStep(value == null ? null : value.lower);
            }
            this._onChangeCallback(this.value);
            if (this.hasViewInit) {
                this.positionHandlesAndUpdateTrack();
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxSliderComponent.prototype.ngOnInit = function () {
        if (this.lowerBound === undefined) {
            this.lowerBound = this.minValue;
        }
        if (this.upperBound === undefined) {
            this.upperBound = this.maxValue;
        }
        if (this.isRange) {
            if (Number.isNaN(this.value.lower)) {
                this.value = {
                    lower: this.lowerBound,
                    upper: this.value.upper
                };
            }
            if (Number.isNaN(this.value.upper)) {
                this.value = {
                    lower: this.value.lower,
                    upper: this.upperBound
                };
            }
        }
        else {
            if (Number.isNaN(this.value)) {
                this.value = this.lowerBound;
            }
        }
        this.pMin = this.valueToFraction(this.lowerBound) || 0;
        this.pMax = this.valueToFraction(this.upperBound) || 1;
    };
    IgxSliderComponent.prototype.ngAfterViewInit = function () {
        this.hasViewInit = true;
        this.positionHandlesAndUpdateTrack();
        this.setTickInterval();
    };
    IgxSliderComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    IgxSliderComponent.prototype.registerOnChange = function (fn) {
        this._onChangeCallback = fn;
    };
    IgxSliderComponent.prototype.registerOnTouched = function (fn) {
        this._onTouchedCallback = fn;
    };
    IgxSliderComponent.prototype.showThumbsLabels = function () {
        if (this.disabled) {
            return;
        }
        if (this.isContinuous) {
            return;
        }
        if (this.timer !== null) {
            clearInterval(this.timer);
        }
        this.isActiveLabel = true;
    };
    IgxSliderComponent.prototype.onFocus = function ($event) {
        if (this.isRange && $event.target === this.thumbFrom.nativeElement) {
            this.activeHandle = SliderHandle.FROM;
        }
        if ($event.target === this.thumbTo.nativeElement) {
            this.activeHandle = SliderHandle.TO;
        }
        this.toggleThumbLabel();
    };
    IgxSliderComponent.prototype.onPanEnd = function ($event) {
        this.hideThumbsLabels();
        this.emitValueChanged(null);
    };
    IgxSliderComponent.prototype.hideThumbLabelsOnBlur = function () {
        if (this.timer !== null) {
            clearInterval(this.timer);
        }
        this.isActiveLabel = false;
    };
    IgxSliderComponent.prototype.onKeyDown = function ($event) {
        if (this.disabled) {
            return true;
        }
        var incrementSign;
        if ($event.key.endsWith("Left")) {
            incrementSign = -1;
        }
        else if ($event.key.endsWith("Right")) {
            incrementSign = 1;
        }
        else {
            return;
        }
        var value = this.value;
        if (this.isRange) {
            if (this.activeHandle === SliderHandle.FROM) {
                var newLower = this.value.lower + incrementSign * this.step;
                if (newLower >= this.value.upper) {
                    this.thumbTo.nativeElement.focus();
                    return;
                }
                this.value = {
                    lower: newLower,
                    upper: this.value.upper
                };
            }
            else {
                var newUpper = this.value.upper + incrementSign * this.step;
                if (newUpper <= this.value.lower) {
                    this.thumbFrom.nativeElement.focus();
                    return;
                }
                this.value = {
                    lower: this.value.lower,
                    upper: this.value.upper + incrementSign * this.step
                };
            }
        }
        else {
            this.value = this.value + incrementSign * this.step;
        }
        if (this.hasValueChanged(value)) {
            this.emitValueChanged(value);
        }
        this.showThumbsLabels();
    };
    IgxSliderComponent.prototype.onTap = function ($event) {
        var value = this.value;
        this.update($event);
        if (this.hasValueChanged(value)) {
            this.emitValueChanged(value);
        }
    };
    IgxSliderComponent.prototype.update = function ($event) {
        if (this.disabled) {
            return;
        }
        if ($event.type === "tap") {
            this.toggleThumbLabel();
        }
        this.setSliderWidth();
        this.setSliderOffset();
        this.setPointerPosition($event);
        this.setPointerPercent();
        if (this.isRange) {
            this.closestHandle();
        }
        this.setValues();
        this.positionHandlesAndUpdateTrack();
        this._onTouchedCallback();
    };
    IgxSliderComponent.prototype.hideThumbsLabels = function () {
        var _this = this;
        if (this.disabled) {
            return;
        }
        if (this.isContinuous) {
            return;
        }
        this.timer = setTimeout(function () { return _this.isActiveLabel = false; }, this.thumbLabelVisibilityDuration);
    };
    IgxSliderComponent.prototype.generateTickMarks = function (color, interval) {
        return "repeating-linear-gradient(\n            " + "to left" + ",\n            " + color + ",\n            " + color + " 1.5px,\n            transparent 1.5px,\n            transparent " + interval + "%\n        ), repeating-linear-gradient(\n            " + "to right" + ",\n            " + color + ",\n            " + color + " 1.5px,\n            transparent 1.5px,\n            transparent " + interval + "%\n        )";
    };
    IgxSliderComponent.prototype.toggleThumbLabel = function () {
        this.showThumbsLabels();
        this.hideThumbsLabels();
    };
    IgxSliderComponent.prototype.getSliderOffset = function () {
        return this.xOffset;
    };
    IgxSliderComponent.prototype.toFixed = function (num) {
        num = parseFloat(num.toFixed(20));
        return num;
    };
    IgxSliderComponent.prototype.positionHandle = function (handle, position) {
        handle.nativeElement.style.left = this.valueToFraction(position) * 100 + "%";
    };
    IgxSliderComponent.prototype.positionHandlesAndUpdateTrack = function () {
        if (!this.isRange) {
            this.positionHandle(this.thumbTo, this.value);
        }
        else {
            this.positionHandle(this.thumbTo, this.value.upper);
            this.positionHandle(this.thumbFrom, this.value.lower);
        }
        this.updateTrack();
    };
    IgxSliderComponent.prototype.closestHandle = function () {
        var fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;
        var toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;
        var match = this.closestTo(this.xPointer, [fromOffset, toOffset]);
        if (match === toOffset) {
            this.thumbTo.nativeElement.focus();
        }
        else if (match === fromOffset) {
            this.thumbFrom.nativeElement.focus();
        }
    };
    IgxSliderComponent.prototype.setTickInterval = function () {
        if (this.isContinuous) {
            return;
        }
        var interval = this.step > 1 ? this.step : null;
        this.renderer.setStyle(this.ticks.nativeElement, "background", this.generateTickMarks("white", interval));
    };
    IgxSliderComponent.prototype.snapValueToStep = function (value) {
        var valueModStep = (value - this.minValue) % this.step;
        var snapValue = value - valueModStep;
        if (Math.abs(valueModStep) * 2 >= this.step) {
            snapValue += (valueModStep > 0) ? this.step : (-this.step);
        }
        return parseFloat(snapValue.toFixed(20));
    };
    IgxSliderComponent.prototype.closestTo = function (goal, positions) {
        return positions.reduce(function (previous, current) {
            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);
        });
    };
    IgxSliderComponent.prototype.setValues = function () {
        if (this.activeHandle === SliderHandle.TO) {
            if (this.isRange) {
                this.value = {
                    lower: this.value.lower,
                    upper: this.fractionToValue(this.pPointer)
                };
            }
            else {
                this.value = this.fractionToValue(this.pPointer);
            }
        }
        if (this.activeHandle === SliderHandle.FROM) {
            this.value = {
                lower: this.fractionToValue(this.pPointer),
                upper: this.value.upper
            };
        }
    };
    IgxSliderComponent.prototype.setSliderWidth = function () {
        this.width = this.slider.nativeElement.offsetWidth;
    };
    IgxSliderComponent.prototype.setPointerPosition = function (e) {
        this.xPointer = e.center.x - this.getSliderOffset();
    };
    IgxSliderComponent.prototype.setSliderOffset = function () {
        var rect = this.slider.nativeElement.getBoundingClientRect();
        this.xOffset = rect.left;
    };
    IgxSliderComponent.prototype.setPointerPercent = function () {
        this.pPointer = this.limit(this.toFixed(this.xPointer / this.width));
    };
    IgxSliderComponent.prototype.valueToFraction = function (value) {
        return this.limit((value - this.minValue) / (this.maxValue - this.minValue));
    };
    IgxSliderComponent.prototype.fractionToValue = function (fraction) {
        var max = this.maxValue;
        var min = this.minValue;
        return (max - min) * fraction + min;
    };
    IgxSliderComponent.prototype.fractionToPercent = function (fraction) {
        return this.toFixed(fraction * 100);
    };
    IgxSliderComponent.prototype.limit = function (num) {
        return Math.max(this.pMin, Math.min(num, this.pMax));
    };
    IgxSliderComponent.prototype.updateTrack = function () {
        var fromPosition = this.valueToFraction(this.lowerValue);
        var toPosition = this.valueToFraction(this.upperValue);
        var positionGap = (this.valueToFraction(this.upperValue) - this.valueToFraction(this.lowerValue));
        if (!this.isRange) {
            this.track.nativeElement.style.transform = "scaleX(" + toPosition + ")";
        }
        if (this.isRange) {
            this.track.nativeElement.style.transform = "scaleX(" + 1 + ")";
            this.track.nativeElement.style.left = fromPosition * 100 + "%";
            this.track.nativeElement.style.width = positionGap * 100 + "%";
        }
    };
    IgxSliderComponent.prototype.hasValueChanged = function (oldValue) {
        var isSliderWithDifferentValue = !this.isRange && oldValue !== this.value;
        var isRangeWithOneDifferentValue = this.isRange &&
            (oldValue.lower !== this.value.lower ||
                oldValue.upper !== this.value.upper);
        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;
    };
    IgxSliderComponent.prototype.emitValueChanged = function (oldValue) {
        this.onValueChange.emit({ oldValue: oldValue, value: this.value });
    };
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSliderComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], IgxSliderComponent.prototype, "disabled", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSliderComponent.prototype, "isContinuous", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxSliderComponent.prototype, "type", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSliderComponent.prototype, "thumbLabelVisibilityDuration", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSliderComponent.prototype, "step", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxSliderComponent.prototype, "onValueChange", void 0);
    __decorate([
        core_1.ViewChild("slider"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxSliderComponent.prototype, "slider", void 0);
    __decorate([
        core_1.ViewChild("track"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxSliderComponent.prototype, "track", void 0);
    __decorate([
        core_1.ViewChild("ticks"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxSliderComponent.prototype, "ticks", void 0);
    __decorate([
        core_1.ViewChild("thumbFrom"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxSliderComponent.prototype, "thumbFrom", void 0);
    __decorate([
        core_1.ViewChild("thumbTo"),
        __metadata("design:type", core_1.ElementRef)
    ], IgxSliderComponent.prototype, "thumbTo", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], IgxSliderComponent.prototype, "minValue", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], IgxSliderComponent.prototype, "maxValue", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], IgxSliderComponent.prototype, "lowerBound", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], IgxSliderComponent.prototype, "upperBound", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], IgxSliderComponent.prototype, "value", null);
    IgxSliderComponent = IgxSliderComponent_1 = __decorate([
        core_1.Component({
            providers: [{ provide: forms_1.NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent_1, multi: true }],
            selector: "igx-slider",
            template: __webpack_require__(233)
        }),
        __metadata("design:paramtypes", [core_1.Renderer2])
    ], IgxSliderComponent);
    return IgxSliderComponent;
    var IgxSliderComponent_1;
}());
exports.IgxSliderComponent = IgxSliderComponent;
var IgxSliderModule = (function () {
    function IgxSliderModule() {
    }
    IgxSliderModule = __decorate([
        core_1.NgModule({
            declarations: [IgxSliderComponent],
            exports: [IgxSliderComponent],
            imports: [common_1.CommonModule]
        })
    ], IgxSliderModule);
    return IgxSliderModule;
}());
exports.IgxSliderModule = IgxSliderModule;


/***/ }),
/* 233 */
/***/ (function(module, exports) {

module.exports = "<div class=\"igx-slider\" [class.igx-slider--disabled]=\"disabled\" #slider (panstart)=\"showThumbsLabels()\" (panend)=\"onPanEnd($event)\"\n    (pan)=\"update($event)\" (tap)=\"onTap($event)\">\n    <div class=\"igx-slider__track\">\n        <div #track class=\"igx-slider__track-fill\"></div>\n        <div #ticks class=\"igx-slider__track-ticks\"></div>\n    </div>\n    <div class=\"igx-slider__thumbs\">\n        <div (keydown)=\"onKeyDown($event);\" (keyup)=\"hideThumbsLabels()\" (blur)=\"hideThumbLabelsOnBlur()\" (focus)=\"onFocus($event);\"\n            *ngIf=\"isRange\" class=\"igx-slider__thumb-from\" tabindex=\"1\" [ngClass]=\"{ 'igx-slider__thumb-from--active': isActiveLabel }\"\n            #thumbFrom>\n            <span class=\"label\">{{ lowerValue}}</span>\n            <span class=\"dot\"></span>\n        </div>\n        <div (keydown)=\"onKeyDown($event);\" (keyup)=\"hideThumbsLabels()\" (blur)=\"hideThumbLabelsOnBlur()\" (focus)=\"onFocus($event);\"\n            class=\"igx-slider__thumb-to\" tabindex=\"1\" [ngClass]=\"{ 'igx-slider__thumb-to--active': isActiveLabel }\" #thumbTo>\n            <span *ngIf=\"isRange\" class=\"label\">{{ upperValue}}</span>\n            <span *ngIf=\"!isRange\" class=\"label\">{{ value }}</span>\n            <span class=\"dot\"></span>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var main_1 = __webpack_require__(51);
var NEXT_ID = 0;
var IgxSnackbarComponent = (function () {
    function IgxSnackbarComponent(zone) {
        this.zone = zone;
        this.id = "igx-snackbar-" + NEXT_ID++;
        this.isVisible = false;
        this.autoHide = true;
        this.displayTime = 4000;
        this.onAction = new core_1.EventEmitter();
        this.animationStarted = new core_1.EventEmitter();
        this.animationDone = new core_1.EventEmitter();
    }
    IgxSnackbarComponent.prototype.show = function () {
        var _this = this;
        clearTimeout(this.timeoutId);
        setTimeout(this.timeoutId);
        this.isVisible = true;
        if (this.autoHide) {
            this.timeoutId = setTimeout(function () {
                _this.hide();
            }, this.displayTime);
        }
    };
    IgxSnackbarComponent.prototype.hide = function () {
        this.isVisible = false;
        clearTimeout(this.timeoutId);
    };
    IgxSnackbarComponent.prototype.triggerAction = function () {
        this.onAction.emit(this);
    };
    IgxSnackbarComponent.prototype.snackbarAnimationStarted = function (evt) {
        if (evt.fromState === "void") {
            this.animationStarted.emit(evt);
        }
    };
    IgxSnackbarComponent.prototype.snackbarAnimationDone = function (evt) {
        if (evt.fromState === "show") {
            this.animationDone.emit(evt);
        }
    };
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSnackbarComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxSnackbarComponent.prototype, "message", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSnackbarComponent.prototype, "isVisible", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSnackbarComponent.prototype, "autoHide", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSnackbarComponent.prototype, "displayTime", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxSnackbarComponent.prototype, "actionText", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxSnackbarComponent.prototype, "onAction", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxSnackbarComponent.prototype, "animationStarted", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxSnackbarComponent.prototype, "animationDone", void 0);
    IgxSnackbarComponent = __decorate([
        core_1.Component({
            animations: [
                animations_1.trigger("slideInOut", [
                    animations_1.transition("void => *", [
                        animations_1.useAnimation(main_1.slideInBottom, {
                            params: {
                                duration: ".35s",
                                easing: "cubic-bezier(0.0, 0.0, 0.2, 1)",
                                fromPosition: "translateY(100%)",
                                toPosition: "translateY(0)"
                            }
                        })
                    ]),
                    animations_1.transition("* => void", [
                        animations_1.useAnimation(main_1.slideOutBottom, {
                            params: {
                                duration: ".2s",
                                easing: "cubic-bezier(0.4, 0.0, 1, 1)",
                                fromPosition: "translateY(0)",
                                toOpacity: 1,
                                toPosition: "translateY(100%)"
                            }
                        })
                    ])
                ]),
                animations_1.trigger("fadeInOut", [
                    animations_1.transition("void => *", [
                        animations_1.useAnimation(main_1.fadeIn, {
                            params: {
                                duration: ".35s",
                                easing: "ease-out"
                            }
                        })
                    ]),
                    animations_1.transition("* => void", [
                        animations_1.useAnimation(main_1.fadeOut, {
                            params: {
                                duration: ".2s",
                                easing: "ease-out"
                            }
                        })
                    ])
                ])
            ],
            selector: "igx-snackbar",
            template: __webpack_require__(235)
        }),
        __metadata("design:paramtypes", [core_1.NgZone])
    ], IgxSnackbarComponent);
    return IgxSnackbarComponent;
}());
exports.IgxSnackbarComponent = IgxSnackbarComponent;
var IgxSnackbarModule = (function () {
    function IgxSnackbarModule() {
    }
    IgxSnackbarModule = __decorate([
        core_1.NgModule({
            declarations: [IgxSnackbarComponent],
            exports: [IgxSnackbarComponent],
            imports: [common_1.CommonModule]
        })
    ], IgxSnackbarModule);
    return IgxSnackbarModule;
}());
exports.IgxSnackbarModule = IgxSnackbarModule;


/***/ }),
/* 235 */
/***/ (function(module, exports) {

module.exports = "<div class=\"igx-snackbar\" *ngIf=\"isVisible\" (@slideInOut.start)=\"snackbarAnimationStarted($event)\" (@slideInOut.done)=\"snackbarAnimationDone($event)\"\n    [@slideInOut]=\"isVisible\">\n    <span class=\"igx-snackbar__message\" [@fadeInOut]=\"isVisible\">{{ message }}</span>\n    <button class=\"igx-snackbar__button\" igxRipple=\"white\" *ngIf=\"actionText\" [@fadeInOut] (click)=\"triggerAction()\">\n            {{ actionText }}\n    </button>\n</div>\n"

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var forms_1 = __webpack_require__(7);
var ripple_directive_1 = __webpack_require__(12);
var SwitchLabelPosition;
(function (SwitchLabelPosition) {
    SwitchLabelPosition["BEFORE"] = "before";
    SwitchLabelPosition["AFTER"] = "after";
})(SwitchLabelPosition = exports.SwitchLabelPosition || (exports.SwitchLabelPosition = {}));
var noop = function () { };
var nextId = 0;
var IgxSwitchComponent = (function () {
    function IgxSwitchComponent() {
        this.id = "igx-switch-" + nextId++;
        this.labelId = this.id + "-label";
        this.tabindex = null;
        this.labelPosition = "after";
        this.disableRipple = false;
        this.required = false;
        this.ariaLabelledBy = this.labelId;
        this.ariaLabel = null;
        this.change = new core_1.EventEmitter();
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
        this.cssClass = "igx-switch";
        this.checked = false;
        this.disabled = false;
        this.focused = false;
        this.inputId = this.id + "-input";
    }
    IgxSwitchComponent_1 = IgxSwitchComponent;
    IgxSwitchComponent.prototype.toggle = function () {
        if (this.disabled) {
            return;
        }
        this.checked = !this.checked;
        this.focused = false;
        this.change.emit({ checked: this.checked, switch: this });
        this._onChangeCallback(this.checked);
    };
    IgxSwitchComponent.prototype._onSwitchChange = function (event) {
        event.stopPropagation();
    };
    IgxSwitchComponent.prototype._onSwitchClick = function (event) {
        event.stopPropagation();
        this.toggle();
    };
    IgxSwitchComponent.prototype._onLabelClick = function (event) {
        this.toggle();
    };
    IgxSwitchComponent.prototype.onFocus = function (event) {
        this.focused = true;
    };
    IgxSwitchComponent.prototype.onBlur = function (event) {
        this.focused = false;
        this._onTouchedCallback();
    };
    IgxSwitchComponent.prototype.writeValue = function (value) {
        this._value = value;
        this.checked = !!this._value;
    };
    Object.defineProperty(IgxSwitchComponent.prototype, "labelClass", {
        get: function () {
            switch (this.labelPosition) {
                case SwitchLabelPosition.BEFORE:
                    return this.cssClass + "__label--before";
                case SwitchLabelPosition.AFTER:
                default:
                    return this.cssClass + "__label";
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxSwitchComponent.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    IgxSwitchComponent.prototype.registerOnTouched = function (fn) { this._onTouchedCallback = fn; };
    __decorate([
        core_1.ViewChild("checkbox"),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "nativeCheckbox", void 0);
    __decorate([
        core_1.ViewChild("label"),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "nativeLabel", void 0);
    __decorate([
        core_1.ViewChild("placeholderLabel"),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "placeholderLabel", void 0);
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "id", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "labelId", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "value", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxSwitchComponent.prototype, "name", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxSwitchComponent.prototype, "tabindex", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxSwitchComponent.prototype, "labelPosition", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "disableRipple", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "required", void 0);
    __decorate([
        core_1.Input("aria-labelledby"),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "ariaLabelledBy", void 0);
    __decorate([
        core_1.Input("aria-label"),
        __metadata("design:type", String)
    ], IgxSwitchComponent.prototype, "ariaLabel", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], IgxSwitchComponent.prototype, "change", void 0);
    __decorate([
        core_1.HostBinding("class.igx-switch"),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "cssClass", void 0);
    __decorate([
        core_1.HostBinding("class.igx-switch--checked"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "checked", void 0);
    __decorate([
        core_1.HostBinding("class.igx-switch--disabled"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "disabled", void 0);
    __decorate([
        core_1.HostBinding("class.igx-switch--focused"),
        __metadata("design:type", Object)
    ], IgxSwitchComponent.prototype, "focused", void 0);
    IgxSwitchComponent = IgxSwitchComponent_1 = __decorate([
        core_1.Component({
            providers: [{ provide: forms_1.NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent_1, multi: true }],
            selector: "igx-switch",
            template: __webpack_require__(237)
        })
    ], IgxSwitchComponent);
    return IgxSwitchComponent;
    var IgxSwitchComponent_1;
}());
exports.IgxSwitchComponent = IgxSwitchComponent;
exports.IGX_SWITCH_REQUIRED_VALIDATOR = {
    provide: forms_1.NG_VALIDATORS,
    useExisting: core_1.forwardRef(function () { return IgxSwitchRequiredDirective; }),
    multi: true
};
var IgxSwitchRequiredDirective = (function (_super) {
    __extends(IgxSwitchRequiredDirective, _super);
    function IgxSwitchRequiredDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgxSwitchRequiredDirective = __decorate([
        core_1.Directive({
            selector: "igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]",
            providers: [exports.IGX_SWITCH_REQUIRED_VALIDATOR]
        })
    ], IgxSwitchRequiredDirective);
    return IgxSwitchRequiredDirective;
}(forms_1.CheckboxRequiredValidator));
exports.IgxSwitchRequiredDirective = IgxSwitchRequiredDirective;
var IgxSwitchModule = (function () {
    function IgxSwitchModule() {
    }
    IgxSwitchModule = __decorate([
        core_1.NgModule({
            declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],
            exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],
            imports: [ripple_directive_1.IgxRippleModule]
        })
    ], IgxSwitchModule);
    return IgxSwitchModule;
}());
exports.IgxSwitchModule = IgxSwitchModule;


/***/ }),
/* 237 */
/***/ (function(module, exports) {

module.exports = "<input #checkbox class=\"igx-switch__input\" type=\"checkbox\"\r\n    [id]=\"inputId\"\r\n    [name]=\"name\"\r\n    [value]=\"value\"\r\n    [tabindex]=\"tabindex\"\r\n    [disabled]=\"disabled\"\r\n    [checked]=\"checked\"\r\n    [required]=\"required\"\r\n    [attr.aria-checked]=\"checked\"\r\n    [attr.aria-labelledby]=\"ariaLabelledBy\"\r\n    [attr.aria-label]=\"ariaLabel\"\r\n    (change)=\"_onSwitchChange($event)\"\r\n    (click)=\"_onSwitchClick($event)\"\r\n    (focus)=\"onFocus($event)\"\r\n    (blur)=\"onBlur($event)\" />\r\n\r\n<label #label class =\"igx-switch__composite\" [for]=\"inputId\"\r\n    igxRipple\r\n    igxRippleTarget=\".igx-switch__ripple\"\r\n    [igxRippleDisabled]=\"disableRipple\"\r\n    [igxRippleCentered]=\"true\"\r\n    [igxRippleDuration]=\"100\">\r\n    <div class=\"igx-switch__composite-thumb\">\r\n        <div class=\"igx-switch__ripple\"></div>\r\n    </div>\r\n</label>\r\n\r\n<span #placeholderLabel role=\"label\"\r\n    [class]=\"labelClass\"\r\n    [id]=\"labelId\"\r\n    (click)=\"_onLabelClick($event)\">\r\n    <ng-content></ng-content>\r\n</span>\r\n"

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var badge_component_1 = __webpack_require__(38);
var deprecateDecorators_1 = __webpack_require__(80);
var icon_1 = __webpack_require__(6);
var IgxTabTemplateDirective = (function () {
    function IgxTabTemplateDirective(template) {
        this.template = template;
    }
    IgxTabTemplateDirective = __decorate([
        core_1.Directive({
            selector: "[igxTab]"
        }),
        __metadata("design:paramtypes", [core_1.TemplateRef])
    ], IgxTabTemplateDirective);
    return IgxTabTemplateDirective;
}());
exports.IgxTabTemplateDirective = IgxTabTemplateDirective;
var NEXT_ID = 0;
var IgxBottomNavComponent = (function () {
    function IgxBottomNavComponent(_element) {
        this._element = _element;
        this.id = "igx-bottom-nav-" + NEXT_ID++;
        this.onTabSelected = new core_1.EventEmitter();
        this.onTabDeselected = new core_1.EventEmitter();
        this.selectedIndex = -1;
        this._itemStyle = "igx-bottom-nav";
    }
    Object.defineProperty(IgxBottomNavComponent.prototype, "itemStyle", {
        get: function () {
            return this._itemStyle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBottomNavComponent.prototype, "selectedTab", {
        get: function () {
            if (this.tabs && this.selectedIndex !== undefined) {
                return this.tabs.toArray()[this.selectedIndex];
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxBottomNavComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.selectedIndex === -1) {
                var selectablePanels = _this.panels.filter(function (p) { return !p.isDisabled; });
                var panel = selectablePanels[0];
                if (panel) {
                    panel.select();
                }
            }
        }, 0);
    };
    IgxBottomNavComponent.prototype._selectedPanelHandler = function (args) {
        var _this = this;
        this.selectedIndex = args.panel.index;
        this.panels.forEach(function (p) {
            if (p.index !== _this.selectedIndex) {
                _this._deselectPanel(p);
            }
        });
    };
    IgxBottomNavComponent.prototype._deselectPanel = function (panel) {
        if (panel.isDisabled || this.selectedTab.index === panel.index) {
            return;
        }
        panel.isSelected = false;
        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel: panel });
    };
    __decorate([
        core_1.ViewChildren(core_1.forwardRef(function () { return IgxTabComponent; })),
        __metadata("design:type", core_1.QueryList)
    ], IgxBottomNavComponent.prototype, "tabs", void 0);
    __decorate([
        core_1.ContentChildren(core_1.forwardRef(function () { return IgxTabPanelComponent; })),
        __metadata("design:type", core_1.QueryList)
    ], IgxBottomNavComponent.prototype, "panels", void 0);
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxBottomNavComponent.prototype, "id", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxBottomNavComponent.prototype, "onTabSelected", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxBottomNavComponent.prototype, "onTabDeselected", void 0);
    __decorate([
        core_1.HostListener("onTabSelected", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxBottomNavComponent.prototype, "_selectedPanelHandler", null);
    IgxBottomNavComponent = __decorate([
        core_1.Component({
            selector: "igx-tab-bar, igx-bottom-nav",
            template: __webpack_require__(239)
        }),
        deprecateDecorators_1.DeprecateClass("'igx-tab-bar' selector is deprecated. Use 'igx-bottom-nav' selector instead."),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], IgxBottomNavComponent);
    return IgxBottomNavComponent;
}());
exports.IgxBottomNavComponent = IgxBottomNavComponent;
var IgxTabPanelComponent = (function () {
    function IgxTabPanelComponent(_tabBar) {
        this._tabBar = _tabBar;
        this._itemStyle = "igx-tab-panel";
        this.isSelected = false;
        this.role = "tabpanel";
    }
    Object.defineProperty(IgxTabPanelComponent.prototype, "styleClass", {
        get: function () {
            return (!this.isSelected);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "selected", {
        get: function () {
            return this.isSelected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "labelledBy", {
        get: function () {
            return "igx-tab-" + this.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "id", {
        get: function () {
            return "igx-bottom-nav__panel-" + this.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "itemStyle", {
        get: function () {
            return this._itemStyle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "relatedTab", {
        get: function () {
            if (this._tabBar.tabs) {
                return this._tabBar.tabs.toArray()[this.index];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "index", {
        get: function () {
            return this._tabBar.panels.toArray().indexOf(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabPanelComponent.prototype, "customTabTemplate", {
        get: function () {
            return this._tabTemplate;
        },
        set: function (template) {
            this._tabTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    IgxTabPanelComponent.prototype.ngAfterContentInit = function () {
        if (this.tabTemplate) {
            this._tabTemplate = this.tabTemplate.template;
        }
    };
    IgxTabPanelComponent.prototype.select = function () {
        if (this.isDisabled || this._tabBar.selectedIndex === this.index) {
            return;
        }
        this.isSelected = true;
        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxTabPanelComponent.prototype, "label", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxTabPanelComponent.prototype, "icon", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], IgxTabPanelComponent.prototype, "isDisabled", void 0);
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxTabPanelComponent.prototype, "role", void 0);
    __decorate([
        core_1.HostBinding("class.igx-bottom-nav__panel"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxTabPanelComponent.prototype, "styleClass", null);
    __decorate([
        core_1.HostBinding("class.igx-bottom-nav__panel--selected"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxTabPanelComponent.prototype, "selected", null);
    __decorate([
        core_1.HostBinding("attr.aria-labelledby"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxTabPanelComponent.prototype, "labelledBy", null);
    __decorate([
        core_1.HostBinding("attr.id"),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], IgxTabPanelComponent.prototype, "id", null);
    __decorate([
        core_1.ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective }),
        __metadata("design:type", IgxTabTemplateDirective)
    ], IgxTabPanelComponent.prototype, "tabTemplate", void 0);
    IgxTabPanelComponent = __decorate([
        core_1.Component({
            selector: "igx-tab-panel",
            template: __webpack_require__(240)
        }),
        __metadata("design:paramtypes", [IgxBottomNavComponent])
    ], IgxTabPanelComponent);
    return IgxTabPanelComponent;
}());
exports.IgxTabPanelComponent = IgxTabPanelComponent;
var IgxTabComponent = (function () {
    function IgxTabComponent(_tabBar, _element) {
        this._tabBar = _tabBar;
        this._element = _element;
        this.role = "tab";
        this._changesCount = 0;
    }
    Object.defineProperty(IgxTabComponent.prototype, "changesCount", {
        get: function () {
            return this._changesCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "isDisabled", {
        get: function () {
            var panel = this.relatedPanel;
            if (panel) {
                return panel.isDisabled;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "isSelected", {
        get: function () {
            var panel = this.relatedPanel;
            if (panel) {
                return panel.isSelected;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTabComponent.prototype, "index", {
        get: function () {
            return this._tabBar.tabs.toArray().indexOf(this);
        },
        enumerable: true,
        configurable: true
    });
    IgxTabComponent.prototype.select = function () {
        this.relatedPanel.select();
    };
    __decorate([
        core_1.HostBinding("attr.role"),
        __metadata("design:type", Object)
    ], IgxTabComponent.prototype, "role", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", IgxTabPanelComponent)
    ], IgxTabComponent.prototype, "relatedPanel", void 0);
    IgxTabComponent = __decorate([
        core_1.Component({
            selector: "igx-tab",
            template: __webpack_require__(241)
        }),
        __metadata("design:paramtypes", [IgxBottomNavComponent, core_1.ElementRef])
    ], IgxTabComponent);
    return IgxTabComponent;
}());
exports.IgxTabComponent = IgxTabComponent;
var IgxBottomNavModule = (function () {
    function IgxBottomNavModule() {
    }
    IgxBottomNavModule = __decorate([
        core_1.NgModule({
            declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],
            exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],
            imports: [common_1.CommonModule, badge_component_1.IgxBadgeModule, icon_1.IgxIconModule]
        })
    ], IgxBottomNavModule);
    return IgxBottomNavModule;
}());
exports.IgxBottomNavModule = IgxBottomNavModule;


/***/ }),
/* 239 */
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <ng-content></ng-content>\r\n</div>\r\n<div #tablist class=\"{{itemStyle}}__menu {{itemStyle}}__menu--bottom\" role=\"tablist\" aria-orientation=\"horizontal\">\r\n    <igx-tab *ngFor=\"let panel of panels\" [id]=\"'igx-tab-' + panel.index\" [attr.aria-label]=\"panel.label\" [attr.aria-disabled]=\"panel.isDisabled\"\r\n        [attr.aria-selected]=\"panel.isSelected\" [attr.aria-controls]=\"'igx-tab-panel-'+ panel.index\" [ngClass]=\"{\r\n                 'igx-bottom-nav__menu-item': !panel.isSelected && !panel.isDisabled,\r\n                 'igx-bottom-nav__menu-item--selected': panel.isSelected,\r\n                 'igx-bottom-nav__menu-item--disabled': panel.isDisabled\r\n             }\" [relatedPanel]=\"panel\" (click)=\"panel.select()\" role=\"tab\">\r\n    </igx-tab>\r\n</div>"

/***/ }),
/* 240 */
/***/ (function(module, exports) {

module.exports = "<ng-content></ng-content>\n"

/***/ }),
/* 241 */
/***/ (function(module, exports) {

module.exports = "<ng-template #defaultTabTemplate>\n    <div *ngIf=\"relatedPanel.icon\" class=\"tab-icon\">\n        <igx-icon fontSet=\"material\" [name]=\"relatedPanel.icon\"></igx-icon>\n        <igx-badge [value]=\"changesCount\" [hidden]=\"changesCount === 0\"></igx-badge>\n    </div>\n    <div *ngIf=\"relatedPanel.label\" ngClass=\"tab-label\">{{relatedPanel.label}}</div>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"relatedPanel.customTabTemplate ? relatedPanel.customTabTemplate : defaultTabTemplate; context: { $implicit: relatedPanel }\">\n</ng-container>"

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var time_picker_component_1 = __webpack_require__(63);
var IgxItemListDirective = (function () {
    function IgxItemListDirective(timePicker, elementRef) {
        this.timePicker = timePicker;
        this.elementRef = elementRef;
        this.tabindex = 0;
    }
    Object.defineProperty(IgxItemListDirective.prototype, "defaultCSS", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxItemListDirective.prototype, "hourCSS", {
        get: function () {
            return this.type === "hourList";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxItemListDirective.prototype, "minuteCSS", {
        get: function () {
            return this.type === "minuteList";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxItemListDirective.prototype, "ampmCSS", {
        get: function () {
            return this.type === "ampmList";
        },
        enumerable: true,
        configurable: true
    });
    IgxItemListDirective.prototype.onFocus = function () {
        this.isActive = true;
    };
    IgxItemListDirective.prototype.onBlur = function () {
        this.isActive = false;
    };
    IgxItemListDirective.prototype.nextItem = function () {
        switch (this.type) {
            case "hourList": {
                this.timePicker.nextHour();
                break;
            }
            case "minuteList": {
                this.timePicker.nextMinute();
                break;
            }
            case "ampmList": {
                this.timePicker.nextAmPm();
                break;
            }
        }
    };
    IgxItemListDirective.prototype.prevItem = function () {
        switch (this.type) {
            case "hourList": {
                this.timePicker.prevHour();
                break;
            }
            case "minuteList": {
                this.timePicker.prevMinute();
                break;
            }
            case "ampmList": {
                this.timePicker.prevAmPm();
                break;
            }
        }
    };
    IgxItemListDirective.prototype.onKeydownArrowDown = function (event) {
        event.preventDefault();
        this.nextItem();
    };
    IgxItemListDirective.prototype.onKeydownArrowUp = function (event) {
        event.preventDefault();
        this.prevItem();
    };
    IgxItemListDirective.prototype.onKeydownArrowRight = function (event) {
        event.preventDefault();
        var listName = event.target.className;
        if (listName.indexOf("hourList") !== -1) {
            this.timePicker.minuteList.nativeElement.focus();
        }
        else if (listName.indexOf("minuteList") !== -1 && this.timePicker._ampmItems.length !== 0) {
            this.timePicker.ampmList.nativeElement.focus();
        }
    };
    IgxItemListDirective.prototype.onKeydownArrowLeft = function (event) {
        event.preventDefault();
        var listName = event.target.className;
        if (listName.indexOf("minuteList") !== -1) {
            this.timePicker.hourList.nativeElement.focus();
        }
        else if (listName.indexOf("ampmList") !== -1) {
            this.timePicker.minuteList.nativeElement.focus();
        }
    };
    IgxItemListDirective.prototype.onKeydownEnter = function (event) {
        event.preventDefault();
        this.timePicker.okButtonClick();
    };
    IgxItemListDirective.prototype.onKeydownEscape = function (event) {
        event.preventDefault();
        this.timePicker.cancelButtonClick();
    };
    IgxItemListDirective.prototype.onHover = function () {
        this.elementRef.nativeElement.focus();
    };
    IgxItemListDirective.prototype.onScroll = function (event) {
        event.preventDefault();
        event.stopPropagation();
        if (event.deltaY > 0) {
            this.nextItem();
        }
        else if (event.deltaY < 0) {
            this.prevItem();
        }
    };
    IgxItemListDirective.prototype.onPanMove = function (event) {
        if (event.deltaY < 0) {
            this.nextItem();
        }
        else if (event.deltaY > 0) {
            this.prevItem();
        }
    };
    __decorate([
        core_1.Input("igxItemList"),
        __metadata("design:type", String)
    ], IgxItemListDirective.prototype, "type", void 0);
    __decorate([
        core_1.HostBinding("attr.tabindex"),
        __metadata("design:type", Object)
    ], IgxItemListDirective.prototype, "tabindex", void 0);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__column"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxItemListDirective.prototype, "defaultCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__hourList"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxItemListDirective.prototype, "hourCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__minuteList"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxItemListDirective.prototype, "minuteCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__ampmList"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxItemListDirective.prototype, "ampmCSS", null);
    __decorate([
        core_1.HostListener("focus"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxItemListDirective.prototype, "onFocus", null);
    __decorate([
        core_1.HostListener("blur"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxItemListDirective.prototype, "onBlur", null);
    __decorate([
        core_1.HostListener("keydown.arrowdown", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxItemListDirective.prototype, "onKeydownArrowDown", null);
    __decorate([
        core_1.HostListener("keydown.arrowup", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxItemListDirective.prototype, "onKeydownArrowUp", null);
    __decorate([
        core_1.HostListener("keydown.arrowright", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxItemListDirective.prototype, "onKeydownArrowRight", null);
    __decorate([
        core_1.HostListener("keydown.arrowleft", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxItemListDirective.prototype, "onKeydownArrowLeft", null);
    __decorate([
        core_1.HostListener("keydown.enter", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxItemListDirective.prototype, "onKeydownEnter", null);
    __decorate([
        core_1.HostListener("keydown.escape", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], IgxItemListDirective.prototype, "onKeydownEscape", null);
    __decorate([
        core_1.HostListener("mouseover"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], IgxItemListDirective.prototype, "onHover", null);
    __decorate([
        core_1.HostListener("wheel", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxItemListDirective.prototype, "onScroll", null);
    __decorate([
        core_1.HostListener("panmove", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxItemListDirective.prototype, "onPanMove", null);
    IgxItemListDirective = __decorate([
        core_1.Directive({
            selector: "[igxItemList]"
        }),
        __param(0, core_1.Host()), __param(0, core_1.Inject(core_1.forwardRef(function () { return time_picker_component_1.IgxTimePickerComponent; }))),
        __metadata("design:paramtypes", [time_picker_component_1.IgxTimePickerComponent,
            core_1.ElementRef])
    ], IgxItemListDirective);
    return IgxItemListDirective;
}());
exports.IgxItemListDirective = IgxItemListDirective;
var IgxHourItemDirective = (function () {
    function IgxHourItemDirective(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    Object.defineProperty(IgxHourItemDirective.prototype, "defaultCSS", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHourItemDirective.prototype, "selectedCSS", {
        get: function () {
            return this.isSelectedHour;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHourItemDirective.prototype, "activeCSS", {
        get: function () {
            return this.isSelectedHour && this.itemList.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHourItemDirective.prototype, "isSelectedHour", {
        get: function () {
            return this.timePicker.selectedHour === this.value;
        },
        enumerable: true,
        configurable: true
    });
    IgxHourItemDirective.prototype.onClick = function (item) {
        if (item !== "") {
            this.timePicker.scrollHourIntoView(item);
        }
    };
    __decorate([
        core_1.Input("igxHourItem"),
        __metadata("design:type", String)
    ], IgxHourItemDirective.prototype, "value", void 0);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__item"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxHourItemDirective.prototype, "defaultCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__item--selected"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxHourItemDirective.prototype, "selectedCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__item--active"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxHourItemDirective.prototype, "activeCSS", null);
    __decorate([
        core_1.HostListener("click", ["value"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxHourItemDirective.prototype, "onClick", null);
    IgxHourItemDirective = __decorate([
        core_1.Directive({
            selector: "[igxHourItem]"
        }),
        __param(0, core_1.Host()), __param(0, core_1.Inject(core_1.forwardRef(function () { return time_picker_component_1.IgxTimePickerComponent; }))),
        __metadata("design:paramtypes", [time_picker_component_1.IgxTimePickerComponent,
            IgxItemListDirective])
    ], IgxHourItemDirective);
    return IgxHourItemDirective;
}());
exports.IgxHourItemDirective = IgxHourItemDirective;
var IgxMinuteItemDirective = (function () {
    function IgxMinuteItemDirective(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    Object.defineProperty(IgxMinuteItemDirective.prototype, "defaultCSS", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMinuteItemDirective.prototype, "selectedCSS", {
        get: function () {
            return this.isSelectedMinute;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMinuteItemDirective.prototype, "activeCSS", {
        get: function () {
            return this.isSelectedMinute && this.itemList.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMinuteItemDirective.prototype, "isSelectedMinute", {
        get: function () {
            return this.timePicker.selectedMinute === this.value;
        },
        enumerable: true,
        configurable: true
    });
    IgxMinuteItemDirective.prototype.onClick = function (item) {
        if (item !== "") {
            this.timePicker.scrollMinuteIntoView(item);
        }
    };
    __decorate([
        core_1.Input("igxMinuteItem"),
        __metadata("design:type", String)
    ], IgxMinuteItemDirective.prototype, "value", void 0);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__item"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxMinuteItemDirective.prototype, "defaultCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__item--selected"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxMinuteItemDirective.prototype, "selectedCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__item--active"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxMinuteItemDirective.prototype, "activeCSS", null);
    __decorate([
        core_1.HostListener("click", ["value"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxMinuteItemDirective.prototype, "onClick", null);
    IgxMinuteItemDirective = __decorate([
        core_1.Directive({
            selector: "[igxMinuteItem]"
        }),
        __param(0, core_1.Host()), __param(0, core_1.Inject(core_1.forwardRef(function () { return time_picker_component_1.IgxTimePickerComponent; }))),
        __metadata("design:paramtypes", [time_picker_component_1.IgxTimePickerComponent,
            IgxItemListDirective])
    ], IgxMinuteItemDirective);
    return IgxMinuteItemDirective;
}());
exports.IgxMinuteItemDirective = IgxMinuteItemDirective;
var IgxAmPmItemDirective = (function () {
    function IgxAmPmItemDirective(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    Object.defineProperty(IgxAmPmItemDirective.prototype, "defaultCSS", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAmPmItemDirective.prototype, "selectedCSS", {
        get: function () {
            return this.isSelectedAmPm;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAmPmItemDirective.prototype, "activeCSS", {
        get: function () {
            return this.isSelectedAmPm && this.itemList.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxAmPmItemDirective.prototype, "isSelectedAmPm", {
        get: function () {
            return this.timePicker.selectedAmPm === this.value;
        },
        enumerable: true,
        configurable: true
    });
    IgxAmPmItemDirective.prototype.onClick = function (item) {
        if (item !== "") {
            this.timePicker.scrollAmPmIntoView(item);
        }
    };
    __decorate([
        core_1.Input("igxAmPmItem"),
        __metadata("design:type", String)
    ], IgxAmPmItemDirective.prototype, "value", void 0);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__item"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxAmPmItemDirective.prototype, "defaultCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__item--selected"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxAmPmItemDirective.prototype, "selectedCSS", null);
    __decorate([
        core_1.HostBinding("class.igx-time-picker__item--active"),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], IgxAmPmItemDirective.prototype, "activeCSS", null);
    __decorate([
        core_1.HostListener("click", ["value"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxAmPmItemDirective.prototype, "onClick", null);
    IgxAmPmItemDirective = __decorate([
        core_1.Directive({
            selector: "[igxAmPmItem]"
        }),
        __param(0, core_1.Host()), __param(0, core_1.Inject(core_1.forwardRef(function () { return time_picker_component_1.IgxTimePickerComponent; }))),
        __metadata("design:paramtypes", [time_picker_component_1.IgxTimePickerComponent,
            IgxItemListDirective])
    ], IgxAmPmItemDirective);
    return IgxAmPmItemDirective;
}());
exports.IgxAmPmItemDirective = IgxAmPmItemDirective;


/***/ }),
/* 243 */
/***/ (function(module, exports) {

module.exports = "<igx-input-group (click)=\"onClick()\">\r\n    <igx-prefix>\r\n        <igx-icon>access_time</igx-icon>\r\n    </igx-prefix>\r\n    <label igxLabel>Time</label>\r\n    <input igxInput [value]=\"displayTime\" [disabled]=\"isDisabled\" tabindex=\"0\" readonly />\r\n</igx-input-group>\r\n<ng-container *ngTemplateOutlet=\"scroll\"></ng-container>\r\n<ng-template #scroll>\r\n    <igx-dialog class=\"igx-time-picker__dialog-popup\" closeOnOutsideSelect=\"true\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\"\r\n        [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\r\n        <ng-container #container>\r\n            <div class=\"igx-time-picker__wrapper\">\r\n                <div class=\"igx-time-picker__header\">\r\n                    <h5 class=\"igx-time-picker__header-ampm\">{{ selectedAmPm }}</h5>\r\n                    <h2 class=\"igx-time-picker__header-hour\">\r\n                        <span>{{ selectedHour }}</span>:<span>{{ selectedMinute }}</span>\r\n                    </h2>\r\n                </div>\r\n                <div class=\"igx-time-picker__body\">\r\n                    <div #hourList [igxItemList]=\"'hourList'\">\r\n                        <span [igxHourItem]=\"hour\" *ngFor=\"let hour of hourView\">{{ hour }}</span>\r\n                    </div>\r\n                    <div #minuteList [igxItemList]=\"'minuteList'\">\r\n                        <span [igxMinuteItem]=\"minute\" *ngFor=\"let minute of minuteView\">{{ minute }}</span>\r\n                    </div>\r\n                    <div #ampmList [igxItemList]=\"'ampmList'\">\r\n                        <span [igxAmPmItem]=\"ampm\" *ngFor=\"let ampm of ampmView\">{{ ampm }}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n    </igx-dialog>\r\n</ng-template>\r\n"

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__(5);
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var navigation_1 = __webpack_require__(25);
var NEXT_ID = 0;
var IgxToastComponent = (function () {
    function IgxToastComponent(elementRef, navService) {
        this.elementRef = elementRef;
        this.navService = navService;
        this.CSS_CLASSES = {
            IGX_TOAST_BOTTOM: "igx-toast--bottom",
            IGX_TOAST_MIDDLE: "igx-toast--middle",
            IGX_TOAST_TOP: "igx-toast--top"
        };
        this.id = "igx-toast-" + NEXT_ID++;
        this.onShowing = new core_1.EventEmitter();
        this.onShown = new core_1.EventEmitter();
        this.onHiding = new core_1.EventEmitter();
        this.onHidden = new core_1.EventEmitter();
        this.role = "alert";
        this.autoHide = true;
        this.displayTime = 4000;
        this.isVisible = false;
        this.position = IgxToastPosition.Bottom;
    }
    Object.defineProperty(IgxToastComponent.prototype, "element", {
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    IgxToastComponent.prototype.show = function () {
        var _this = this;
        clearInterval(this.timeoutId);
        this.onShowing.emit(this);
        this.isVisible = true;
        if (this.autoHide) {
            this.timeoutId = setTimeout(function () {
                _this.hide();
            }, this.displayTime);
        }
        this.onShown.emit(this);
    };
    IgxToastComponent.prototype.hide = function () {
        this.onHiding.emit(this);
        this.isVisible = false;
        this.onHidden.emit(this);
        clearInterval(this.timeoutId);
    };
    IgxToastComponent.prototype.open = function () {
        this.show();
    };
    IgxToastComponent.prototype.close = function () {
        this.hide();
    };
    IgxToastComponent.prototype.toggle = function () {
        this.isVisible ? this.close() : this.open();
    };
    IgxToastComponent.prototype.mapPositionToClassName = function () {
        if (this.position === IgxToastPosition.Top) {
            return this.CSS_CLASSES.IGX_TOAST_TOP;
        }
        if (this.position === IgxToastPosition.Middle) {
            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;
        }
        if (this.position === IgxToastPosition.Bottom) {
            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;
        }
    };
    IgxToastComponent.prototype.ngOnInit = function () {
        if (this.navService && this.id) {
            this.navService.add(this.id, this);
        }
    };
    IgxToastComponent.prototype.ngOnDestroy = function () {
        if (this.navService && this.id) {
            this.navService.remove(this.id);
        }
    };
    __decorate([
        core_1.HostBinding("attr.id"),
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxToastComponent.prototype, "id", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxToastComponent.prototype, "onShowing", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxToastComponent.prototype, "onShown", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxToastComponent.prototype, "onHiding", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxToastComponent.prototype, "onHidden", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxToastComponent.prototype, "role", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxToastComponent.prototype, "autoHide", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxToastComponent.prototype, "displayTime", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], IgxToastComponent.prototype, "isVisible", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxToastComponent.prototype, "message", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], IgxToastComponent.prototype, "position", void 0);
    IgxToastComponent = __decorate([
        core_1.Component({
            animations: [
                animations_1.trigger("animate", [
                    animations_1.state("show", animations_1.style({
                        opacity: 1
                    })),
                    animations_1.transition("* => show", animations_1.animate(".20s ease")),
                    animations_1.transition("show => *", animations_1.animate(".40s ease-out"))
                ])
            ],
            selector: "igx-toast",
            template: __webpack_require__(245)
        }),
        __param(1, core_1.Optional()),
        __metadata("design:paramtypes", [core_1.ElementRef,
            navigation_1.IgxNavigationService])
    ], IgxToastComponent);
    return IgxToastComponent;
}());
exports.IgxToastComponent = IgxToastComponent;
var IgxToastPosition;
(function (IgxToastPosition) {
    IgxToastPosition[IgxToastPosition["Bottom"] = 0] = "Bottom";
    IgxToastPosition[IgxToastPosition["Middle"] = 1] = "Middle";
    IgxToastPosition[IgxToastPosition["Top"] = 2] = "Top";
})(IgxToastPosition = exports.IgxToastPosition || (exports.IgxToastPosition = {}));
var IgxToastModule = (function () {
    function IgxToastModule() {
    }
    IgxToastModule = __decorate([
        core_1.NgModule({
            declarations: [IgxToastComponent],
            exports: [IgxToastComponent],
            imports: [common_1.CommonModule]
        })
    ], IgxToastModule);
    return IgxToastModule;
}());
exports.IgxToastModule = IgxToastModule;


/***/ }),
/* 245 */
/***/ (function(module, exports) {

module.exports = "<div [ngClass]=\"mapPositionToClassName()\" *ngIf=\"this.isVisible\" [@animate]=\"'show'\">\n    {{ message }}\n</div>\n"

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var IgxFilterDirective = (function () {
    function IgxFilterDirective(element, renderer) {
        this.element = element;
        this.filtering = new core_1.EventEmitter(false);
        this.filtered = new core_1.EventEmitter();
    }
    IgxFilterDirective.prototype.ngOnChanges = function (changes) {
        if (changes.filterOptions &&
            changes.filterOptions.currentValue &&
            changes.filterOptions.currentValue.inputValue !== undefined &&
            changes.filterOptions.previousValue &&
            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {
            this.filter();
        }
    };
    IgxFilterDirective.prototype.filter = function () {
        if (!this.filterOptions.items) {
            return;
        }
        var args = { cancel: false, items: this.filterOptions.items };
        this.filtering.emit(args);
        if (args.cancel) {
            return;
        }
        var pipe = new IgxFilterPipe();
        var filtered = pipe.transform(this.filterOptions.items, this.filterOptions);
        this.filtered.emit({ filteredItems: filtered });
    };
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxFilterDirective.prototype, "filtering", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxFilterDirective.prototype, "filtered", void 0);
    __decorate([
        core_1.Input("igxFilter"),
        __metadata("design:type", IgxFilterOptions)
    ], IgxFilterDirective.prototype, "filterOptions", void 0);
    IgxFilterDirective = __decorate([
        core_1.Directive({
            selector: "[igxFilter]"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer2])
    ], IgxFilterDirective);
    return IgxFilterDirective;
}());
exports.IgxFilterDirective = IgxFilterDirective;
var IgxFilterPipe = (function () {
    function IgxFilterPipe() {
    }
    IgxFilterPipe.prototype.transform = function (items, options) {
        var result = [];
        if (!items || !items.length || !options) {
            return;
        }
        if (options.items) {
            items = options.items;
        }
        result = items.filter(function (item) {
            var match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);
            if (match) {
                if (options.metConditionFn) {
                    options.metConditionFn(item);
                }
            }
            else {
                if (options.overdueConditionFn) {
                    options.overdueConditionFn(item);
                }
            }
            return match;
        });
        return result;
    };
    IgxFilterPipe = __decorate([
        core_1.Pipe({
            name: "igxFilter",
            pure: false
        })
    ], IgxFilterPipe);
    return IgxFilterPipe;
}());
exports.IgxFilterPipe = IgxFilterPipe;
var IgxFilterOptions = (function () {
    function IgxFilterOptions() {
        this.inputValue = "";
    }
    IgxFilterOptions.prototype.get_value = function (item, key) {
        var result = "";
        if (key) {
            result = item[key].toString();
        }
        else if (item.element) {
            if (item.element.nativeElement) {
                result = item.element.nativeElement.textContent.trim();
            }
            else if (item.element.textContent) {
                result = item.element.textContent.trim();
            }
        }
        return result;
    };
    IgxFilterOptions.prototype.formatter = function (valueToTest) {
        return valueToTest.toLowerCase();
    };
    IgxFilterOptions.prototype.matchFn = function (valueToTest, inputValue) {
        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || "") > -1;
    };
    IgxFilterOptions.prototype.metConditionFn = function (item) {
        if (item.hasOwnProperty("hidden")) {
            item.hidden = false;
        }
    };
    IgxFilterOptions.prototype.overdueConditionFn = function (item) {
        if (item.hasOwnProperty("hidden")) {
            item.hidden = true;
        }
    };
    return IgxFilterOptions;
}());
exports.IgxFilterOptions = IgxFilterOptions;
var IgxFilterModule = (function () {
    function IgxFilterModule() {
    }
    IgxFilterModule = __decorate([
        core_1.NgModule({
            declarations: [IgxFilterDirective, IgxFilterPipe],
            exports: [IgxFilterDirective, IgxFilterPipe],
            imports: [common_1.CommonModule]
        })
    ], IgxFilterModule);
    return IgxFilterModule;
}());
exports.IgxFilterModule = IgxFilterModule;


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var IgxLayoutDirective = (function () {
    function IgxLayoutDirective() {
        this.dir = "row";
        this.reverse = false;
        this.wrap = "nowrap";
        this.justify = "flex-start";
        this.itemAlign = "stretch";
        this.display = "flex";
    }
    Object.defineProperty(IgxLayoutDirective.prototype, "flexwrap", {
        get: function () { return this.wrap; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLayoutDirective.prototype, "justifycontent", {
        get: function () { return this.justify; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLayoutDirective.prototype, "align", {
        get: function () { return this.itemAlign; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLayoutDirective.prototype, "direction", {
        get: function () {
            if (this.reverse) {
                return (this.dir === "row") ? "row-reverse" : "column-reverse";
            }
            return (this.dir === "row") ? "row" : "column";
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input("igxLayoutDir"),
        __metadata("design:type", Object)
    ], IgxLayoutDirective.prototype, "dir", void 0);
    __decorate([
        core_1.Input("igxLayoutReverse"),
        __metadata("design:type", Object)
    ], IgxLayoutDirective.prototype, "reverse", void 0);
    __decorate([
        core_1.Input("igxLayoutWrap"),
        __metadata("design:type", Object)
    ], IgxLayoutDirective.prototype, "wrap", void 0);
    __decorate([
        core_1.Input("igxLayoutJustify"),
        __metadata("design:type", Object)
    ], IgxLayoutDirective.prototype, "justify", void 0);
    __decorate([
        core_1.Input("igxLayoutItemAlign"),
        __metadata("design:type", Object)
    ], IgxLayoutDirective.prototype, "itemAlign", void 0);
    __decorate([
        core_1.HostBinding("style.display"),
        __metadata("design:type", Object)
    ], IgxLayoutDirective.prototype, "display", void 0);
    __decorate([
        core_1.HostBinding("style.flex-wrap"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxLayoutDirective.prototype, "flexwrap", null);
    __decorate([
        core_1.HostBinding("style.justify-content"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxLayoutDirective.prototype, "justifycontent", null);
    __decorate([
        core_1.HostBinding("style.align-items"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxLayoutDirective.prototype, "align", null);
    __decorate([
        core_1.HostBinding("style.flex-direction"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxLayoutDirective.prototype, "direction", null);
    IgxLayoutDirective = __decorate([
        core_1.Directive({
            selector: "[igxLayout]"
        })
    ], IgxLayoutDirective);
    return IgxLayoutDirective;
}());
exports.IgxLayoutDirective = IgxLayoutDirective;
var IgxFlexDirective = (function () {
    function IgxFlexDirective() {
        this.grow = 1;
        this.shrink = 1;
        this.flex = "";
        this.order = 0;
        this.basis = "auto";
    }
    Object.defineProperty(IgxFlexDirective.prototype, "style", {
        get: function () {
            if (this.flex) {
                return "" + this.flex;
            }
            return this.grow + " " + this.shrink + " " + this.basis;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxFlexDirective.prototype, "itemorder", {
        get: function () {
            return this.order || 0;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input("igxFlexGrow"),
        __metadata("design:type", Object)
    ], IgxFlexDirective.prototype, "grow", void 0);
    __decorate([
        core_1.Input("igxFlexShrink"),
        __metadata("design:type", Object)
    ], IgxFlexDirective.prototype, "shrink", void 0);
    __decorate([
        core_1.Input("igxFlex"),
        __metadata("design:type", Object)
    ], IgxFlexDirective.prototype, "flex", void 0);
    __decorate([
        core_1.Input("igxFlexOrder"),
        __metadata("design:type", Object)
    ], IgxFlexDirective.prototype, "order", void 0);
    __decorate([
        core_1.Input("igxFlexBasis"),
        __metadata("design:type", Object)
    ], IgxFlexDirective.prototype, "basis", void 0);
    __decorate([
        core_1.HostBinding("style.flex"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxFlexDirective.prototype, "style", null);
    __decorate([
        core_1.HostBinding("style.order"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], IgxFlexDirective.prototype, "itemorder", null);
    IgxFlexDirective = __decorate([
        core_1.Directive({
            selector: "[igxFlex]"
        })
    ], IgxFlexDirective);
    return IgxFlexDirective;
}());
exports.IgxFlexDirective = IgxFlexDirective;
var IgxLayoutModule = (function () {
    function IgxLayoutModule() {
    }
    IgxLayoutModule = __decorate([
        core_1.NgModule({
            declarations: [IgxFlexDirective, IgxLayoutDirective],
            exports: [IgxFlexDirective, IgxLayoutDirective]
        })
    ], IgxLayoutModule);
    return IgxLayoutModule;
}());
exports.IgxLayoutModule = IgxLayoutModule;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(3);
var core_1 = __webpack_require__(0);
var forms_1 = __webpack_require__(7);
var mask_helper_1 = __webpack_require__(249);
var noop = function () { };
var IgxMaskDirective = (function () {
    function IgxMaskDirective(elementRef) {
        this.elementRef = elementRef;
        this.onValueChange = new core_1.EventEmitter();
        this._maskOptions = {
            format: "",
            promptChar: ""
        };
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
        this.maskHelper = new mask_helper_1.MaskHelper();
    }
    IgxMaskDirective_1 = IgxMaskDirective;
    Object.defineProperty(IgxMaskDirective.prototype, "value", {
        get: function () {
            return this.nativeElement.value;
        },
        set: function (val) {
            this.nativeElement.value = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "nativeElement", {
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "selectionStart", {
        get: function () {
            return this.nativeElement.selectionStart;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "selectionEnd", {
        get: function () {
            return this.nativeElement.selectionEnd;
        },
        enumerable: true,
        configurable: true
    });
    IgxMaskDirective.prototype.ngOnInit = function () {
        if (this.promptChar && this.promptChar.length > 1) {
            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);
        }
        this._maskOptions.format = this.mask ? this.mask : "CCCCCCCCCC";
        this._maskOptions.promptChar = this.promptChar ? this.promptChar : "_";
        this.nativeElement.setAttribute("placeholder", this.mask);
    };
    IgxMaskDirective.prototype.onKeydown = function (event) {
        var key = event.keyCode || event.charCode;
        if (key === mask_helper_1.KEYS.Ctrl) {
            this._ctrlDown = true;
        }
        if ((this._ctrlDown && key === mask_helper_1.KEYS.Z) || (this._ctrlDown && key === mask_helper_1.KEYS.Y)) {
            event.preventDefault();
        }
        this._key = key;
        this._selection = Math.abs(this.selectionEnd - this.selectionStart);
    };
    IgxMaskDirective.prototype.onKeyup = function (event) {
        var key = event.keyCode || event.charCode;
        if (key === mask_helper_1.KEYS.Ctrl) {
            this._ctrlDown = false;
        }
    };
    IgxMaskDirective.prototype.onPaste = function (event) {
        this._paste = true;
        this._valOnPaste = this.value;
        this._cursorOnPaste = this.getCursorPosition();
    };
    IgxMaskDirective.prototype.onInputChanged = function (event) {
        if (this._paste) {
            this._paste = false;
            var clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());
            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);
            this.setCursorPosition(this.maskHelper.cursor);
        }
        else {
            var currentCursorPos = this.getCursorPosition();
            this.maskHelper.data = (this._key === mask_helper_1.KEYS.BACKSPACE) || (this._key === mask_helper_1.KEYS.DELETE);
            this.value = this._selection && this._selection !== 0 ?
                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :
                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);
            this.setCursorPosition(this.maskHelper.cursor);
        }
        var rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);
        this.dataValue = this.includeLiterals ? this.value : rawVal;
        this._onChangeCallback(this.dataValue);
        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });
    };
    IgxMaskDirective.prototype.onFocus = function (event) {
        this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);
    };
    IgxMaskDirective.prototype.getCursorPosition = function () {
        return this.nativeElement.selectionStart;
    };
    IgxMaskDirective.prototype.setCursorPosition = function (start, end) {
        if (end === void 0) { end = start; }
        this.nativeElement.setSelectionRange(start, end);
    };
    IgxMaskDirective.prototype.writeValue = function (value) {
        if (this.promptChar && this.promptChar.length > 1) {
            this._maskOptions.promptChar = this.promptChar.substring(0, 1);
        }
        this.value = this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions);
        this.dataValue = this.includeLiterals ? this.value : value;
        this._onChangeCallback(this.dataValue);
        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });
    };
    IgxMaskDirective.prototype.registerOnChange = function (fn) { this._onChangeCallback = fn; };
    IgxMaskDirective.prototype.registerOnTouched = function (fn) { this._onTouchedCallback = fn; };
    __decorate([
        core_1.Input("igxMask"),
        __metadata("design:type", String)
    ], IgxMaskDirective.prototype, "mask", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxMaskDirective.prototype, "promptChar", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], IgxMaskDirective.prototype, "includeLiterals", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], IgxMaskDirective.prototype, "dataValue", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxMaskDirective.prototype, "onValueChange", void 0);
    __decorate([
        core_1.HostListener("keydown", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxMaskDirective.prototype, "onKeydown", null);
    __decorate([
        core_1.HostListener("keyup", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxMaskDirective.prototype, "onKeyup", null);
    __decorate([
        core_1.HostListener("paste", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxMaskDirective.prototype, "onPaste", null);
    __decorate([
        core_1.HostListener("input", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxMaskDirective.prototype, "onInputChanged", null);
    __decorate([
        core_1.HostListener("focus", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], IgxMaskDirective.prototype, "onFocus", null);
    IgxMaskDirective = IgxMaskDirective_1 = __decorate([
        core_1.Directive({
            providers: [{ provide: forms_1.NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective_1, multi: true }],
            selector: "[igxMask]"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], IgxMaskDirective);
    return IgxMaskDirective;
    var IgxMaskDirective_1;
}());
exports.IgxMaskDirective = IgxMaskDirective;
var IgxMaskModule = (function () {
    function IgxMaskModule() {
    }
    IgxMaskModule = __decorate([
        core_1.NgModule({
            declarations: [IgxMaskDirective],
            exports: [IgxMaskDirective],
            imports: [common_1.CommonModule]
        })
    ], IgxMaskModule);
    return IgxMaskModule;
}());
exports.IgxMaskModule = IgxMaskModule;


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MASK_FLAGS = ["C", "&", "a", "A", "?", "L", "9", "0", "#"];
exports.KEYS = {
    Ctrl: 17,
    Z: 90,
    Y: 89,
    X: 88,
    BACKSPACE: 8,
    DELETE: 46
};
var MaskHelper = (function () {
    function MaskHelper() {
    }
    Object.defineProperty(MaskHelper.prototype, "cursor", {
        get: function () {
            return this._cursor;
        },
        enumerable: true,
        configurable: true
    });
    MaskHelper.prototype.parseValueByMask = function (value, maskOptions, cursor) {
        var inputValue = value;
        var mask = maskOptions.format;
        var literals = this.getMaskLiterals(mask);
        var literalKeys = Array.from(literals.keys());
        var nonLiteralIndeces = this.getNonLiteralIndeces(mask, literalKeys);
        if (inputValue.length < mask.length) {
            if (inputValue === "" && cursor === -1) {
                this._cursor = 0;
                return this.parseValueByMaskOnInit(value, maskOptions);
            }
            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {
                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);
                this._cursor = cursor + 1;
            }
            else {
                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);
                this._cursor = cursor + 1;
                for (var i = this._cursor; i < 0; i--) {
                    if (literalKeys.indexOf(this._cursor) !== -1) {
                        this._cursor--;
                    }
                    else {
                        break;
                    }
                }
            }
        }
        else {
            var char = inputValue[cursor];
            var isCharValid = this.validateCharOnPostion(char, cursor, mask);
            if (nonLiteralIndeces.indexOf(cursor) !== -1) {
                inputValue = this.replaceCharAt(inputValue, cursor, "");
                if (isCharValid) {
                    inputValue = this.replaceCharAt(inputValue, cursor, char);
                    this._cursor = cursor + 1;
                }
                else {
                    this._cursor = cursor;
                }
            }
            else {
                inputValue = this.replaceCharAt(inputValue, cursor, "");
                this._cursor = ++cursor;
                for (var i = cursor; i < mask.length; i++) {
                    if (literalKeys.indexOf(this._cursor) !== -1) {
                        this._cursor = ++cursor;
                    }
                    else {
                        isCharValid = this.validateCharOnPostion(char, cursor, mask);
                        if (isCharValid) {
                            inputValue = this.replaceCharAt(inputValue, cursor, char);
                            this._cursor = ++cursor;
                            break;
                        }
                        else {
                            break;
                        }
                    }
                }
            }
        }
        return inputValue;
    };
    MaskHelper.prototype.parseValueByMaskOnInit = function (inputVal, maskOptions) {
        var _this = this;
        var outputVal = "";
        var value = "";
        var mask = maskOptions.format;
        var literals = this.getMaskLiterals(mask);
        var literalKeys = Array.from(literals.keys());
        var nonLiteralIndeces = this.getNonLiteralIndeces(mask, literalKeys);
        var literalValues = Array.from(literals.values());
        if (inputVal != null) {
            value = inputVal.toString();
        }
        for (var _i = 0, mask_1 = mask; _i < mask_1.length; _i++) {
            var maskSym = mask_1[_i];
            outputVal += maskOptions.promptChar;
        }
        literals.forEach(function (val, key) {
            outputVal = _this.replaceCharAt(outputVal, key, val);
        });
        if (!value) {
            return outputVal;
        }
        var nonLiteralValues = this.getNonLiteralValues(value, literalValues);
        for (var i = 0; i < nonLiteralValues.length; i++) {
            var char = nonLiteralValues[i];
            var isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);
            if (!isCharValid && char !== maskOptions.promptChar) {
                nonLiteralValues[i] = maskOptions.promptChar;
            }
        }
        if (nonLiteralValues.length > nonLiteralIndeces.length) {
            nonLiteralValues.splice(nonLiteralIndeces.length);
        }
        var pos = 0;
        for (var _a = 0, nonLiteralValues_1 = nonLiteralValues; _a < nonLiteralValues_1.length; _a++) {
            var nonLiteralValue = nonLiteralValues_1[_a];
            var char = nonLiteralValue;
            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);
        }
        return outputVal;
    };
    MaskHelper.prototype.restoreValueFromMask = function (value, maskOptions) {
        var outputVal = "";
        var mask = maskOptions.format;
        var literals = this.getMaskLiterals(mask);
        var literalValues = Array.from(literals.values());
        for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
            var val = value_1[_i];
            if (literalValues.indexOf(val) === -1) {
                if (val !== maskOptions.promptChar) {
                    outputVal += val;
                }
            }
        }
        return outputVal;
    };
    MaskHelper.prototype.parseValueByMaskUponSelection = function (value, maskOptions, cursor, selection) {
        var isCharValid;
        var inputValue = value;
        var char = inputValue[cursor];
        var mask = maskOptions.format;
        var literals = this.getMaskLiterals(mask);
        var literalKeys = Array.from(literals.keys());
        var nonLiteralIndeces = this.getNonLiteralIndeces(mask, literalKeys);
        if (!this.data) {
            this._cursor = cursor < 0 ? ++cursor : cursor;
            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {
                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);
                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :
                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);
                selection--;
                if (selection > 0) {
                    for (var i = 0; i < selection; i++) {
                        cursor++;
                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?
                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :
                            this.insertCharAt(inputValue, cursor, mask[cursor]);
                    }
                }
            }
            else {
                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);
                this._cursor++;
                selection--;
                var isMarked = false;
                if (selection > 0) {
                    cursor = this._cursor;
                    for (var i = 0; i < selection; i++) {
                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {
                            isCharValid = this.validateCharOnPostion(char, cursor, mask);
                            if (isCharValid && !isMarked) {
                                inputValue = this.insertCharAt(inputValue, cursor, char);
                                cursor++;
                                this._cursor++;
                                isMarked = true;
                            }
                            else {
                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);
                                cursor++;
                            }
                        }
                        else {
                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);
                            if (cursor === this._cursor) {
                                this._cursor++;
                            }
                            cursor++;
                        }
                    }
                }
            }
        }
        else {
            if (inputValue === "" && cursor === -1) {
                this._cursor = 0;
                return this.parseValueByMaskOnInit(value, maskOptions);
            }
            if (this._cursor < 0) {
                this._cursor++;
                cursor++;
            }
            cursor++;
            this._cursor = cursor;
            for (var i = 0; i < selection; i++) {
                if (nonLiteralIndeces.indexOf(cursor) !== -1) {
                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);
                    cursor++;
                }
                else {
                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);
                    cursor++;
                }
            }
        }
        return inputValue;
    };
    MaskHelper.prototype.parseValueByMaskUponCopyPaste = function (value, maskOptions, cursor, clipboardData, selection) {
        var inputValue = value;
        var mask = maskOptions.format;
        var literals = this.getMaskLiterals(mask);
        var literalKeys = Array.from(literals.keys());
        var nonLiteralIndeces = this.getNonLiteralIndeces(mask, literalKeys);
        var selectionEnd = cursor + selection;
        this._cursor = cursor;
        for (var _i = 0, clipboardData_1 = clipboardData; _i < clipboardData_1.length; _i++) {
            var clipboardSym = clipboardData_1[_i];
            var char = clipboardSym;
            if (this._cursor > mask.length) {
                return inputValue;
            }
            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {
                var isCharValid = this.validateCharOnPostion(char, this._cursor, mask);
                if (isCharValid) {
                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);
                }
            }
            else {
                for (var i = cursor; i < mask.length; i++) {
                    if (literalKeys.indexOf(this._cursor) !== -1) {
                        this._cursor++;
                    }
                    else {
                        var isCharValid = this.validateCharOnPostion(char, this._cursor, mask);
                        if (isCharValid) {
                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);
                        }
                        break;
                    }
                }
            }
            selection--;
        }
        if (selection > 0) {
            for (var i = this._cursor; i < selectionEnd; i++) {
                if (literalKeys.indexOf(this._cursor) !== -1) {
                    this._cursor++;
                }
                else {
                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);
                }
            }
        }
        return inputValue;
    };
    MaskHelper.prototype.validateCharOnPostion = function (inputChar, position, mask) {
        var regex;
        var isValid;
        var letterOrDigitRegEx = "[\\d\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z]";
        var letterDigitOrSpaceRegEx = "[\\d\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z\\u0020]";
        var letterRegEx = "[\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z]";
        var letteSpaceRegEx = "[\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z\\u0020]";
        var digitRegEx = "[\\d]";
        var digitSpaceRegEx = "[\\d\\u0020]";
        var digitSpecialRegEx = "[\\d-\\+]";
        switch (mask.charAt(position)) {
            case "C":
                isValid = inputChar !== "";
                break;
            case "&":
                regex = new RegExp("[\\u0020]");
                isValid = !regex.test(inputChar);
                break;
            case "a":
                regex = new RegExp(letterDigitOrSpaceRegEx);
                isValid = regex.test(inputChar);
                break;
            case "A":
                regex = new RegExp(letterOrDigitRegEx);
                isValid = regex.test(inputChar);
                break;
            case "?":
                regex = new RegExp(letteSpaceRegEx);
                isValid = regex.test(inputChar);
                break;
            case "L":
                regex = new RegExp(letterRegEx);
                isValid = regex.test(inputChar);
                break;
            case "0":
                regex = new RegExp(digitRegEx);
                isValid = regex.test(inputChar);
                break;
            case "9":
                regex = new RegExp(digitSpaceRegEx);
                isValid = regex.test(inputChar);
                break;
            case "#":
                regex = new RegExp(digitSpecialRegEx);
                isValid = regex.test(inputChar);
                break;
            default: {
                isValid = null;
            }
        }
        return isValid;
    };
    MaskHelper.prototype.replaceCharAt = function (strValue, index, char) {
        if (strValue !== undefined) {
            return strValue.substring(0, index) + char + strValue.substring(index + 1);
        }
    };
    MaskHelper.prototype.insertCharAt = function (strValue, index, char) {
        if (strValue !== undefined) {
            return strValue.substring(0, index) + char + strValue.substring(index);
        }
    };
    MaskHelper.prototype.getMaskLiterals = function (mask) {
        var literals = new Map();
        for (var i = 0; i < mask.length; i++) {
            var char = mask.charAt(i);
            if (exports.MASK_FLAGS.indexOf(char) === -1) {
                literals.set(i, char);
            }
        }
        return literals;
    };
    MaskHelper.prototype.getNonLiteralIndeces = function (mask, literalKeys) {
        var nonLiteralsIndeces = new Array();
        for (var i = 0; i < mask.length; i++) {
            if (literalKeys.indexOf(i) === -1) {
                nonLiteralsIndeces.push(i);
            }
        }
        return nonLiteralsIndeces;
    };
    MaskHelper.prototype.getNonLiteralValues = function (value, literalValues) {
        var nonLiteralValues = new Array();
        for (var _i = 0, value_2 = value; _i < value_2.length; _i++) {
            var val = value_2[_i];
            if (literalValues.indexOf(val) === -1) {
                nonLiteralValues.push(val);
            }
        }
        return nonLiteralValues;
    };
    return MaskHelper;
}());
exports.MaskHelper = MaskHelper;


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(251));
__export(__webpack_require__(111));
__export(__webpack_require__(253));
__export(__webpack_require__(261));
__export(__webpack_require__(64));
__export(__webpack_require__(65));


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var base_export_service_1 = __webpack_require__(64);
var export_utilities_1 = __webpack_require__(24);
var char_separated_value_data_1 = __webpack_require__(252);
var csv_exporter_options_1 = __webpack_require__(111);
var IgxCsvExporterService = (function (_super) {
    __extends(IgxCsvExporterService, _super);
    function IgxCsvExporterService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onExportEnded = new core_1.EventEmitter();
        return _this;
    }
    IgxCsvExporterService.prototype.exportDataImplementation = function (data, options) {
        var csvData = new char_separated_value_data_1.CharSeparatedValueData(data, options.valueDelimiter);
        this._stringData = csvData.prepareData();
        this.saveFile(options);
        this.onExportEnded.emit({ csvData: this._stringData });
    };
    IgxCsvExporterService.prototype.saveFile = function (options) {
        switch (options.fileType) {
            case csv_exporter_options_1.CsvFileTypes.CSV:
                this.exportFile(this._stringData, options.fileName, "text/csv;charset=utf-8;");
                break;
            case csv_exporter_options_1.CsvFileTypes.TSV:
            case csv_exporter_options_1.CsvFileTypes.TAB:
                this.exportFile(this._stringData, options.fileName, "text/tab-separated-values;charset=utf-8;");
                break;
        }
    };
    IgxCsvExporterService.prototype.exportFile = function (data, fileName, fileType) {
        var blob = new Blob(["\ufeff", data], { type: fileType });
        export_utilities_1.ExportUtilities.saveBlobToFile(blob, fileName);
    };
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxCsvExporterService.prototype, "onExportEnded", void 0);
    IgxCsvExporterService = __decorate([
        core_1.Injectable()
    ], IgxCsvExporterService);
    return IgxCsvExporterService;
}(base_export_service_1.IgxBaseExporter));
exports.IgxCsvExporterService = IgxCsvExporterService;


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var export_utilities_1 = __webpack_require__(24);
var CharSeparatedValueData = (function () {
    function CharSeparatedValueData(_data, valueDelimiter) {
        this._data = _data;
        this._headerRecord = "";
        this._dataRecords = "";
        this._eor = "\r\n";
        this._escapeCharacters = ["\r", "\n", "\r\n"];
        this._delimiterLength = 1;
        this._isSpecialData = false;
        this.setDelimiter(valueDelimiter);
    }
    CharSeparatedValueData.prototype.prepareData = function () {
        if (!this._data || this._data.length === 0) {
            return "";
        }
        var keys = export_utilities_1.ExportUtilities.getKeysFromData(this._data);
        if (keys.length === 0) {
            return "";
        }
        this._isSpecialData = export_utilities_1.ExportUtilities.isSpecialData(this._data);
        this._escapeCharacters.push(this._delimiter);
        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);
        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);
        return this._headerRecord + this._dataRecords;
    };
    CharSeparatedValueData.prototype.processField = function (value, escapeChars) {
        var safeValue = export_utilities_1.ExportUtilities.hasValue(value) ? String(value) : "";
        if (escapeChars.some(function (v) { return safeValue.includes(v); })) {
            safeValue = "\"" + safeValue + "\"";
        }
        return safeValue + this._delimiter;
    };
    CharSeparatedValueData.prototype.processHeaderRecord = function (keys, escapeChars) {
        var recordData = "";
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var keyName = keys_1[_i];
            recordData += this.processField(keyName, this._escapeCharacters);
        }
        return recordData.slice(0, -this._delimiterLength) + this._eor;
    };
    CharSeparatedValueData.prototype.processRecord = function (record, keys, escapeChars) {
        var recordData = "";
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
            var keyName = keys_2[_i];
            var value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : "";
            recordData += this.processField(value, this._escapeCharacters);
        }
        return recordData.slice(0, -this._delimiterLength) + this._eor;
    };
    CharSeparatedValueData.prototype.processDataRecords = function (currentData, keys, escapeChars) {
        var dataRecords = "";
        for (var _i = 0, currentData_1 = currentData; _i < currentData_1.length; _i++) {
            var row = currentData_1[_i];
            dataRecords += this.processRecord(row, keys, escapeChars);
        }
        return dataRecords;
    };
    CharSeparatedValueData.prototype.setDelimiter = function (value) {
        this._delimiter = value;
        this._delimiterLength = value.length;
    };
    return CharSeparatedValueData;
}());
exports.CharSeparatedValueData = CharSeparatedValueData;


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var JSZip = __webpack_require__(254);
var core_1 = __webpack_require__(0);
var excel_elements_factory_1 = __webpack_require__(255);
var excel_enums_1 = __webpack_require__(66);
var base_export_service_1 = __webpack_require__(64);
var export_utilities_1 = __webpack_require__(24);
var worksheet_data_1 = __webpack_require__(259);
var IgxExcelExporterService = (function (_super) {
    __extends(IgxExcelExporterService, _super);
    function IgxExcelExporterService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onExportEnded = new core_1.EventEmitter();
        return _this;
    }
    IgxExcelExporterService_1 = IgxExcelExporterService;
    IgxExcelExporterService.populateFolder = function (folder, zip, worksheetData) {
        for (var _i = 0, _a = folder.childFolders(worksheetData); _i < _a.length; _i++) {
            var childFolder = _a[_i];
            var folderIntance = excel_elements_factory_1.ExcelElementsFactory.getExcelFolder(childFolder);
            var zipFolder = zip.folder(folderIntance.folderName);
            IgxExcelExporterService_1.populateFolder(folderIntance, zipFolder, worksheetData);
        }
        for (var _b = 0, _c = folder.childFiles(worksheetData); _b < _c.length; _b++) {
            var childFile = _c[_b];
            var fileInstance = excel_elements_factory_1.ExcelElementsFactory.getExcelFile(childFile);
            fileInstance.writeElement(zip, worksheetData);
        }
    };
    IgxExcelExporterService.prototype.exportDataImplementation = function (data, options) {
        var _this = this;
        var worksheetData = new worksheet_data_1.WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort);
        this._xlsx = new JSZip();
        var rootFolder = excel_elements_factory_1.ExcelElementsFactory.getExcelFolder(excel_enums_1.ExcelFolderTypes.RootExcelFolder);
        IgxExcelExporterService_1.populateFolder(rootFolder, this._xlsx, worksheetData);
        this._xlsx.generateAsync(IgxExcelExporterService_1.ZIP_OPTIONS).then(function (result) {
            _this.saveFile(result, options.fileName);
            _this.onExportEnded.emit({ xlsx: _this._xlsx });
        });
    };
    IgxExcelExporterService.prototype.saveFile = function (data, fileName) {
        var blob = new Blob([export_utilities_1.ExportUtilities.stringToArrayBuffer(atob(data))], {
            type: ""
        });
        export_utilities_1.ExportUtilities.saveBlobToFile(blob, fileName);
    };
    IgxExcelExporterService.ZIP_OPTIONS = { compression: "DEFLATE", type: "base64" };
    IgxExcelExporterService.DATA_URL_PREFIX = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,";
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], IgxExcelExporterService.prototype, "onExportEnded", void 0);
    IgxExcelExporterService = IgxExcelExporterService_1 = __decorate([
        core_1.Injectable()
    ], IgxExcelExporterService);
    return IgxExcelExporterService;
    var IgxExcelExporterService_1;
}(base_export_service_1.IgxBaseExporter));
exports.IgxExcelExporterService = IgxExcelExporterService;


/***/ }),
/* 254 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_254__;

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var excel_enums_1 = __webpack_require__(66);
var excel_files_1 = __webpack_require__(256);
var excel_folders_1 = __webpack_require__(258);
var ExcelElementsFactory = (function () {
    function ExcelElementsFactory() {
    }
    ExcelElementsFactory.getExcelFolder = function (type) {
        switch (type) {
            case excel_enums_1.ExcelFolderTypes.RootExcelFolder:
                return new excel_folders_1.RootExcelFolder();
            case excel_enums_1.ExcelFolderTypes.RootRelsExcelFolder:
                return new excel_folders_1.RootRelsExcelFolder();
            case excel_enums_1.ExcelFolderTypes.DocPropsExcelFolder:
                return new excel_folders_1.DocPropsExcelFolder();
            case excel_enums_1.ExcelFolderTypes.XLExcelFolder:
                return new excel_folders_1.XLExcelFolder();
            case excel_enums_1.ExcelFolderTypes.XLRelsExcelFolder:
                return new excel_folders_1.XLRelsExcelFolder();
            case excel_enums_1.ExcelFolderTypes.ThemeExcelFolder:
                return new excel_folders_1.ThemeExcelFolder();
            case excel_enums_1.ExcelFolderTypes.WorksheetsExcelFolder:
                return new excel_folders_1.WorksheetsExcelFolder();
            case excel_enums_1.ExcelFolderTypes.WorksheetsRelsExcelFolder:
                return new excel_folders_1.WorksheetsRelsExcelFolder();
            case excel_enums_1.ExcelFolderTypes.TablesExcelFolder:
                return new excel_folders_1.TablesExcelFolder();
            default:
                throw new Error("Unknown excel folder type!");
        }
    };
    ExcelElementsFactory.getExcelFile = function (type) {
        switch (type) {
            case excel_enums_1.ExcelFileTypes.RootRelsFile:
                return new excel_files_1.RootRelsFile();
            case excel_enums_1.ExcelFileTypes.AppFile:
                return new excel_files_1.AppFile();
            case excel_enums_1.ExcelFileTypes.CoreFile:
                return new excel_files_1.CoreFile();
            case excel_enums_1.ExcelFileTypes.WorkbookRelsFile:
                return new excel_files_1.WorkbookRelsFile();
            case excel_enums_1.ExcelFileTypes.ThemeFile:
                return new excel_files_1.ThemeFile();
            case excel_enums_1.ExcelFileTypes.WorksheetFile:
                return new excel_files_1.WorksheetFile();
            case excel_enums_1.ExcelFileTypes.StyleFile:
                return new excel_files_1.StyleFile();
            case excel_enums_1.ExcelFileTypes.WorkbookFile:
                return new excel_files_1.WorkbookFile();
            case excel_enums_1.ExcelFileTypes.ContentTypesFile:
                return new excel_files_1.ContentTypesFile();
            case excel_enums_1.ExcelFileTypes.SharedStringsFile:
                return new excel_files_1.SharedStringsFile();
            case excel_enums_1.ExcelFileTypes.WorksheetRelsFile:
                return new excel_files_1.WorksheetRelsFile();
            case excel_enums_1.ExcelFileTypes.TablesFile:
                return new excel_files_1.TablesFile();
            default:
                throw Error("Unknown excel file type!");
        }
    };
    return ExcelElementsFactory;
}());
exports.ExcelElementsFactory = ExcelElementsFactory;


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var excel_strings_1 = __webpack_require__(257);
var RootRelsFile = (function () {
    function RootRelsFile() {
    }
    RootRelsFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file(".rels", excel_strings_1.ExcelStrings.getRels());
    };
    return RootRelsFile;
}());
exports.RootRelsFile = RootRelsFile;
var AppFile = (function () {
    function AppFile() {
    }
    AppFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file("app.xml", excel_strings_1.ExcelStrings.getApp());
    };
    return AppFile;
}());
exports.AppFile = AppFile;
var CoreFile = (function () {
    function CoreFile() {
    }
    CoreFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file("core.xml", excel_strings_1.ExcelStrings.getCore());
    };
    return CoreFile;
}());
exports.CoreFile = CoreFile;
var WorkbookRelsFile = (function () {
    function WorkbookRelsFile() {
    }
    WorkbookRelsFile.prototype.writeElement = function (folder, worksheetData) {
        var hasSharedStrings = worksheetData.isEmpty === false;
        folder.file("workbook.xml.rels", excel_strings_1.ExcelStrings.getWorkbookRels(hasSharedStrings));
    };
    return WorkbookRelsFile;
}());
exports.WorkbookRelsFile = WorkbookRelsFile;
var ThemeFile = (function () {
    function ThemeFile() {
    }
    ThemeFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file("theme1.xml", excel_strings_1.ExcelStrings.getTheme());
    };
    return ThemeFile;
}());
exports.ThemeFile = ThemeFile;
var WorksheetFile = (function () {
    function WorksheetFile() {
    }
    WorksheetFile.prototype.writeElement = function (folder, worksheetData) {
        var sheetData = [];
        var cols = [];
        var dimension;
        var dictionary = worksheetData.dataDictionary;
        var freezePane = "";
        if (worksheetData.isEmpty) {
            sheetData.push("<sheetData/>");
            dimension = "A1";
        }
        else {
            sheetData.push("<sheetData>");
            var height = worksheetData.options.rowHeight;
            var rowHeight = height ? " ht=\"" + height + "\" customHeight=\"1\"" : "";
            sheetData.push("<row r=\"1\"" + rowHeight + ">");
            for (var i = 0; i < worksheetData.columnCount; i++) {
                var column = excel_strings_1.ExcelStrings.getExcelColumn(i) + 1;
                var value = dictionary.saveValue(worksheetData.keys[i], i, true);
                sheetData.push("<c r=\"" + column + "\" t=\"s\"><v>" + value + "</v></c>");
            }
            sheetData.push("</row>");
            for (var i = 1; i < worksheetData.rowCount; i++) {
                sheetData.push("<row r=\"" + (i + 1) + "\"" + rowHeight + ">");
                for (var j = 0; j < worksheetData.columnCount; j++) {
                    var cellData = WorksheetFile.getCellData(worksheetData, i, j);
                    sheetData.push(cellData);
                }
                sheetData.push("</row>");
            }
            sheetData.push("</sheetData>");
            dimension = "A1:" + excel_strings_1.ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;
            cols.push("<cols>");
            for (var i = 0; i < worksheetData.columnCount; i++) {
                var width = dictionary.columnWidths[i];
                var widthInTwips = worksheetData.options.columnWidth ?
                    worksheetData.options.columnWidth :
                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);
                cols.push("<col min=\"" + (i + 1) + "\" max=\"" + (i + 1) + "\" width=\"" + widthInTwips + "\" customWidth=\"1\"/>");
            }
            cols.push("</cols>");
            if (worksheetData.indexOfLastPinnedColumn !== -1 &&
                !worksheetData.options.ignorePinning &&
                !worksheetData.options.ignoreColumnsOrder) {
                var frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;
                var firstCell = excel_strings_1.ExcelStrings.getExcelColumn(frozenColumnCount) + "1";
                freezePane = "<pane xSplit=\"" + frozenColumnCount + "\" topLeftCell=\"" + firstCell + "\" activePane=\"topRight\" state=\"frozen\"/>";
            }
        }
        var hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;
        folder.file("sheet1.xml", excel_strings_1.ExcelStrings.getSheetXML(dimension, freezePane, cols.join(""), sheetData.join(""), hasTable));
    };
    WorksheetFile.getCellData = function (worksheetData, row, column) {
        var dictionary = worksheetData.dataDictionary;
        var columnName = excel_strings_1.ExcelStrings.getExcelColumn(column) + (row + 1);
        var columnHeader = worksheetData.keys[column];
        var cellValue = worksheetData.isSpecialData ?
            worksheetData.data[row - 1] :
            worksheetData.data[row - 1][columnHeader];
        var savedValue = dictionary.saveValue(cellValue, column, false);
        var isSavedAsString = savedValue !== -1;
        var value = isSavedAsString ? savedValue : (cellValue === undefined ? "" : cellValue);
        var type = isSavedAsString ? " t=\"s\"" : "";
        var format = isSavedAsString ? "" : " s=\"1\"";
        return "<c r=\"" + columnName + "\"" + type + format + "><v>" + value + "</v></c>";
    };
    WorksheetFile.MIN_WIDTH = 8.34;
    return WorksheetFile;
}());
exports.WorksheetFile = WorksheetFile;
var StyleFile = (function () {
    function StyleFile() {
    }
    StyleFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file("styles.xml", excel_strings_1.ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));
    };
    return StyleFile;
}());
exports.StyleFile = StyleFile;
var WorkbookFile = (function () {
    function WorkbookFile() {
    }
    WorkbookFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file("workbook.xml", excel_strings_1.ExcelStrings.getWorkbook());
    };
    return WorkbookFile;
}());
exports.WorkbookFile = WorkbookFile;
var ContentTypesFile = (function () {
    function ContentTypesFile() {
    }
    ContentTypesFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file("[Content_Types].xml", excel_strings_1.ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));
    };
    return ContentTypesFile;
}());
exports.ContentTypesFile = ContentTypesFile;
var SharedStringsFile = (function () {
    function SharedStringsFile() {
    }
    SharedStringsFile.prototype.writeElement = function (folder, worksheetData) {
        var dict = worksheetData.dataDictionary;
        var sortedValues = dict.getKeys();
        var sharedStrings = new Array(sortedValues.length);
        for (var _i = 0, sortedValues_1 = sortedValues; _i < sortedValues_1.length; _i++) {
            var value = sortedValues_1[_i];
            sharedStrings[dict.getSanitizedValue(value)] = "<si><t>" + value + "</t></si>";
        }
        folder.file("sharedStrings.xml", excel_strings_1.ExcelStrings.getSharedStringXML(dict.stringsCount, sortedValues.length, sharedStrings.join("")));
    };
    return SharedStringsFile;
}());
exports.SharedStringsFile = SharedStringsFile;
var TablesFile = (function () {
    function TablesFile() {
    }
    TablesFile.prototype.writeElement = function (folder, worksheetData) {
        var columnCount = worksheetData.columnCount;
        var lastColumn = excel_strings_1.ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;
        var dimension = "A1:" + lastColumn;
        var values = worksheetData.keys;
        var sortString = "";
        var tableColumns = "<tableColumns count=\"" + columnCount + "\">";
        for (var i = 0; i < columnCount; i++) {
            var value = values[i];
            tableColumns += "<tableColumn id=\"" + (i + 1) + "\" name=\"" + value + "\"/>";
        }
        tableColumns += "</tableColumns>";
        if (worksheetData.sort) {
            var sortingExpression = worksheetData.sort;
            var sc = excel_strings_1.ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));
            var dir = sortingExpression.dir - 1;
            sortString = "<sortState ref=\"A2:" + lastColumn + "\"><sortCondition descending=\"" + dir + "\" ref=\"" + sc + "1:" + sc + "15\"/></sortState>";
        }
        folder.file("table1.xml", excel_strings_1.ExcelStrings.getTablesXML(dimension, tableColumns, sortString));
    };
    return TablesFile;
}());
exports.TablesFile = TablesFile;
var WorksheetRelsFile = (function () {
    function WorksheetRelsFile() {
    }
    WorksheetRelsFile.prototype.writeElement = function (folder, worksheetData) {
        folder.file("sheet1.xml.rels", excel_strings_1.ExcelStrings.getWorksheetRels());
    };
    return WorksheetRelsFile;
}());
exports.WorksheetRelsFile = WorksheetRelsFile;


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ExcelStrings = (function () {
    function ExcelStrings() {
    }
    ExcelStrings.getRels = function () {
        return ExcelStrings.XML_STRING + "<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>";
    };
    ExcelStrings.getApp = function () {
        return ExcelStrings.XML_STRING + "<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>";
    };
    ExcelStrings.getCore = function () {
        return ExcelStrings.XML_STRING + "<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator>Dimitar Davidkov</dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>";
    };
    ExcelStrings.getTheme = function () {
        return ExcelStrings.XML_STRING + "<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"游ゴシック Light\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"等线 Light\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"游ゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"等线\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>";
    };
    ExcelStrings.getStyles = function (hasNonStringValues) {
        var additionalCellXF = "<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>";
        var cellXFCount = hasNonStringValues ? 2 : 1;
        return ExcelStrings.XML_STRING + "<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"" + cellXFCount + "\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>" + additionalCellXF + "</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>";
    };
    ExcelStrings.getWorkbook = function () {
        return ExcelStrings.XML_STRING + "<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>";
    };
    ExcelStrings.getWorksheetRels = function () {
        return ExcelStrings.XML_STRING + "<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>";
    };
    ExcelStrings.getWorkbookRels = function (hasSharedStrings) {
        var retVal = ExcelStrings.XML_STRING + "<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>";
        if (hasSharedStrings) {
            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;
        }
        retVal += "</Relationships>";
        return retVal;
    };
    ExcelStrings.getSheetXML = function (dimension, freezePane, cols, sheetData, hasTable) {
        var tableParts = hasTable ? "<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>" : "";
        return ExcelStrings.XML_STRING + "<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"" + dimension + "\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">" + freezePane + "</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>" + cols + sheetData + "<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>" + tableParts + "</worksheet>";
    };
    ExcelStrings.getSharedStringXML = function (count, uniqueCount, table) {
        return ExcelStrings.XML_STRING + "<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"" + count + "\" uniqueCount=\"" + uniqueCount + "\">" + table + "</sst>";
    };
    ExcelStrings.getContentTypesXML = function (hasSharedStrings, hasTable) {
        var contentTypes = ExcelStrings.XML_STRING +
            "<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>";
        contentTypes += hasSharedStrings ?
            "\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>" : "";
        contentTypes += hasTable ?
            "<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>" : "";
        contentTypes += "</Types>";
        return contentTypes;
    };
    ExcelStrings.getTablesXML = function (dimension, tableColumns, sort) {
        return ExcelStrings.XML_STRING + "<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"" + dimension + "\" totalsRowShown=\"0\">\n    <autoFilter ref=\"" + dimension + "\"/>" + sort + tableColumns + "<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>";
    };
    ExcelStrings.getExcelColumn = function (index) {
        var returnString = "";
        while (index >= 0) {
            var char = index % 26;
            returnString = String.fromCharCode(65 + char) + returnString;
            index = Math.floor(index / 26) - 1;
        }
        return returnString;
    };
    ExcelStrings.XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n";
    ExcelStrings.SHARED_STRING_RELATIONSHIP = "<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />";
    return ExcelStrings;
}());
exports.ExcelStrings = ExcelStrings;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var excel_enums_1 = __webpack_require__(66);
var RootExcelFolder = (function () {
    function RootExcelFolder() {
    }
    Object.defineProperty(RootExcelFolder.prototype, "folderName", {
        get: function () {
            return "";
        },
        enumerable: true,
        configurable: true
    });
    RootExcelFolder.prototype.childFiles = function (data) {
        return [excel_enums_1.ExcelFileTypes.ContentTypesFile];
    };
    RootExcelFolder.prototype.childFolders = function (data) {
        return [
            excel_enums_1.ExcelFolderTypes.RootRelsExcelFolder,
            excel_enums_1.ExcelFolderTypes.DocPropsExcelFolder,
            excel_enums_1.ExcelFolderTypes.XLExcelFolder
        ];
    };
    return RootExcelFolder;
}());
exports.RootExcelFolder = RootExcelFolder;
var RootRelsExcelFolder = (function () {
    function RootRelsExcelFolder() {
    }
    Object.defineProperty(RootRelsExcelFolder.prototype, "folderName", {
        get: function () {
            return "_rels";
        },
        enumerable: true,
        configurable: true
    });
    RootRelsExcelFolder.prototype.childFiles = function (data) {
        return [excel_enums_1.ExcelFileTypes.RootRelsFile];
    };
    RootRelsExcelFolder.prototype.childFolders = function (data) {
        return [];
    };
    return RootRelsExcelFolder;
}());
exports.RootRelsExcelFolder = RootRelsExcelFolder;
var DocPropsExcelFolder = (function () {
    function DocPropsExcelFolder() {
    }
    Object.defineProperty(DocPropsExcelFolder.prototype, "folderName", {
        get: function () {
            return "docProps";
        },
        enumerable: true,
        configurable: true
    });
    DocPropsExcelFolder.prototype.childFiles = function (data) {
        return [
            excel_enums_1.ExcelFileTypes.AppFile,
            excel_enums_1.ExcelFileTypes.CoreFile
        ];
    };
    DocPropsExcelFolder.prototype.childFolders = function (data) {
        return [];
    };
    return DocPropsExcelFolder;
}());
exports.DocPropsExcelFolder = DocPropsExcelFolder;
var XLExcelFolder = (function () {
    function XLExcelFolder() {
    }
    Object.defineProperty(XLExcelFolder.prototype, "folderName", {
        get: function () {
            return "xl";
        },
        enumerable: true,
        configurable: true
    });
    XLExcelFolder.prototype.childFiles = function (data) {
        var retVal = [
            excel_enums_1.ExcelFileTypes.StyleFile,
            excel_enums_1.ExcelFileTypes.WorkbookFile
        ];
        if (!data.isEmpty) {
            retVal.push(excel_enums_1.ExcelFileTypes.SharedStringsFile);
        }
        return retVal;
    };
    XLExcelFolder.prototype.childFolders = function (data) {
        var retVal = [
            excel_enums_1.ExcelFolderTypes.XLRelsExcelFolder,
            excel_enums_1.ExcelFolderTypes.ThemeExcelFolder,
            excel_enums_1.ExcelFolderTypes.WorksheetsExcelFolder
        ];
        if (!data.isEmpty && data.options.exportAsTable) {
            retVal.push(excel_enums_1.ExcelFolderTypes.TablesExcelFolder);
        }
        return retVal;
    };
    return XLExcelFolder;
}());
exports.XLExcelFolder = XLExcelFolder;
var XLRelsExcelFolder = (function () {
    function XLRelsExcelFolder() {
    }
    Object.defineProperty(XLRelsExcelFolder.prototype, "folderName", {
        get: function () {
            return "_rels";
        },
        enumerable: true,
        configurable: true
    });
    XLRelsExcelFolder.prototype.childFiles = function (data) {
        return [excel_enums_1.ExcelFileTypes.WorkbookRelsFile];
    };
    XLRelsExcelFolder.prototype.childFolders = function (data) {
        return [];
    };
    return XLRelsExcelFolder;
}());
exports.XLRelsExcelFolder = XLRelsExcelFolder;
var ThemeExcelFolder = (function () {
    function ThemeExcelFolder() {
    }
    Object.defineProperty(ThemeExcelFolder.prototype, "folderName", {
        get: function () {
            return "theme";
        },
        enumerable: true,
        configurable: true
    });
    ThemeExcelFolder.prototype.childFiles = function (data) {
        return [excel_enums_1.ExcelFileTypes.ThemeFile];
    };
    ThemeExcelFolder.prototype.childFolders = function (data) {
        return [];
    };
    return ThemeExcelFolder;
}());
exports.ThemeExcelFolder = ThemeExcelFolder;
var WorksheetsExcelFolder = (function () {
    function WorksheetsExcelFolder() {
    }
    Object.defineProperty(WorksheetsExcelFolder.prototype, "folderName", {
        get: function () {
            return "worksheets";
        },
        enumerable: true,
        configurable: true
    });
    WorksheetsExcelFolder.prototype.childFiles = function (data) {
        return [excel_enums_1.ExcelFileTypes.WorksheetFile];
    };
    WorksheetsExcelFolder.prototype.childFolders = function (data) {
        return data.isEmpty || !data.options.exportAsTable ? [] : [excel_enums_1.ExcelFolderTypes.WorksheetsRelsExcelFolder];
    };
    return WorksheetsExcelFolder;
}());
exports.WorksheetsExcelFolder = WorksheetsExcelFolder;
var TablesExcelFolder = (function () {
    function TablesExcelFolder() {
    }
    Object.defineProperty(TablesExcelFolder.prototype, "folderName", {
        get: function () {
            return "tables";
        },
        enumerable: true,
        configurable: true
    });
    TablesExcelFolder.prototype.childFiles = function (data) {
        return [excel_enums_1.ExcelFileTypes.TablesFile];
    };
    TablesExcelFolder.prototype.childFolders = function (data) {
        return [];
    };
    return TablesExcelFolder;
}());
exports.TablesExcelFolder = TablesExcelFolder;
var WorksheetsRelsExcelFolder = (function () {
    function WorksheetsRelsExcelFolder() {
    }
    Object.defineProperty(WorksheetsRelsExcelFolder.prototype, "folderName", {
        get: function () {
            return "_rels";
        },
        enumerable: true,
        configurable: true
    });
    WorksheetsRelsExcelFolder.prototype.childFiles = function (data) {
        return [excel_enums_1.ExcelFileTypes.WorksheetRelsFile];
    };
    WorksheetsRelsExcelFolder.prototype.childFolders = function (data) {
        return [];
    };
    return WorksheetsRelsExcelFolder;
}());
exports.WorksheetsRelsExcelFolder = WorksheetsRelsExcelFolder;


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var export_utilities_1 = __webpack_require__(24);
var worksheet_data_dictionary_1 = __webpack_require__(260);
var WorksheetData = (function () {
    function WorksheetData(_data, options, indexOfLastPinnedColumn, sort) {
        this._data = _data;
        this.options = options;
        this.indexOfLastPinnedColumn = indexOfLastPinnedColumn;
        this.sort = sort;
        this.initializeData();
    }
    Object.defineProperty(WorksheetData.prototype, "data", {
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorksheetData.prototype, "columnCount", {
        get: function () {
            return this._columnCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorksheetData.prototype, "rowCount", {
        get: function () {
            return this._rowCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorksheetData.prototype, "isEmpty", {
        get: function () {
            return !this.rowCount || !this._columnCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorksheetData.prototype, "keys", {
        get: function () {
            return this._keys;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorksheetData.prototype, "isSpecialData", {
        get: function () {
            return this._isSpecialData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorksheetData.prototype, "dataDictionary", {
        get: function () {
            return this._dataDictionary;
        },
        enumerable: true,
        configurable: true
    });
    WorksheetData.prototype.initializeData = function () {
        if (!this._data || this._data.length === 0) {
            return;
        }
        this._keys = export_utilities_1.ExportUtilities.getKeysFromData(this._data);
        if (this._keys.length === 0) {
            return;
        }
        this._isSpecialData = export_utilities_1.ExportUtilities.isSpecialData(this._data);
        this._columnCount = this._keys.length;
        this._rowCount = this._data.length + 1;
        this._dataDictionary = new worksheet_data_dictionary_1.WorksheetDataDictionary(this._columnCount, this.options.columnWidth);
    };
    return WorksheetData;
}());
exports.WorksheetData = WorksheetData;


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var export_utilities_1 = __webpack_require__(24);
var WorksheetDataDictionary = (function () {
    function WorksheetDataDictionary(columnCount, columnWidth) {
        this.hasNonStringValues = false;
        this._dictionary = {};
        this._widthsDictionary = {};
        this._counter = 0;
        this.dirtyKeyCollections();
        this._calculateColumnWidth = !columnWidth;
        this._columnWidths = new Array(columnCount);
        this._columnTypeInfo = new Array(columnCount);
        if (!this._calculateColumnWidth) {
            this._columnWidths.fill(columnWidth);
        }
        this.stringsCount = 0;
    }
    Object.defineProperty(WorksheetDataDictionary.prototype, "columnWidths", {
        get: function () {
            return this._columnWidths;
        },
        enumerable: true,
        configurable: true
    });
    WorksheetDataDictionary.prototype.saveValue = function (value, column, isHeader) {
        if (this._columnTypeInfo[column] === undefined && isHeader === false) {
            this._columnTypeInfo[column] = typeof value === "string" ||
                typeof value === "boolean" ||
                value instanceof Date;
        }
        var sanitizedValue = "";
        var isSavedAsString = this._columnTypeInfo[column] || isHeader;
        if (isSavedAsString) {
            sanitizedValue = this.sanitizeValue(value);
            if (this._dictionary[sanitizedValue] === undefined) {
                this._dictionary[sanitizedValue] = this._counter++;
                this.dirtyKeyCollections();
            }
            this.stringsCount++;
        }
        else {
            this.hasNonStringValues = true;
        }
        if (this._calculateColumnWidth) {
            var width = this.getTextWidth(value);
            var maxWidth = Math.max(this._columnWidths[column] || 0, width);
            this._columnWidths[column] = maxWidth;
        }
        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;
    };
    WorksheetDataDictionary.prototype.getValue = function (value) {
        return this.getSanitizedValue(this.sanitizeValue(value));
    };
    WorksheetDataDictionary.prototype.getSanitizedValue = function (sanitizedValue) {
        return this._dictionary[sanitizedValue];
    };
    WorksheetDataDictionary.prototype.getKeys = function () {
        if (!this._keysAreValid) {
            this._keys = Object.keys(this._dictionary);
            this._keysAreValid = true;
        }
        return this._keys;
    };
    WorksheetDataDictionary.prototype.getTextWidth = function (value) {
        if (this._widthsDictionary[value] === undefined) {
            var context = this.getContext();
            var metrics = context.measureText(value);
            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;
        }
        return this._widthsDictionary[value];
    };
    WorksheetDataDictionary.prototype.getContext = function () {
        if (!this._context) {
            var canvas = document.createElement("canvas");
            this._context = canvas.getContext("2d");
            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;
        }
        return this._context;
    };
    WorksheetDataDictionary.prototype.sanitizeValue = function (value) {
        if (export_utilities_1.ExportUtilities.hasValue(value) === false) {
            return "";
        }
        else {
            var stringValue = String(value);
            return stringValue.replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&apos;");
        }
    };
    WorksheetDataDictionary.prototype.dirtyKeyCollections = function () {
        this._keysAreValid = false;
    };
    WorksheetDataDictionary.DEFAULT_FONT = "11pt Calibri";
    WorksheetDataDictionary.TEXT_PADDING = 5;
    return WorksheetDataDictionary;
}());
exports.WorksheetDataDictionary = WorksheetDataDictionary;


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var exporter_options_base_1 = __webpack_require__(65);
var IgxExcelExporterOptions = (function (_super) {
    __extends(IgxExcelExporterOptions, _super);
    function IgxExcelExporterOptions(fileName) {
        var _this = _super.call(this, fileName, ".xlsx") || this;
        _this.ignorePinning = false;
        _this.exportAsTable = true;
        return _this;
    }
    Object.defineProperty(IgxExcelExporterOptions.prototype, "columnWidth", {
        get: function () {
            return this._columnWidth;
        },
        set: function (value) {
            if (value < 0) {
                throw Error("Invalid value for column width!");
            }
            this._columnWidth = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelExporterOptions.prototype, "rowHeight", {
        get: function () {
            return this._rowHeight;
        },
        set: function (value) {
            if (value < 0) {
                throw Error("Invalid value for row height!");
            }
            this._rowHeight = value;
        },
        enumerable: true,
        configurable: true
    });
    return IgxExcelExporterOptions;
}(exporter_options_base_1.IgxExporterOptionsBase));
exports.IgxExcelExporterOptions = IgxExcelExporterOptions;


/***/ })
/******/ ]);
});