import { AfterContentInit, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer, SimpleChange, TemplateRef } from "@angular/core";
import { IgxNavigationService, IToggleView } from "../core/navigation";
import { HammerGesturesManager } from "../core/touch";
import { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from "./navigation-drawer.directives";
export declare class IgxNavigationDrawerComponent implements IToggleView, OnInit, AfterContentInit, OnDestroy, OnChanges {
    private elementRef;
    private _state;
    protected renderer: Renderer;
    private _touchManager;
    cssClass: string;
    id: string;
    position: string;
    enableGestures: boolean;
    isOpen: boolean;
    pin: boolean;
    pinThreshold: number;
    readonly element: any;
    width: string;
    miniWidth: string;
    pinChange: EventEmitter<boolean>;
    opening: EventEmitter<{}>;
    opened: EventEmitter<{}>;
    closing: EventEmitter<{}>;
    closed: EventEmitter<{}>;
    readonly template: TemplateRef<any>;
    private _miniTemplate;
    miniTemplate: IgxNavDrawerMiniTemplateDirective;
    protected contentTemplate: IgxNavDrawerTemplateDirective;
    readonly flexWidth: string;
    private _gesturesAttached;
    private _widthCache;
    private _resizeObserver;
    private css;
    private _drawer;
    private _overlay;
    private _styleDummy;
    readonly drawer: any;
    readonly overlay: any;
    readonly styleDummy: any;
    private _panning;
    private _panStartWidth;
    private _panLimit;
    private _previousDeltaX;
    readonly hasAnimateWidth: boolean;
    private _maxEdgeZone;
    readonly maxEdgeZone: number;
    readonly expectedWidth: number;
    readonly expectedMiniWidth: number;
    readonly touchManager: HammerGesturesManager;
    readonly state: IgxNavigationService;
    constructor(elementRef: ElementRef, _state: IgxNavigationService, renderer: Renderer, _touchManager: HammerGesturesManager);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: {
        [propName: string]: SimpleChange;
    }): void;
    toggle(fireEvents?: boolean): void;
    open(fireEvents?: boolean): void;
    close(fireEvents?: boolean): void;
    protected set_maxEdgeZone(value: number): void;
    protected ensureDrawerHeight(): void;
    protected getExpectedWidth(mini?: boolean): number;
    private getWindowWidth();
    private setDrawerWidth(width);
    private getDrawerWidth();
    private ensureEvents();
    private updateEdgeZone();
    private checkPinThreshold;
    private swipe;
    private panstart;
    private pan;
    private panEnd;
    private resetPan();
    private setXSize(x, opacity?);
    private toggleOpenedEvent;
    private toggleClosedEvent;
}
