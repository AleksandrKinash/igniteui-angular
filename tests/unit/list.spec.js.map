{"version":3,"sources":["tests/unit/list.spec.ts"],"names":[],"mappings":"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","file":"tests/unit/list.spec.js","sourcesContent":["// modeled after https://github.com/angular/angular/blob/cee2318110eeea115e5f6fc5bfc814cbaa7d90d8/modules/angular2/test/common/directives/ng_for_spec.ts\n/// <reference path=\"../../typings/globals/jasmine/index.d.ts\" />\n/// <reference path=\"../../typings/globals/es6-shim/index.d.ts\" />\n\nimport { TestComponentBuilder, ComponentFixture, inject, async, tick } from '@angular/core/testing';\nimport { Component, ViewChild, ContentChildren } from '@angular/core';\nimport * as Infragistics from '../../src/main';\n\n// HammerJS simulator from https://github.com/hammerjs/simulator, manual typings TODO\ndeclare var Simulator: any;\n\nexport function main() {\n    describe('Infragistics Angular2 List', function() {\n         it('should initialize ig-list with item and header',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = '<ig-list><ig-list-header></ig-list-header><ig-list-item></ig-list-item></ig-list>';\n                return tcb.overrideTemplate(ListTestComponent, template)\n                .createAsync(ListTestComponent)\n                .then((fixture) => {   \n                    var list = fixture.componentInstance.viewChild; \n\n                    expect(list).toBeDefined();\n                    expect(list instanceof Infragistics.List).toBeTruthy();\n                    expect(list.items instanceof Array).toBeTruthy();\n                    expect(list.items.length).toBe(0);\n                    expect(list.headers instanceof Array).toBeTruthy();\n                    expect(list.headers.length).toBe(0);\n\n                    fixture.detectChanges();\n                    expect(list.items instanceof Array).toBeTruthy();\n                    expect(list.items.length).toBe(1);\n                    expect(list.items[0] instanceof Infragistics.ListItem).toBeTruthy();\n                    expect(list.headers instanceof Array).toBeTruthy();\n                    expect(list.headers.length).toBe(1);\n                    expect(list.headers[0] instanceof Infragistics.ListHeader).toBeTruthy();\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n         })));\n         it('should initialize ig-list with search input attached',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = '<input id=\"searchInput\"/><ig-list searchInputId=\"searchInput\"></ig-list>';\n                return tcb.overrideTemplate(ListTestComponent, template)\n                .createAsync(ListTestComponent)\n                .then((fixture) => {\n                    var inputElement,\n                        list = fixture.componentInstance.viewChild;\n\n                    expect(list).toBeDefined();\n                    fixture.detectChanges();\n\n                    inputElement = document.getElementById(list.searchInputId);\n                    expect(list.searchInputElement instanceof HTMLInputElement).toBeTruthy();\n                    expect(list.searchInputElement).toBe(inputElement);\n                    expect(list.searchInputId).toBe(\"searchInput\");\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n         })));\n         it('should filter properly',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = '<ig-list><ig-list-item>Item 1</ig-list-item><ig-list-item>Item 2</ig-list-item><ig-list-item>Item 3</ig-list-item></ig-list>';\n                return tcb.overrideTemplate(ListTestComponent, template)\n                .createAsync(ListTestComponent)\n                .then((fixture) => {                    \n                    var items, visibleItems,\n                      list = fixture.componentInstance.viewChild;\n\n                    fixture.detectChanges();\n                    expect(list.items.length).toBe(3);\n                    items = list.items;\n\n                    for (let item of items) {\n                        expect(item instanceof Infragistics.ListItem).toBeTruthy();\n                    }\n\n                    visibleItems = items.filter((listItem) => { return !listItem.hidden; });\n                    expect(visibleItems.length).toBe(3);\n                    \n                    list.searchInputElement = document.createElement('input');\n                    list.searchInputElement.value = \"1\";\n\n                    fixture.detectChanges();\n                    list.filter();\n\n                    fixture.detectChanges();\n                    visibleItems = items.filter((listItem) => { return !listItem.hidden; });\n                    expect(visibleItems.length).toBe(1);\n                    expect(visibleItems[0] instanceof Infragistics.ListItem).toBeTruthy();\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n         })));\n         /*it('should emit filter events',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n            var template = '<ig-list><ig-list-item>Item 1</ig-list-item><ig-list-item>Item 2</ig-list-item><ig-list-item>Item 3</ig-list-item></ig-list>';\n                return tcb.overrideTemplate(ListTestComponent, template)\n                .createAsync(ListTestComponent)\n                .then((fixture) => {\n                      var items, visibleItems,\n                          list = fixture.componentInstance.viewChild;\n\n                      spyOn(list.filtering, 'emit');\n                      spyOn(list.filtered, 'emit');\n\n                      fixture.detectChanges();\n                      items = list.items;                      \n                      visibleItems = items.filter((listItem) => { return !listItem.hidden; });\n                      expect(list.items.length).toBe(3);\n                      expect(visibleItems.length).toBe(3);\n\n                      list.searchInputElement = document.createElement('input');\n                      list.searchInputElement.value = \"2\";\n                      list.filter();\n\n                      fixture.detectChanges();                      \n                      visibleItems = items.filter((listItem) => { return !listItem.hidden; }); \n                      expect(visibleItems.length).toBe(1);\n                      expect(list.filtering.emit).toHaveBeenCalledWith({ cancel: false });\n                      expect(list.filtered.emit).toHaveBeenCalledWith({ result: [visibleItems[0]] });                      \n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n         })));*/\n         /*it('should cancel emitted filter events',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n            var template = '<ig-list (filtering)=\"filteringHandler($event)\"><ig-list-item>Item 1</ig-list-item><ig-list-item>Item 2</ig-list-item><ig-list-item>Item 3</ig-list-item></ig-list>';\n                return tcb.overrideTemplate(ListTestComponent, template)\n                .createAsync(ListTestComponent)\n                .then((fixture) => {\n                      var items, visibleItems,\n                          list = fixture.componentInstance.viewChild;\n\n                      spyOn(list.filtering, 'emit');\n                      spyOn(list.filtered, 'emit');\n\n                      fixture.detectChanges();\n                      items = list.items.toArray();                      \n                      visibleItems = items.filter((listItem) => { return !listItem.hidden; });\n                      expect(list.items.length).toBe(3);\n                      expect(visibleItems.length).toBe(3);\n                      \n                      list.searchInputElement = document.createElement('input');\n                      fixture.filteringHandler = (args: any) => { args.cancel = true; };\n                      list.searchInputElement.value = \"3\";\n                      fixture.detectChanges(); \n                      list.filter();\n                      fixture.detectChanges();        \n\n                      visibleItems = items.filter((listItem) => { return !listItem.hidden; }); \n                      expect(visibleItems.length).toBe(3);\n                      expect(list.filtering.emit).toHaveBeenCalledWith({ cancel: false });\n                      expect(list.filtered.emit).not.toHaveBeenCalledWith({ result: [visibleItems[0]] });\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n         })));*/\n         it('should set/get properly layout properties: width, left, maxLeft',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = '<div #wrapper><ig-list><ig-list-item></ig-list-item></ig-list></div>';\n                return tcb.overrideTemplate(ListTestComponent, template)\n                .createAsync(ListTestComponent)\n                .then((fixture) => {       \n                    var item, visibleAreaOnFullPan, \n                    testWidth = 400, testLeft = -100,\n                    list = fixture.componentInstance.viewChild;\n\n                    fixture.componentInstance.wrapper.nativeElement.style.width = testWidth + \"px\";\n\n                    fixture.detectChanges();\n                    expect(list.items.length).toBe(1);\n                    item = list.items[0];\n                    visibleAreaOnFullPan = item._VISIBLE_AREA_ON_FULL_PAN;\n                    expect(item instanceof Infragistics.ListItem).toBeTruthy();\n                    expect(item.width).toBe(testWidth);\n                    expect(item.left).toBe(0);\n                    expect(item.maxLeft).toBe(visibleAreaOnFullPan - testWidth);\n                    item.left = testLeft;\n                    expect(item.left).toBe(testLeft);\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n         })));\n\n         // end of tests\n    });\n}\n\n@Component({\n    selector: 'test-cmp',\n    template: '<div></div>', //\"Component 'TestComponent' must have either 'template' or 'templateUrl' set.\"\n    directives: [\n        Infragistics.List, \n        Infragistics.ListItem, \n        Infragistics.ListHeader]\n})\nclass ListTestComponent {\n     @ViewChild(Infragistics.List) viewChild: Infragistics.List;\n     @ViewChild(\"wrapper\") wrapper;\n\n     public filteringHandler: Function;\n}\n\n@Component({\n    selector: 'test-cmp', \n    template: '<div></div>', //\"Component 'TestComponent' must have either 'template' or 'templateUrl' set.\"\n    directives: [Infragistics.ListHeader]\n})\nclass ListHeaderTestComponent {\n     @ViewChild(Infragistics.ListHeader) public viewChild: Infragistics.ListHeader;\n}\n\n@Component({\n    selector: 'test-cmp', \n    template: '<div></div>', //\"Component 'TestComponent' must have either 'template' or 'templateUrl' set.\"\n    directives: [Infragistics.ListItem]\n})\nclass ListItemTestComponent {\n     @ViewChild(Infragistics.ListItem) public viewChild: Infragistics.ListItem;\n}\n\n//class TestComponentPin extends TestComponentDI {\n     //pin: boolean = true;\n     //enableGestures: string = \"\";\n//}"],"sourceRoot":"/source/"}