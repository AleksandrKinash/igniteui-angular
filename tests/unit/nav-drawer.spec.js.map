{"version":3,"sources":["tests/unit/nav-drawer.spec.ts"],"names":[],"mappings":"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","file":"tests/unit/nav-drawer.spec.js","sourcesContent":["/// <reference path=\"../../typings/globals/jasmine/index.d.ts\" />\n/// <reference path=\"../../typings/globals/es6-shim/index.d.ts\" />\n\nimport { inject, async, fakeAsync, tick, TestComponentBuilder, ComponentFixture } from '@angular/core/testing';\n\nimport {Component, ViewChild} from '@angular/core';\nimport * as Infragistics from '../../src/main';\n\n// HammerJS simulator from https://github.com/hammerjs/simulator, manual typings TODO\ndeclare var Simulator: any;\n\nexport function main() {\n    describe('Infragistics Angular2 Navigation Drawer', function() {\n        it('should initialize without DI service',\n         async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n           var template = '<ig-nav-drawer></ig-nav-drawer>';\n           return tcb.overrideTemplate(TestComponent, template)\n               .createAsync(TestComponent)\n               .then((fixture ) => {\n                 expect(fixture.debugElement.children[0].componentInstance instanceof Infragistics.NavigationDrawer).toBeTruthy();\n                 expect(fixture.debugElement.children[0].componentInstance.state).toBeNull();\n               });\n         })));\n\n         it('should initialize with DI service',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = '<ig-nav-drawer></ig-nav-drawer>';\n                return tcb.overrideTemplate(TestComponentDI, template)\n                .createAsync(TestComponentDI)\n                .then((fixture) => {\n                    let navDrawer: Infragistics.NavigationDrawer = fixture.componentInstance.viewChild;\n\n                    //http://stackoverflow.com/a/36444489\n                    //expect(fixture.componentInstance.viewChild).toBeUndefined(); // commented after RC4 was released\n                    fixture.detectChanges();\n\n                    expect(navDrawer).toBeDefined();\n                    expect(navDrawer instanceof Infragistics.NavigationDrawer).toBeTruthy();\n                    expect(navDrawer.state instanceof Infragistics.NavigationService).toBeTruthy();\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n         })));\n\n        it('should properly initialize all elements and properties',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = '<ig-nav-drawer></ig-nav-drawer>';\n                return tcb.overrideTemplate(TestComponentDI, template)\n                .createAsync(TestComponentDI)\n                .then((fixture) => {\n                    let navDrawer: Infragistics.NavigationDrawer = fixture.componentInstance.viewChild;\n\n                    fixture.detectChanges();\n\n                    expect(navDrawer.drawer.classList).toContain(\"ig-nav-drawer\");\n                    expect(navDrawer.overlay.classList).toContain(\"ig-nav-drawer-overlay\");\n                    expect(navDrawer.styleDummy.classList).toContain(\"style-dummy\");\n                    expect(navDrawer.hasAnimateWidth).toBeFalsy();\n\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n         })));\n\n        // TODO: another appraoch to get document managers should be used. The commented approach causes the following error:\n        // Argument of type 'Document' is not assignable to parameter of type 'HTMLElement'.\n        it('should attach events and register to nav service and detach on destroy',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = '<ig-nav-drawer id=\"testNav\" ></ig-nav-drawer>';\n                return tcb.overrideTemplate(TestComponentDI, template)\n                .createAsync(TestComponentDI)\n                .then((fixture) => {\n                    fixture.detectChanges();\n                    var state:Infragistics.NavigationService = fixture.componentInstance.viewChild.state,\n                        touchManager = fixture.componentInstance.viewChild.touchManager;\n\n                    expect(state.get(\"testNav\")).toBeDefined();\n                    //expect(touchManager.getManagerForElement(document) instanceof Hammer.Manager).toBeTruthy();\n\n                    fixture.destroy();\n                    expect(state.get(\"testNav\")).toBeUndefined();\n                    //expect(touchManager.getManagerForElement(document)).toBe(null);\n\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n         })));\n\n        it('should open and close with API calls',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = '<ig-nav-drawer></ig-nav-drawer>';\n                return tcb.overrideTemplate(TestComponentDI, template)\n                .createAsync(TestComponentDI)\n                .then((fixture) => {\n                    fixture.detectChanges();\n                    let drawer: Infragistics.NavigationDrawer = fixture.componentInstance.viewChild;\n                    expect(drawer.isOpen).toBeFalsy();\n\n                    drawer.open();\n                    expect(drawer.isOpen).toBeTruthy();\n                    drawer.open(); // should do nothing\n                    expect(drawer.isOpen).toBeTruthy();\n\n                    drawer.close();\n                    expect(drawer.isOpen).toBeFalsy();\n                    drawer.close(); // should do nothing\n                    expect(drawer.isOpen).toBeFalsy();\n\n                    drawer.toggle();\n                    expect(drawer.isOpen).toBeTruthy();\n                    drawer.toggle();\n                    expect(drawer.isOpen).toBeFalsy();\n\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n        })));\n\n        it('async API calls should resolve Promise and emit events',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = '<ig-nav-drawer></ig-nav-drawer>',\n                   fixture: ComponentFixture<any>,\n                   resolver, drawer,\n                   result = new Promise<any>( resolve => {\n                        resolver = (value?: any) => {\n                            resolve(value);\n                        };\n                    } );\n                tcb.overrideTemplate(TestComponentDI, template)\n                .createAsync(TestComponentDI)\n                .then(function (compFixture) {\n                    fixture = compFixture;\n                    fixture.detectChanges();\n                    drawer = fixture.componentInstance.viewChild;\n\n                    spyOn(drawer.closing, \"emit\");\n                    spyOn(drawer.closed, \"emit\");\n                    spyOn(drawer.opening, \"emit\");\n                    spyOn(drawer.opened, \"emit\");\n\n                    var re = drawer.open(true);\n                    fixture.detectChanges();\n                    fixture.debugElement.children[0].nativeElement.dispatchEvent(new Event('transitionend'));\n                    return re;\n                })\n                .then(function (value) {\n                    expect(value).toBe('opened');\n                    expect(drawer.opening.emit).toHaveBeenCalledWith('opening');\n                    expect(drawer.opened.emit).toHaveBeenCalledWith('opened');\n\n                    var re = drawer.toggle(true);\n                    fixture.detectChanges();\n                    fixture.debugElement.children[0].nativeElement.dispatchEvent(new Event('transitionend'));\n                    return re;\n                })\n                .then(function (value) {\n                     expect(value).toBe('closed');\n                    expect(drawer.closing.emit).toHaveBeenCalledWith('closing');\n                    expect(drawer.closed.emit).toHaveBeenCalledWith('closed');\n                    resolver();\n            }).catch(function (reason) {\n                console.log(reason);\n                return Promise.reject(reason);\n            });\n\n            // to be resolved at the end of the promise chain\n            return result;\n         })));\n\n        it('should properly initialize with min template',\n            async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n                var template = '<ig-nav-drawer><ig-drawer-content></ig-drawer-content><ig-drawer-mini-content></ig-drawer-mini-content></ig-nav-drawer>';\n                return tcb.overrideTemplate(TestComponentDI, template)\n                .createAsync(TestComponentDI)\n                .then((fixture) => {\n                    fixture.detectChanges();\n\n                    expect(fixture.componentInstance.viewChild.hasAnimateWidth).toBeTruthy();\n                    expect(fixture.debugElement.query((x) => { return x.nativeNode.nodeName === \"ASIDE\";}).nativeElement.classList).toContain(\"mini\");\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n        })));\n\n        it('should set pin, gestures options',\n            async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n                var template = '<ig-nav-drawer [pin]=\"pin\" [enableGestures]=\"enableGestures\"></ig-nav-drawer>';\n                return tcb.overrideTemplate(TestComponentPin, template)\n                .createAsync(TestComponentPin)\n                .then((fixture) => {\n                    var navDrawer = fixture.componentInstance.viewChild;\n\n                    fixture.detectChanges();\n\n                    expect(navDrawer.pin).toBeTruthy();\n                    expect(fixture.debugElement.query((x) => { return x.nativeNode.nodeName === \"ASIDE\";}).nativeElement.classList).toContain(\"pinned\");\n\n                    expect(navDrawer.enableGestures).toBe(false);\n\n                    fixture.componentInstance.enableGestures = \"true\";\n                    fixture.detectChanges();\n                    expect(navDrawer.enableGestures).toBeTruthy();\n\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n        })));\n\n        // TODO: Cannot use private methods in unit tests. swipe is a private method\n         /*\n        it('should toggle on edge swipe gesture',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = '<ig-nav-drawer></ig-nav-drawer>', resolver,\n                result = new Promise<any>( resolve => {\n                    resolver = (value?: any) => {\n                        resolve(value);\n                    };\n                } );\n                tcb.overrideTemplate(TestComponentDI, template)\n                .createAsync(TestComponentDI)\n                .then((fixture) => {\n                    var navDrawer: Infragistics.NavigationDrawer = fixture.componentInstance.viewChild;\n\n                    fixture.detectChanges();\n                    expect(navDrawer.isOpen).toEqual(false);\n                    //https://github.com/hammerjs/hammer.js/issues/779\n\n                    //Simulator.gestures.swipe(fixture.debugElement.children[0].nativeElement, { duration: 300, deltaX: 400, deltaY: 0 }, function() {\n                    //     expect(fixture.componentInstance.viewChild.isOpen).toEqual(true);\n                    //     resolver();\n                    //});\n\n                    // can't get simulator to toggle the handlers\n\n                    navDrawer.swipe(<HammerInput>{ pointerType: \"touch\", deltaX: 20, center: { x: 80, y: 10 }, distance: 10 });\n                    expect(navDrawer.isOpen).toEqual(false, \"should ignore swipes too far away from the edge\");\n\n\n                    navDrawer.swipe(<HammerInput>{ pointerType: \"touch\", deltaX: 20, center: {x: 10, y: 10}, distance: 10});\n                    expect(navDrawer.isOpen).toEqual(true);\n\n                    navDrawer.swipe(<HammerInput>{ pointerType: \"touch\", deltaX: -20, center: {x: 80, y: 10}, distance: 10});\n                    expect(navDrawer.isOpen).toEqual(false);\n\n                    resolver();\n\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n                return result;\n         })));\n        */\n\n        // TODO: Cannot use private methods in unit tests. panStart and panEnd are private methods\n         /*it('should toggle on edge pan gesture',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = '<ig-nav-drawer></ig-nav-drawer>', resolver,\n                result = new Promise<any>( resolve => {\n                    resolver = (value?: any) => {\n                        resolve(value);\n                    };\n                } );\n                tcb.overrideTemplate(TestComponentDI, template)\n                .createAsync(TestComponentDI)\n                .then((fixture) => {\n                    let hammerInput;\n                    fixture.detectChanges();\n                    let navDrawer = fixture.componentInstance.viewChild;\n                    expect(navDrawer.isOpen).toEqual(false);\n\n                    // not from edge\n                    hammerInput = <HammerInput>{ pointerType: \"touch\", deltaX: 20, center: { x: 80, y: 10 }, distance: 10 };\n                    navDrawer.panstart(hammerInput);\n                    navDrawer.panEnd(hammerInput);\n                    expect(navDrawer.isOpen).toEqual(false, \"should ignore pan too far away from the edge\");\n\n                    // not enough distance\n                    hammerInput = <HammerInput>{ pointerType: \"touch\", deltaX: 20, center: { x: 10, y: 10 }, distance: 10 };\n                    navDrawer.panstart(hammerInput);\n                    expect(navDrawer.drawer.classList).toContain(\"panning\");\n                    navDrawer.pan(hammerInput);\n\n                    // must wait for raf to test for pan position\n                    window.requestAnimationFrame(() => {\n                        expect(navDrawer.drawer.style.transform).toBe(\"translate3d(-280px, 0px, 0px)\");\n                        navDrawer.panEnd(<HammerInput>{ pointerType: \"touch\", deltaX: 20, center: { x: 10, y: 10 }, distance: 10 });\n                        expect(navDrawer.isOpen).toEqual(false, \"should ignore too short pan\");\n\n                        //valid pan\n                        hammerInput = <HammerInput>{ pointerType: \"touch\", deltaX: 200, center: { x: 10, y: 10 }, distance: 200 };\n                        navDrawer.panstart(hammerInput);\n                        navDrawer.panEnd(hammerInput);\n                        expect(navDrawer.isOpen).toEqual(true);\n\n                        // not enough distance, closing\n                        hammerInput = <HammerInput>{ pointerType: \"touch\", deltaX: -100, center: { x: 200, y: 10 }, distance: 100 };\n                        navDrawer.panstart(hammerInput);\n                        navDrawer.panEnd(hammerInput);\n                        expect(navDrawer.isOpen).toEqual(true, \"should ignore too short pan\");\n\n                        // close\n                        hammerInput = <HammerInput>{ pointerType: \"touch\", deltaX: -200, center: { x: 250, y: 10 }, distance: 200 };\n                        navDrawer.panstart(hammerInput);\n                        navDrawer.panEnd(hammerInput);\n                        expect(navDrawer.isOpen).toEqual(false);\n\n                        resolver();\n                    });\n\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n                return result;\n         })));*/\n\n        it('should update edge zone with mini width',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = '<ig-nav-drawer [miniWidth]=\"drawerMiniWidth\" ><ig-drawer-content></ig-drawer-content><ig-drawer-mini-content></ig-drawer-mini-content></ig-nav-drawer>';\n                return tcb.overrideTemplate(TestComponentDI, template)\n                .createAsync(TestComponentDI)\n                .then((fixture) => {\n                    let navDrawer: Infragistics.NavigationDrawer = fixture.componentInstance.viewChild;\n\n                    fixture.detectChanges();                    \n\n                    fixture.componentInstance.drawerMiniWidth = 60;\n                    fixture.detectChanges();\n                    expect(navDrawer.maxEdgeZone).toBe(66);\n\n                    fixture.componentInstance.drawerMiniWidth = 80;\n                    fixture.detectChanges();\n                    expect(navDrawer.maxEdgeZone).toBe(fixture.componentInstance.drawerMiniWidth * 1.1);\n\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n         })));\n\n        it('should update width from css or property',\n           async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n              var template = `<ig-nav-drawer [miniWidth]=\"drawerMiniWidth\" [width]=\"drawerWidth\">\n                                    <ig-drawer-content></ig-drawer-content>\n                                    <ig-drawer-mini-content></ig-drawer-mini-content>\n                            </ig-nav-drawer>`,\n                resolver, result = new Promise<any>( resolve => {\n                    resolver = (value?: any) => {\n                        resolve(value);\n                    };\n                } );\n                tcb.overrideTemplate(TestComponentDI, template)\n                //.overrideDirective(TestComponentDI, Infragistics.NavigationDrawer, TestDrawer)\n                .createAsync(TestComponentDI)\n                .then((fixture) => {\n                    let navDrawer: Infragistics.NavigationDrawer = fixture.componentInstance.viewChild;\n\n                    fixture.detectChanges();\n                    expect(navDrawer.expectedWidth).toBe(300);\n                    expect(navDrawer.expectedMiniWidth).toBe(60);\n\n                    fixture.componentInstance.drawerMiniWidth = 80;\n                    fixture.componentInstance.drawerWidth = \"250px\";\n                    fixture.detectChanges();\n                    expect(navDrawer.expectedWidth).toBe(250);\n                    expect(navDrawer.expectedMiniWidth).toBe(80);\n\n                    navDrawer.open();\n                    fixture.componentInstance.drawerWidth = \"350px\";\n                    fixture.detectChanges();\n                    window.requestAnimationFrame(() => {\n                        expect(navDrawer.drawer.style.width).toBe(\"350px\");\n                        resolver();\n                    });\n\n                }).catch (reason => {\n                    console.log(reason);\n                    return Promise.reject(reason);\n                });\n                return result;\n         })));\n    });\n}\n\n@Component({\n    selector: 'test-cmp',\n    template: '<div></div>', //\"Component 'TestComponent' must have either 'template' or 'templateUrl' set.\"\n    directives: [Infragistics.NavigationDrawer]\n})\nclass TestComponent {\n     @ViewChild(Infragistics.NavigationDrawer) public viewChild: Infragistics.NavigationDrawer;\n}\n\n@Component({\n    selector: 'test-cmp',\n    template: '<div></div>', //\"Component 'TestComponent' must have either 'template' or 'templateUrl' set.\"\n    providers: [Infragistics.NavigationService],\n    directives: [Infragistics.NavigationDrawer]\n})\nclass TestComponentDI {\n     drawerMiniWidth: number;\n     drawerWidth: string;\n     @ViewChild(Infragistics.NavigationDrawer) public viewChild: Infragistics.NavigationDrawer;\n}\n\nclass TestComponentPin extends TestComponentDI {\n     pin: boolean = true;\n     enableGestures: string = \"\";\n}"],"sourceRoot":"/source/"}